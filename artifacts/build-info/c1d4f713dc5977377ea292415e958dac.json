{"id":"c1d4f713dc5977377ea292415e958dac","_format":"hh-sol-build-info-1","solcVersion":"0.8.24","solcLongVersion":"0.8.24+commit.e11b9ed9","input":{"language":"Solidity","sources":{"contracts/AnimalFactory.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.24;\r\n\r\n/*Create a smart contract that can store and view a list of animals. Add manually\r\nthree (3) animals and give the possibility to the user to manually add an \r\nindefinite number of animals into the smart contract.*/\r\n\r\n\r\ncontract Animal{\r\n    // string[3] public listofmyanimals ;\r\n\r\n    string[] public listofanimals =  [\"cat\",\"cow\",\"zebra\"];\r\n    \r\n    function addAnimal(string memory _Animal) public {\r\n        listofanimals.push(_Animal);\r\n        \r\n     }\r\n\r\n    function retrieve () public view returns(string[] memory) {\r\n        return listofanimals;\r\n    }\r\n}\r\n\r\ncontract AnimalFactory{\r\n    // uint256 public favoritenumber;\r\n    // visiblity type public\r\n\r\n    Animal public Cow;\r\n    Animal public Bird;\r\n\r\n    function createAnimalcontract() public{\r\n        Cow = new Animal();\r\n        Bird = new Animal();\r\n\r\n    }\r\n    \r\n}"},"contracts/array.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.24;\r\n\r\ncontract Array{\r\n    uint256 myfavoritenumber;\r\n\r\n    struct person{\r\n        uint256 favoritenumber;\r\n        string name;\r\n    }\r\n    \r\n    /*uint256[] listOfpeople : this is an dynamic array and if we want to convert it into \r\n    static we need to put some number into those square bracket*/\r\n\r\n      \r\n    // person public pat = person(7,\"pat\");\r\n    // person public mathew = person(9,\"mathew\");\r\n    // person public jon = person(11,\"jon\");\r\n\r\n    person[] public listofpeople ; //[]\r\n\r\n    function addperson(string memory _name, uint256 _favoritenumber) public {\r\n        listofpeople.push(person(_favoritenumber,_name));\r\n    }\r\n}"},"contracts/exercise_on_array.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.24;\r\n\r\n/*Create a smart contract that can store and view a list of animals. Add manually\r\nthree (3) animals and give the possibility to the user to manually add an \r\nindefinite number of animals into the smart contract.*/\r\n\r\n\r\ncontract Animal{\r\n    // string[3] public listofmyanimals ;\r\n\r\n    string[] public listofanimals =  [\"cat\",\"cow\",\"zebra\"];\r\n    \r\n    function addAnimal(string memory _Animal) public {\r\n        listofanimals.push(_Animal);\r\n        \r\n     }\r\n\r\n    function retrieve () public view returns(string[] memory) {\r\n        return listofanimals;\r\n    }\r\n}"},"contracts/mapping.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\n\r\ncontract Mapping{\r\n    uint256 myfavoritenumber;\r\n\r\n    struct person{\r\n        uint256 favoritenumber;\r\n        string name;\r\n    }\r\n\r\n    mapping(uint256 => string) public favoritenumbertoname;\r\n    \r\n\r\n\r\n    person[] public listofpeople ; //[]\r\n\r\n    function addperson(string memory _name, uint256 _favoritenumber) public {\r\n        listofpeople.push(person(_favoritenumber,_name));\r\n        favoritenumbertoname[_favoritenumber] = _name;\r\n    \r\n    }\r\n\r\n    function getarraylength() public view returns(uint256){\r\n        return listofpeople.length;\r\n    }\r\n}"},"contracts/simplestorage.sol":{"content":"\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.24;\r\n\r\ncontract Simple_Storage{\r\n    uint256 public favoriteNumber;\r\n\r\n    function store(uint256 _favoriteNumber) public {\r\n        favoriteNumber=_favoriteNumber;\r\n    }\r\n\r\n    // view pure\r\n    function retrieve() public view returns (uint256){\r\n        return favoriteNumber;\r\n        \r\n\r\n    }\r\n}\r\n\r\n\r\ncontract SimpleStorage1{}\r\ncontract SimpleStorage2{}\r\ncontract SimpleStorage3{}"},"contracts/storagefactory.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\n// instead of copying this code we can import the code\r\n\r\n/*import \"./simplestorage.sol\"; // we willn not use this in case there is more contracts \r\nthere so they will also get executed that will make it expensive*/\r\n\r\nimport {Simple_Storage,SimpleStorage2} from \"./simplestorage.sol\";\r\n\r\n\r\ncontract storagefactory{\r\n    // uint256 public favoritenumber;\r\n    // visiblity type public\r\n\r\n    Simple_Storage public mysimplestorage;\r\n    function createsimplestoragecontract() public{\r\n        mysimplestorage = new Simple_Storage();\r\n\r\n    }\r\n    \r\n}"}},"settings":{"evmVersion":"paris","optimizer":{"enabled":true,"mode":"3"},"outputSelection":{"*":{"*":["abi","evm.methodIdentifiers","metadata"],"":["ast"]}},"libraries":{}}},"output":{"errors":[],"version":"0.8.24","long_version":"0.8.24+commit.e11b9ed9.Linux.g++","zk_version":"1.4.1","sources":{"contracts/AnimalFactory.sol":{"id":0,"ast":{"absolutePath":"contracts/AnimalFactory.sol","exportedSymbols":{"Animal":[30],"AnimalFactory":[55]},"id":56,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","0.8",".24"],"nodeType":"PragmaDirective","src":"33:23:0"},{"abstract":false,"baseContracts":[],"canonicalName":"Animal","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":30,"linearizedBaseContracts":[30],"name":"Animal","nameLocation":"289:6:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"6568cad1","id":8,"mutability":"mutable","name":"listofanimals","nameLocation":"363:13:0","nodeType":"VariableDeclaration","scope":30,"src":"347:54:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage","typeString":"string[]"},"typeName":{"baseType":{"id":2,"name":"string","nodeType":"ElementaryTypeName","src":"347:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":3,"nodeType":"ArrayTypeName","src":"347:8:0","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"value":{"components":[{"hexValue":"636174","id":4,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"381:5:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_52763589e772702fa7977a28b3cfb6ca534f0208a2b2d55f7558af664eac478a","typeString":"literal_string \"cat\""},"value":"cat"},{"hexValue":"636f77","id":5,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"387:5:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_c85ef7d79691fe79573b1a7064c19c1a9819ebdbd1faaab1a8ec92344438aaf4","typeString":"literal_string \"cow\""},"value":"cow"},{"hexValue":"7a65627261","id":6,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"393:7:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_82ea072ac2798ae55f5b753a5ca18301f7783fca8f09479c7ff5ba37e94deaca","typeString":"literal_string \"zebra\""},"value":"zebra"}],"id":7,"isConstant":false,"isInlineArray":true,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"380:21:0","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$3_memory_ptr","typeString":"string memory[3] memory"}},"visibility":"public"},{"body":{"id":19,"nodeType":"Block","src":"463:57:0","statements":[{"expression":{"arguments":[{"id":16,"name":"_Animal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"493:7:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":13,"name":"listofanimals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"474:13:0","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage","typeString":"string storage ref[] storage ref"}},"id":15,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"488:4:0","memberName":"push","nodeType":"MemberAccess","src":"474:18:0","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_string_storage_$dyn_storage_ptr_$_t_string_storage_$returns$__$attached_to$_t_array$_t_string_storage_$dyn_storage_ptr_$","typeString":"function (string storage ref[] storage pointer,string storage ref)"}},"id":17,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"474:27:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":18,"nodeType":"ExpressionStatement","src":"474:27:0"}]},"functionSelector":"5139bfff","id":20,"implemented":true,"kind":"function","modifiers":[],"name":"addAnimal","nameLocation":"423:9:0","nodeType":"FunctionDefinition","parameters":{"id":11,"nodeType":"ParameterList","parameters":[{"constant":false,"id":10,"mutability":"mutable","name":"_Animal","nameLocation":"447:7:0","nodeType":"VariableDeclaration","scope":20,"src":"433:21:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":9,"name":"string","nodeType":"ElementaryTypeName","src":"433:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"432:23:0"},"returnParameters":{"id":12,"nodeType":"ParameterList","parameters":[],"src":"463:0:0"},"scope":30,"src":"414:106:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":28,"nodeType":"Block","src":"586:39:0","statements":[{"expression":{"id":26,"name":"listofanimals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"604:13:0","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage","typeString":"string storage ref[] storage ref"}},"functionReturnParameters":25,"id":27,"nodeType":"Return","src":"597:20:0"}]},"functionSelector":"2e64cec1","id":29,"implemented":true,"kind":"function","modifiers":[],"name":"retrieve","nameLocation":"537:8:0","nodeType":"FunctionDefinition","parameters":{"id":21,"nodeType":"ParameterList","parameters":[],"src":"546:2:0"},"returnParameters":{"id":25,"nodeType":"ParameterList","parameters":[{"constant":false,"id":24,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":29,"src":"569:15:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":22,"name":"string","nodeType":"ElementaryTypeName","src":"569:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":23,"nodeType":"ArrayTypeName","src":"569:8:0","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"}],"src":"568:17:0"},"scope":30,"src":"528:97:0","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":56,"src":"280:348:0","usedErrors":[],"usedEvents":[]},{"abstract":false,"baseContracts":[],"canonicalName":"AnimalFactory","contractDependencies":[30],"contractKind":"contract","fullyImplemented":true,"id":55,"linearizedBaseContracts":[55],"name":"AnimalFactory","nameLocation":"641:13:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"ff2eff94","id":33,"mutability":"mutable","name":"Cow","nameLocation":"746:3:0","nodeType":"VariableDeclaration","scope":55,"src":"732:17:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_Animal_$30","typeString":"contract Animal"},"typeName":{"id":32,"nodeType":"UserDefinedTypeName","pathNode":{"id":31,"name":"Animal","nameLocations":["732:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":30,"src":"732:6:0"},"referencedDeclaration":30,"src":"732:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_Animal_$30","typeString":"contract Animal"}},"visibility":"public"},{"constant":false,"functionSelector":"5da42ae5","id":36,"mutability":"mutable","name":"Bird","nameLocation":"770:4:0","nodeType":"VariableDeclaration","scope":55,"src":"756:18:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_Animal_$30","typeString":"contract Animal"},"typeName":{"id":35,"nodeType":"UserDefinedTypeName","pathNode":{"id":34,"name":"Animal","nameLocations":["756:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":30,"src":"756:6:0"},"referencedDeclaration":30,"src":"756:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_Animal_$30","typeString":"contract Animal"}},"visibility":"public"},{"body":{"id":53,"nodeType":"Block","src":"821:69:0","statements":[{"expression":{"id":44,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":39,"name":"Cow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":33,"src":"832:3:0","typeDescriptions":{"typeIdentifier":"t_contract$_Animal_$30","typeString":"contract Animal"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"id":42,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"NewExpression","src":"838:10:0","typeDescriptions":{"typeIdentifier":"t_function_creation_nonpayable$__$returns$_t_contract$_Animal_$30_$","typeString":"function () returns (contract Animal)"},"typeName":{"id":41,"nodeType":"UserDefinedTypeName","pathNode":{"id":40,"name":"Animal","nameLocations":["842:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":30,"src":"842:6:0"},"referencedDeclaration":30,"src":"842:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_Animal_$30","typeString":"contract Animal"}}},"id":43,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"838:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_Animal_$30","typeString":"contract Animal"}},"src":"832:18:0","typeDescriptions":{"typeIdentifier":"t_contract$_Animal_$30","typeString":"contract Animal"}},"id":45,"nodeType":"ExpressionStatement","src":"832:18:0"},{"expression":{"id":51,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":46,"name":"Bird","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":36,"src":"861:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_Animal_$30","typeString":"contract Animal"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"id":49,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"NewExpression","src":"868:10:0","typeDescriptions":{"typeIdentifier":"t_function_creation_nonpayable$__$returns$_t_contract$_Animal_$30_$","typeString":"function () returns (contract Animal)"},"typeName":{"id":48,"nodeType":"UserDefinedTypeName","pathNode":{"id":47,"name":"Animal","nameLocations":["872:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":30,"src":"872:6:0"},"referencedDeclaration":30,"src":"872:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_Animal_$30","typeString":"contract Animal"}}},"id":50,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"868:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_Animal_$30","typeString":"contract Animal"}},"src":"861:19:0","typeDescriptions":{"typeIdentifier":"t_contract$_Animal_$30","typeString":"contract Animal"}},"id":52,"nodeType":"ExpressionStatement","src":"861:19:0"}]},"functionSelector":"f1f259d8","id":54,"implemented":true,"kind":"function","modifiers":[],"name":"createAnimalcontract","nameLocation":"792:20:0","nodeType":"FunctionDefinition","parameters":{"id":37,"nodeType":"ParameterList","parameters":[],"src":"812:2:0"},"returnParameters":{"id":38,"nodeType":"ParameterList","parameters":[],"src":"821:0:0"},"scope":55,"src":"783:107:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":56,"src":"632:267:0","usedErrors":[],"usedEvents":[]}],"src":"33:866:0"}},"contracts/array.sol":{"id":1,"ast":{"absolutePath":"contracts/array.sol","exportedSymbols":{"Array":[86]},"id":87,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":57,"literals":["solidity","0.8",".24"],"nodeType":"PragmaDirective","src":"33:23:1"},{"abstract":false,"baseContracts":[],"canonicalName":"Array","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":86,"linearizedBaseContracts":[86],"name":"Array","nameLocation":"69:5:1","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":59,"mutability":"mutable","name":"myfavoritenumber","nameLocation":"89:16:1","nodeType":"VariableDeclaration","scope":86,"src":"81:24:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":58,"name":"uint256","nodeType":"ElementaryTypeName","src":"81:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"canonicalName":"Array.person","id":64,"members":[{"constant":false,"id":61,"mutability":"mutable","name":"favoritenumber","nameLocation":"146:14:1","nodeType":"VariableDeclaration","scope":64,"src":"138:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":60,"name":"uint256","nodeType":"ElementaryTypeName","src":"138:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":63,"mutability":"mutable","name":"name","nameLocation":"178:4:1","nodeType":"VariableDeclaration","scope":64,"src":"171:11:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":62,"name":"string","nodeType":"ElementaryTypeName","src":"171:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"person","nameLocation":"121:6:1","nodeType":"StructDefinition","scope":86,"src":"114:76:1","visibility":"public"},{"constant":false,"functionSelector":"bf119bdb","id":68,"mutability":"mutable","name":"listofpeople","nameLocation":"531:12:1","nodeType":"VariableDeclaration","scope":86,"src":"515:28:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_person_$64_storage_$dyn_storage","typeString":"struct Array.person[]"},"typeName":{"baseType":{"id":66,"nodeType":"UserDefinedTypeName","pathNode":{"id":65,"name":"person","nameLocations":["515:6:1"],"nodeType":"IdentifierPath","referencedDeclaration":64,"src":"515:6:1"},"referencedDeclaration":64,"src":"515:6:1","typeDescriptions":{"typeIdentifier":"t_struct$_person_$64_storage_ptr","typeString":"struct Array.person"}},"id":67,"nodeType":"ArrayTypeName","src":"515:8:1","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_person_$64_storage_$dyn_storage_ptr","typeString":"struct Array.person[]"}},"visibility":"public"},{"body":{"id":84,"nodeType":"Block","src":"630:67:1","statements":[{"expression":{"arguments":[{"arguments":[{"id":79,"name":"_favoritenumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":72,"src":"666:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":80,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":70,"src":"682:5:1","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":78,"name":"person","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":64,"src":"659:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_person_$64_storage_ptr_$","typeString":"type(struct Array.person storage pointer)"}},"id":81,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"659:29:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_person_$64_memory_ptr","typeString":"struct Array.person memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_person_$64_memory_ptr","typeString":"struct Array.person memory"}],"expression":{"id":75,"name":"listofpeople","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":68,"src":"641:12:1","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_person_$64_storage_$dyn_storage","typeString":"struct Array.person storage ref[] storage ref"}},"id":77,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"654:4:1","memberName":"push","nodeType":"MemberAccess","src":"641:17:1","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_struct$_person_$64_storage_$dyn_storage_ptr_$_t_struct$_person_$64_storage_$returns$__$attached_to$_t_array$_t_struct$_person_$64_storage_$dyn_storage_ptr_$","typeString":"function (struct Array.person storage ref[] storage pointer,struct Array.person storage ref)"}},"id":82,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"641:48:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":83,"nodeType":"ExpressionStatement","src":"641:48:1"}]},"functionSelector":"e1b3202a","id":85,"implemented":true,"kind":"function","modifiers":[],"name":"addperson","nameLocation":"567:9:1","nodeType":"FunctionDefinition","parameters":{"id":73,"nodeType":"ParameterList","parameters":[{"constant":false,"id":70,"mutability":"mutable","name":"_name","nameLocation":"591:5:1","nodeType":"VariableDeclaration","scope":85,"src":"577:19:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":69,"name":"string","nodeType":"ElementaryTypeName","src":"577:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":72,"mutability":"mutable","name":"_favoritenumber","nameLocation":"606:15:1","nodeType":"VariableDeclaration","scope":85,"src":"598:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":71,"name":"uint256","nodeType":"ElementaryTypeName","src":"598:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"576:46:1"},"returnParameters":{"id":74,"nodeType":"ParameterList","parameters":[],"src":"630:0:1"},"scope":86,"src":"558:139:1","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":87,"src":"60:640:1","usedErrors":[],"usedEvents":[]}],"src":"33:667:1"}},"contracts/exercise_on_array.sol":{"id":2,"ast":{"absolutePath":"contracts/exercise_on_array.sol","exportedSymbols":{"Animal":[117]},"id":118,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":88,"literals":["solidity","0.8",".24"],"nodeType":"PragmaDirective","src":"33:23:2"},{"abstract":false,"baseContracts":[],"canonicalName":"Animal","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":117,"linearizedBaseContracts":[117],"name":"Animal","nameLocation":"289:6:2","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"6568cad1","id":95,"mutability":"mutable","name":"listofanimals","nameLocation":"363:13:2","nodeType":"VariableDeclaration","scope":117,"src":"347:54:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage","typeString":"string[]"},"typeName":{"baseType":{"id":89,"name":"string","nodeType":"ElementaryTypeName","src":"347:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":90,"nodeType":"ArrayTypeName","src":"347:8:2","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"value":{"components":[{"hexValue":"636174","id":91,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"381:5:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_52763589e772702fa7977a28b3cfb6ca534f0208a2b2d55f7558af664eac478a","typeString":"literal_string \"cat\""},"value":"cat"},{"hexValue":"636f77","id":92,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"387:5:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_c85ef7d79691fe79573b1a7064c19c1a9819ebdbd1faaab1a8ec92344438aaf4","typeString":"literal_string \"cow\""},"value":"cow"},{"hexValue":"7a65627261","id":93,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"393:7:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_82ea072ac2798ae55f5b753a5ca18301f7783fca8f09479c7ff5ba37e94deaca","typeString":"literal_string \"zebra\""},"value":"zebra"}],"id":94,"isConstant":false,"isInlineArray":true,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"380:21:2","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$3_memory_ptr","typeString":"string memory[3] memory"}},"visibility":"public"},{"body":{"id":106,"nodeType":"Block","src":"463:57:2","statements":[{"expression":{"arguments":[{"id":103,"name":"_Animal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":97,"src":"493:7:2","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":100,"name":"listofanimals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":95,"src":"474:13:2","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage","typeString":"string storage ref[] storage ref"}},"id":102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"488:4:2","memberName":"push","nodeType":"MemberAccess","src":"474:18:2","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_string_storage_$dyn_storage_ptr_$_t_string_storage_$returns$__$attached_to$_t_array$_t_string_storage_$dyn_storage_ptr_$","typeString":"function (string storage ref[] storage pointer,string storage ref)"}},"id":104,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"474:27:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":105,"nodeType":"ExpressionStatement","src":"474:27:2"}]},"functionSelector":"5139bfff","id":107,"implemented":true,"kind":"function","modifiers":[],"name":"addAnimal","nameLocation":"423:9:2","nodeType":"FunctionDefinition","parameters":{"id":98,"nodeType":"ParameterList","parameters":[{"constant":false,"id":97,"mutability":"mutable","name":"_Animal","nameLocation":"447:7:2","nodeType":"VariableDeclaration","scope":107,"src":"433:21:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":96,"name":"string","nodeType":"ElementaryTypeName","src":"433:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"432:23:2"},"returnParameters":{"id":99,"nodeType":"ParameterList","parameters":[],"src":"463:0:2"},"scope":117,"src":"414:106:2","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":115,"nodeType":"Block","src":"586:39:2","statements":[{"expression":{"id":113,"name":"listofanimals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":95,"src":"604:13:2","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage","typeString":"string storage ref[] storage ref"}},"functionReturnParameters":112,"id":114,"nodeType":"Return","src":"597:20:2"}]},"functionSelector":"2e64cec1","id":116,"implemented":true,"kind":"function","modifiers":[],"name":"retrieve","nameLocation":"537:8:2","nodeType":"FunctionDefinition","parameters":{"id":108,"nodeType":"ParameterList","parameters":[],"src":"546:2:2"},"returnParameters":{"id":112,"nodeType":"ParameterList","parameters":[{"constant":false,"id":111,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":116,"src":"569:15:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":109,"name":"string","nodeType":"ElementaryTypeName","src":"569:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":110,"nodeType":"ArrayTypeName","src":"569:8:2","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"}],"src":"568:17:2"},"scope":117,"src":"528:97:2","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":118,"src":"280:348:2","usedErrors":[],"usedEvents":[]}],"src":"33:595:2"}},"contracts/mapping.sol":{"id":3,"ast":{"absolutePath":"contracts/mapping.sol","exportedSymbols":{"Mapping":[167]},"id":168,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":119,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"33:24:3"},{"abstract":false,"baseContracts":[],"canonicalName":"Mapping","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":167,"linearizedBaseContracts":[167],"name":"Mapping","nameLocation":"70:7:3","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":121,"mutability":"mutable","name":"myfavoritenumber","nameLocation":"92:16:3","nodeType":"VariableDeclaration","scope":167,"src":"84:24:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":120,"name":"uint256","nodeType":"ElementaryTypeName","src":"84:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"canonicalName":"Mapping.person","id":126,"members":[{"constant":false,"id":123,"mutability":"mutable","name":"favoritenumber","nameLocation":"149:14:3","nodeType":"VariableDeclaration","scope":126,"src":"141:22:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":122,"name":"uint256","nodeType":"ElementaryTypeName","src":"141:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":125,"mutability":"mutable","name":"name","nameLocation":"181:4:3","nodeType":"VariableDeclaration","scope":126,"src":"174:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":124,"name":"string","nodeType":"ElementaryTypeName","src":"174:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"person","nameLocation":"124:6:3","nodeType":"StructDefinition","scope":167,"src":"117:76:3","visibility":"public"},{"constant":false,"functionSelector":"8c1edb90","id":130,"mutability":"mutable","name":"favoritenumbertoname","nameLocation":"235:20:3","nodeType":"VariableDeclaration","scope":167,"src":"201:54:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string)"},"typeName":{"id":129,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":127,"name":"uint256","nodeType":"ElementaryTypeName","src":"209:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"201:26:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":128,"name":"string","nodeType":"ElementaryTypeName","src":"220:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"visibility":"public"},{"constant":false,"functionSelector":"bf119bdb","id":134,"mutability":"mutable","name":"listofpeople","nameLocation":"288:12:3","nodeType":"VariableDeclaration","scope":167,"src":"272:28:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_person_$126_storage_$dyn_storage","typeString":"struct Mapping.person[]"},"typeName":{"baseType":{"id":132,"nodeType":"UserDefinedTypeName","pathNode":{"id":131,"name":"person","nameLocations":["272:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":126,"src":"272:6:3"},"referencedDeclaration":126,"src":"272:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_person_$126_storage_ptr","typeString":"struct Mapping.person"}},"id":133,"nodeType":"ArrayTypeName","src":"272:8:3","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_person_$126_storage_$dyn_storage_ptr","typeString":"struct Mapping.person[]"}},"visibility":"public"},{"body":{"id":156,"nodeType":"Block","src":"387:129:3","statements":[{"expression":{"arguments":[{"arguments":[{"id":145,"name":"_favoritenumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"423:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":146,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":136,"src":"439:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":144,"name":"person","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":126,"src":"416:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_person_$126_storage_ptr_$","typeString":"type(struct Mapping.person storage pointer)"}},"id":147,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"416:29:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_person_$126_memory_ptr","typeString":"struct Mapping.person memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_person_$126_memory_ptr","typeString":"struct Mapping.person memory"}],"expression":{"id":141,"name":"listofpeople","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":134,"src":"398:12:3","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_person_$126_storage_$dyn_storage","typeString":"struct Mapping.person storage ref[] storage ref"}},"id":143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"411:4:3","memberName":"push","nodeType":"MemberAccess","src":"398:17:3","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_struct$_person_$126_storage_$dyn_storage_ptr_$_t_struct$_person_$126_storage_$returns$__$attached_to$_t_array$_t_struct$_person_$126_storage_$dyn_storage_ptr_$","typeString":"function (struct Mapping.person storage ref[] storage pointer,struct Mapping.person storage ref)"}},"id":148,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"398:48:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":149,"nodeType":"ExpressionStatement","src":"398:48:3"},{"expression":{"id":154,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":150,"name":"favoritenumbertoname","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":130,"src":"457:20:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string storage ref)"}},"id":152,"indexExpression":{"id":151,"name":"_favoritenumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"478:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"457:37:3","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":153,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":136,"src":"497:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"457:45:3","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":155,"nodeType":"ExpressionStatement","src":"457:45:3"}]},"functionSelector":"e1b3202a","id":157,"implemented":true,"kind":"function","modifiers":[],"name":"addperson","nameLocation":"324:9:3","nodeType":"FunctionDefinition","parameters":{"id":139,"nodeType":"ParameterList","parameters":[{"constant":false,"id":136,"mutability":"mutable","name":"_name","nameLocation":"348:5:3","nodeType":"VariableDeclaration","scope":157,"src":"334:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":135,"name":"string","nodeType":"ElementaryTypeName","src":"334:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":138,"mutability":"mutable","name":"_favoritenumber","nameLocation":"363:15:3","nodeType":"VariableDeclaration","scope":157,"src":"355:23:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":137,"name":"uint256","nodeType":"ElementaryTypeName","src":"355:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"333:46:3"},"returnParameters":{"id":140,"nodeType":"ParameterList","parameters":[],"src":"387:0:3"},"scope":167,"src":"315:201:3","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":165,"nodeType":"Block","src":"578:45:3","statements":[{"expression":{"expression":{"id":162,"name":"listofpeople","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":134,"src":"596:12:3","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_person_$126_storage_$dyn_storage","typeString":"struct Mapping.person storage ref[] storage ref"}},"id":163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"609:6:3","memberName":"length","nodeType":"MemberAccess","src":"596:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":161,"id":164,"nodeType":"Return","src":"589:26:3"}]},"functionSelector":"5801afa5","id":166,"implemented":true,"kind":"function","modifiers":[],"name":"getarraylength","nameLocation":"533:14:3","nodeType":"FunctionDefinition","parameters":{"id":158,"nodeType":"ParameterList","parameters":[],"src":"547:2:3"},"returnParameters":{"id":161,"nodeType":"ParameterList","parameters":[{"constant":false,"id":160,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":166,"src":"570:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":159,"name":"uint256","nodeType":"ElementaryTypeName","src":"570:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"569:9:3"},"scope":167,"src":"524:99:3","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":168,"src":"61:565:3","usedErrors":[],"usedEvents":[]}],"src":"33:593:3"}},"contracts/simplestorage.sol":{"id":4,"ast":{"absolutePath":"contracts/simplestorage.sol","exportedSymbols":{"SimpleStorage1":[191],"SimpleStorage2":[192],"SimpleStorage3":[193],"Simple_Storage":[190]},"id":194,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":169,"literals":["solidity","0.8",".24"],"nodeType":"PragmaDirective","src":"35:23:4"},{"abstract":false,"baseContracts":[],"canonicalName":"Simple_Storage","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":190,"linearizedBaseContracts":[190],"name":"Simple_Storage","nameLocation":"71:14:4","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"471f7cdf","id":171,"mutability":"mutable","name":"favoriteNumber","nameLocation":"107:14:4","nodeType":"VariableDeclaration","scope":190,"src":"92:29:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":170,"name":"uint256","nodeType":"ElementaryTypeName","src":"92:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"body":{"id":180,"nodeType":"Block","src":"177:49:4","statements":[{"expression":{"id":178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":176,"name":"favoriteNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":171,"src":"188:14:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":177,"name":"_favoriteNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":173,"src":"203:15:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"188:30:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":179,"nodeType":"ExpressionStatement","src":"188:30:4"}]},"functionSelector":"6057361d","id":181,"implemented":true,"kind":"function","modifiers":[],"name":"store","nameLocation":"139:5:4","nodeType":"FunctionDefinition","parameters":{"id":174,"nodeType":"ParameterList","parameters":[{"constant":false,"id":173,"mutability":"mutable","name":"_favoriteNumber","nameLocation":"153:15:4","nodeType":"VariableDeclaration","scope":181,"src":"145:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":172,"name":"uint256","nodeType":"ElementaryTypeName","src":"145:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"144:25:4"},"returnParameters":{"id":175,"nodeType":"ParameterList","parameters":[],"src":"177:0:4"},"scope":190,"src":"130:96:4","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":188,"nodeType":"Block","src":"301:52:4","statements":[{"expression":{"id":186,"name":"favoriteNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":171,"src":"319:14:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":185,"id":187,"nodeType":"Return","src":"312:21:4"}]},"functionSelector":"2e64cec1","id":189,"implemented":true,"kind":"function","modifiers":[],"name":"retrieve","nameLocation":"261:8:4","nodeType":"FunctionDefinition","parameters":{"id":182,"nodeType":"ParameterList","parameters":[],"src":"269:2:4"},"returnParameters":{"id":185,"nodeType":"ParameterList","parameters":[{"constant":false,"id":184,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":189,"src":"293:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":183,"name":"uint256","nodeType":"ElementaryTypeName","src":"293:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"292:9:4"},"scope":190,"src":"252:101:4","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":194,"src":"62:294:4","usedErrors":[],"usedEvents":[]},{"abstract":false,"baseContracts":[],"canonicalName":"SimpleStorage1","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":191,"linearizedBaseContracts":[191],"name":"SimpleStorage1","nameLocation":"371:14:4","nodeType":"ContractDefinition","nodes":[],"scope":194,"src":"362:25:4","usedErrors":[],"usedEvents":[]},{"abstract":false,"baseContracts":[],"canonicalName":"SimpleStorage2","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":192,"linearizedBaseContracts":[192],"name":"SimpleStorage2","nameLocation":"398:14:4","nodeType":"ContractDefinition","nodes":[],"scope":194,"src":"389:25:4","usedErrors":[],"usedEvents":[]},{"abstract":false,"baseContracts":[],"canonicalName":"SimpleStorage3","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":193,"linearizedBaseContracts":[193],"name":"SimpleStorage3","nameLocation":"425:14:4","nodeType":"ContractDefinition","nodes":[],"scope":194,"src":"416:25:4","usedErrors":[],"usedEvents":[]}],"src":"35:406:4"}},"contracts/storagefactory.sol":{"id":5,"ast":{"absolutePath":"contracts/storagefactory.sol","exportedSymbols":{"SimpleStorage2":[192],"Simple_Storage":[190],"storagefactory":[213]},"id":214,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":195,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"33:24:5"},{"absolutePath":"contracts/simplestorage.sol","file":"./simplestorage.sol","id":198,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":214,"sourceUnit":194,"src":"278:66:5","symbolAliases":[{"foreign":{"id":196,"name":"Simple_Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":190,"src":"286:14:5","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":197,"name":"SimpleStorage2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":192,"src":"301:14:5","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"storagefactory","contractDependencies":[190],"contractKind":"contract","fullyImplemented":true,"id":213,"linearizedBaseContracts":[213],"name":"storagefactory","nameLocation":"359:14:5","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"4761822f","id":201,"mutability":"mutable","name":"mysimplestorage","nameLocation":"473:15:5","nodeType":"VariableDeclaration","scope":213,"src":"451:37:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_Simple_Storage_$190","typeString":"contract Simple_Storage"},"typeName":{"id":200,"nodeType":"UserDefinedTypeName","pathNode":{"id":199,"name":"Simple_Storage","nameLocations":["451:14:5"],"nodeType":"IdentifierPath","referencedDeclaration":190,"src":"451:14:5"},"referencedDeclaration":190,"src":"451:14:5","typeDescriptions":{"typeIdentifier":"t_contract$_Simple_Storage_$190","typeString":"contract Simple_Storage"}},"visibility":"public"},{"body":{"id":211,"nodeType":"Block","src":"540:59:5","statements":[{"expression":{"id":209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":204,"name":"mysimplestorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":201,"src":"551:15:5","typeDescriptions":{"typeIdentifier":"t_contract$_Simple_Storage_$190","typeString":"contract Simple_Storage"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"id":207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"NewExpression","src":"569:18:5","typeDescriptions":{"typeIdentifier":"t_function_creation_nonpayable$__$returns$_t_contract$_Simple_Storage_$190_$","typeString":"function () returns (contract Simple_Storage)"},"typeName":{"id":206,"nodeType":"UserDefinedTypeName","pathNode":{"id":205,"name":"Simple_Storage","nameLocations":["573:14:5"],"nodeType":"IdentifierPath","referencedDeclaration":190,"src":"573:14:5"},"referencedDeclaration":190,"src":"573:14:5","typeDescriptions":{"typeIdentifier":"t_contract$_Simple_Storage_$190","typeString":"contract Simple_Storage"}}},"id":208,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"569:20:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_Simple_Storage_$190","typeString":"contract Simple_Storage"}},"src":"551:38:5","typeDescriptions":{"typeIdentifier":"t_contract$_Simple_Storage_$190","typeString":"contract Simple_Storage"}},"id":210,"nodeType":"ExpressionStatement","src":"551:38:5"}]},"functionSelector":"e54994f3","id":212,"implemented":true,"kind":"function","modifiers":[],"name":"createsimplestoragecontract","nameLocation":"504:27:5","nodeType":"FunctionDefinition","parameters":{"id":202,"nodeType":"ParameterList","parameters":[],"src":"531:2:5"},"returnParameters":{"id":203,"nodeType":"ParameterList","parameters":[],"src":"540:0:5"},"scope":213,"src":"495:104:5","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":214,"src":"350:258:5","usedErrors":[],"usedEvents":[]}],"src":"33:575:5"}}},"contracts":{"contracts/AnimalFactory.sol":{"Animal":{"abi":[{"inputs":[{"internalType":"string","name":"_Animal","type":"string"}],"name":"addAnimal","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"listofanimals","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"retrieve","outputs":[{"internalType":"string[]","name":"","type":"string[]"}],"stateMutability":"view","type":"function"}],"metadata":{"optimizer_settings":{"is_debug_logging_enabled":false,"is_fallback_to_size_enabled":false,"is_system_request_memoization_disabled":false,"is_verify_each_enabled":false,"jump_table_density_threshold":null,"level_back_end":"Aggressive","level_middle_end":"Aggressive","level_middle_end_size":"Zero"},"solc_metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_Animal\",\"type\":\"string\"}],\"name\":\"addAnimal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listofanimals\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieve\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AnimalFactory.sol\":\"Animal\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOcmu\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/AnimalFactory.sol\":{\"keccak256\":\"0x7f9685b263e13e948c1a283fcc2d689dcae9d48efab40ee3bb5d225fb635c78e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://258d6dc8ce3261fa69b6483046421264ae933804106df8ff244ca9665ecc06fb\",\"dweb:/ipfs/QmRQwirjjaNsvPova6HAKM9RaD8EwZkVysyBPgRgst19ZV\"]}},\"version\":1}","solc_version":"0.8.24","solc_zkvm_edition":null,"zk_version":"1.4.1"},"evm":{"legacyAssembly":null,"assembly":"\t.text\n\t.file\t\"AnimalFactory.sol:Animal\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[7]\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_1\n\tadd\t128, r0, r2\n\tst.1\t64, r2\n\tsub.s!\t4, r3, r2\n\tjump.lt\t@.BB0_2\n\tld\tr1, r2\n\tshr.s\t224, r2, r2\n\tsub.s!\t@CPI0_7[0], r2, r4\n\tjump.eq\t@.BB0_103\n\tsub.s!\t@CPI0_8[0], r2, r4\n\tjump.eq\t@.BB0_71\n\tsub.s!\t@CPI0_9[0], r2, r1\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tsload\tr0, r5\n\tsub.s!\t@CPI0_5[0], r5, r1\n\tjump.gt\t@.BB0_23\n\tshl.s\t5, r5, r1\n\tadd\t63, r1, r1\n\tand\t@CPI0_12[0], r1, r1\n\tsub.s!\t@CPI0_11[0], r1, r2\n\tjump.gt\t@.BB0_23\n\tadd\t128, r1, r1\n\tst.1\t64, r1\n\tst.1\t128, r5\n\tst.1\t0, r0\n\tsub!\tr5, r0, r2\n\tjump.eq\t@.BB0_64\n\tadd\t160, r0, r6\n\tadd\t@CPI0_10[0], r0, r7\n\tadd\tr0, r0, r8\n\tadd\tr5, r0, stack-[1]\n.BB0_52:\n\tsload\tr7, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r3\n\tand\t127, r3, r4\n\tadd.ne\tr3, r0, r4\n\tsub.s!\t31, r4, r3\n\tadd\t0, r0, r3\n\tadd.gt\t1, r0, r3\n\txor\tr1, r3, r3\n\tand!\t1, r3, r3\n\tjump.ne\t@.BB0_10\n\tld.1\t64, r9\n\tst.1.inc\tr9, r4, r3\n\tsub!\tr2, r0, r2\n\tjump.eq\t@.BB0_56\n\tadd\tr3, r0, stack-[2]\n\tadd\tr4, r0, stack-[3]\n\tadd\tr9, r0, stack-[4]\n\tadd\tr8, r0, stack-[5]\n\tadd\tr6, r0, stack-[7]\n\tadd\tr7, r0, stack-[6]\n\tst.1\t0, r7\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_4[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[3], r0, r10\n\tsub!\tr10, r0, r2\n\tadd\tstack-[1], r0, r5\n\tadd\tstack-[7], r0, r6\n\tadd\tstack-[5], r0, r8\n\tjump.eq\t@.BB0_59\n\tld\tr1, r2\n\tadd\tr0, r0, r1\n\tadd\tstack-[6], r0, r7\n\tadd\tstack-[4], r0, r9\n\tadd\tstack-[2], r0, r11\n.BB0_61:\n\tadd\tr11, r1, r3\n\tsload\tr2, r4\n\tst.1\tr3, r4\n\tadd\t1, r2, r2\n\tadd\t32, r1, r1\n\tsub!\tr1, r10, r3\n\tjump.lt\t@.BB0_61\n\tjump\t@.BB0_54\n.BB0_56:\n\tsub.s\t256, r0, r2\n\tand\tr1, r2, r1\n\tst.1\tr3, r1\n\tsub!\tr4, r0, r1\n\tadd\t32, r0, r1\n\tadd.eq\t0, r0, r1\n\tjump\t@.BB0_54\n.BB0_59:\n\tadd\tr0, r0, r1\n\tadd\tstack-[6], r0, r7\n\tadd\tstack-[4], r0, r9\n.BB0_54:\n\tadd\t63, r1, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r2\n\tadd\tr2, r9, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_5[0], r1, r3\n\tjump.gt\t@.BB0_23\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_23\n\tst.1\t64, r1\n\tst.1.inc\tr6, r9, r6\n\tadd\t1, r7, r7\n\tadd\t1, r8, r8\n\tsub!\tr8, r5, r1\n\tjump.lt\t@.BB0_52\n\tld.1\t64, r1\n.BB0_64:\n\tadd\t32, r0, r2\n\tst.1.inc\tr1, r2, r3\n\tld.1\t128, r2\n\tst.1\tr3, r2\n\tadd\t64, r1, r3\n\tshl.s\t5, r2, r4\n\tadd\tr4, r3, r7\n\tsub!\tr2, r0, r4\n\tjump.ne\t@.BB0_65\n.BB0_70:\n\tsub\tr7, r1, r2\n\tadd\t@CPI0_0[0], r0, r3\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t96, r2, r2\n\tor\tr2, r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_1:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t3, r0, r1\n\tst.1\t224, r1\n\tadd\t@CPI0_1[0], r0, r2\n\tst.1\t256, r2\n\tadd\t224, r0, r2\n\tst.1\t128, r2\n\tst.1\t288, r1\n\tadd\t@CPI0_2[0], r0, r2\n\tst.1\t320, r2\n\tadd\t288, r0, r2\n\tst.1\t160, r2\n\tadd\t416, r0, r2\n\tst.1\t64, r2\n\tadd\t5, r0, r2\n\tst.1\t352, r2\n\tadd\t@CPI0_3[0], r0, r2\n\tst.1\t384, r2\n\tadd\t352, r0, r2\n\tst.1\t192, r2\n\tsload\tr0, r2\n\tsstore\tr0, r1\n\tsub.s!\t4, r2, r1\n\tjump.lt\t@.BB0_7\n\tadd\tr2, r0, stack-[7]\n\tst.1\t0, r0\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_4[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tadd\tstack-[7], r1, r3\n\tadd\t3, r1, r4\n\tsub!\tr4, r3, r1\n\tjump.ge\t@.BB0_7\n\tadd\tr3, r0, stack-[5]\n\tjump\t@.BB0_9\n.BB0_20:\n\tadd\tstack-[7], r0, r4\n\tsstore\tr4, r0\n\tadd\tstack-[5], r0, r3\n.BB0_14:\n\tsstore\tr1, r0\n.BB0_15:\n\tadd\t1, r4, r4\n\tsub!\tr4, r3, r1\n\tjump.ge\t@.BB0_7\n.BB0_9:\n\tsload\tr4, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r1\n\tand\t127, r1, r5\n\tadd.ne\tr1, r0, r5\n\tsub.s!\t31, r5, r1\n\tadd\t0, r0, r1\n\tadd.gt\t1, r0, r1\n\tsub!\tr2, r1, r1\n\tjump.ne\t@.BB0_10\n\tsub!\tr5, r0, r1\n\tjump.eq\t@.BB0_15\n\tsub.s!\t31, r5, r1\n\tadd\tr4, r0, r1\n\tjump.le\t@.BB0_14\n\tadd\tr5, r0, stack-[6]\n\tadd\tr4, r0, stack-[7]\n\tst.1\t0, r4\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_4[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tadd\tstack-[6], r0, r2\n\tadd\t31, r2, r2\n\tshr.s\t5, r2, r2\n\tadd\tr1, r2, r2\n\tadd\t1, r1, r3\n\tsub!\tr3, r2, r4\n\tjump.ge\t@.BB0_20\n.BB0_19:\n\tsstore\tr3, r0\n\tadd\t1, r3, r3\n\tsub!\tr3, r2, r4\n\tjump.lt\t@.BB0_19\n\tjump\t@.BB0_20\n.BB0_7:\n\tst.1\t0, r0\n\tadd\t@CPI0_0[0], r0, r3\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_4[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\t128, r0, r4\n\tld\tr1, r5\n\tadd\tr0, r0, r6\n\tjump\t@.BB0_21\n.BB0_38:\n\tshl.s\t1, r7, r1\n\tor\t1, r1, r1\n\tadd\tstack-[7], r0, r4\n\tadd\tstack-[6], r0, r5\n.BB0_30:\n\tsstore\tr5, r1\n\tsub.s!\t2, r6, r1\n\tadd\t1, r6, r6\n\tadd\t1, r5, r5\n\tjump.ge\t@.BB0_22\n.BB0_21:\n\tld.1.inc\tr4, r8, r4\n\tld.1.inc\tr8, r7, r9\n\tsub.s!\t@CPI0_5[0], r7, r1\n\tjump.gt\t@.BB0_23\n\tsload\tr5, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r2\n\tand\t127, r2, r3\n\tadd.ne\tr2, r0, r3\n\tsub.s!\t31, r3, r2\n\tadd\t0, r0, r2\n\tadd.gt\t1, r0, r2\n\txor\tr1, r2, r1\n\tand!\t1, r1, r1\n\tjump.ne\t@.BB0_10\n\tsub.s!\t32, r3, r1\n\tadd\tr4, r0, stack-[7]\n\tadd\tr5, r0, stack-[6]\n\tadd\tr6, r0, stack-[5]\n\tadd\tr7, r0, stack-[4]\n\tadd\tr8, r0, stack-[3]\n\tjump.lt\t@.BB0_28\n\tadd\tr3, r0, stack-[1]\n\tadd\tr9, r0, stack-[2]\n\tst.1\t0, r5\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_4[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[4], r0, r7\n\tadd\t31, r7, r2\n\tshr.s\t5, r2, r2\n\tsub.s!\t32, r7, r3\n\tadd.lt\tr0, r0, r2\n\tld\tr1, r3\n\tadd\tstack-[1], r0, r1\n\tadd\t31, r1, r1\n\tshr.s\t5, r1, r1\n\tadd\tr3, r1, r1\n\tadd\tr3, r2, r2\n\tsub!\tr2, r1, r3\n\tadd\tstack-[7], r0, r4\n\tadd\tstack-[6], r0, r5\n\tadd\tstack-[5], r0, r6\n\tadd\tstack-[2], r0, r9\n\tjump.ge\t@.BB0_28\n.BB0_29:\n\tsstore\tr2, r0\n\tadd\t1, r2, r2\n\tsub!\tr2, r1, r3\n\tjump.lt\t@.BB0_29\n.BB0_28:\n\tsub.s!\t31, r7, r1\n\tjump.le\t@.BB0_39\n\tst.1\t0, r5\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_4[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tsub.s\t32, r0, r2\n\tadd\tstack-[4], r0, r7\n\tand!\tr7, r2, r3\n\tld\tr1, r1\n\tadd\tstack-[5], r0, r6\n\tjump.eq\t@.BB0_33\n\tadd\t32, r0, r2\n\tadd\tr0, r0, r4\n\tadd\tstack-[3], r0, r8\n.BB0_35:\n\tadd\tr2, r8, r5\n\tld.1\tr5, r5\n\tsstore\tr1, r5\n\tadd\t32, r2, r2\n\tadd\t1, r1, r1\n\tadd\t32, r4, r4\n\tsub!\tr4, r3, r5\n\tjump.lt\t@.BB0_35\n\tsub!\tr3, r7, r3\n\tjump.ge\t@.BB0_38\n\tjump\t@.BB0_37\n.BB0_39:\n\tsub!\tr7, r0, r1\n\tjump.eq\t@.BB0_40\n\tld.1\tr9, r1\n\tjump\t@.BB0_42\n.BB0_40:\n\tadd\tr0, r0, r1\n.BB0_42:\n\tshl.s\t3, r7, r2\n\tsub.s\t1, r0, r3\n\tshr\tr3, r2, r2\n\txor\tr2, r3, r2\n\tand\tr1, r2, r1\n\tshl.s\t1, r7, r2\n\tor\tr1, r2, r1\n\tjump\t@.BB0_30\n.BB0_33:\n\tadd\t32, r0, r2\n\tadd\tstack-[3], r0, r8\n\tsub!\tr3, r7, r3\n\tjump.ge\t@.BB0_38\n.BB0_37:\n\tshl.s\t3, r7, r3\n\tand\t248, r3, r3\n\tsub.s\t1, r0, r4\n\tshr\tr4, r3, r3\n\txor\tr3, r4, r3\n\tadd\tr2, r8, r2\n\tld.1\tr2, r2\n\tand\tr2, r3, r2\n\tsstore\tr1, r2\n\tjump\t@.BB0_38\n.BB0_103:\n\tcontext.get_context_u128\tr2\n\tsub.s!\t36, r3, r3\n\tjump.lt\t@.BB0_2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tsload\tr0, r2\n\tsub!\tr1, r2, r2\n\tjump.ge\t@.BB0_2\n\tst.1\t0, r0\n\tadd\t@CPI0_10[0], r1, r1\n\tnear_call\tr0, @copy_array_from_storage_to_memory_string, @DEFAULT_UNWIND\n\tadd\t32, r0, r2\n\tld.1\t64, r3\n\tadd\tr3, r0, stack-[7]\n\tst.1.inc\tr3, r2, r2\n\tnear_call\tr0, @abi_encode_string, @DEFAULT_UNWIND\n\tadd\tstack-[7], r0, r4\n\tsub\tr1, r4, r1\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd.ge\tr2, r0, r4\n\tshl.s\t64, r4, r2\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_71:\n\tcontext.get_context_u128\tr2\n\tsub.s!\t36, r3, r4\n\tjump.lt\t@.BB0_2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r4\n\tsub.s!\t@CPI0_5[0], r4, r2\n\tjump.gt\t@.BB0_2\n\tadd\t35, r4, r2\n\tsub!\tr2, r3, r2\n\tjump.ge\t@.BB0_2\n\tadd\t4, r4, r5\n\tptr.add\tr1, r5, r2\n\tld\tr2, r2\n\tsub.s!\t@CPI0_5[0], r2, r6\n\tjump.gt\t@.BB0_23\n\tadd\t31, r2, r6\n\tsub.s\t32, r0, r8\n\tand\tr6, r8, r6\n\tadd\t63, r6, r6\n\tand\tr6, r8, r6\n\tsub.s!\t@CPI0_11[0], r6, r7\n\tjump.le\t@.BB0_77\n.BB0_23:\n\tadd\t@CPI0_13[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_14[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_22:\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_6[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_77:\n\tadd\t128, r6, r6\n\tst.1\t64, r6\n\tst.1\t128, r2\n\tadd\tr4, r2, r4\n\tadd\t36, r4, r4\n\tsub!\tr4, r3, r3\n\tjump.le\t@.BB0_78\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_65:\n\tadd\t160, r0, r4\n\tsub.s\t32, r0, r5\n\tadd\tr0, r0, r6\n\tjump\t@.BB0_66\n.BB0_69:\n\tadd\t31, r8, r9\n\tand\tr9, r5, r9\n\tadd\tr7, r8, r8\n\tst.1\tr8, r0\n\tadd\tr7, r9, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r2, r8\n\tjump.ge\t@.BB0_70\n.BB0_66:\n\tsub\tr7, r1, r8\n\tsub.s\t64, r8, r8\n\tst.1.inc\tr3, r8, r3\n\tld.1.inc\tr4, r8, r4\n\tld.1.inc\tr8, r8, r9\n\tst.1.inc\tr7, r8, r7\n\tsub!\tr8, r0, r10\n\tjump.eq\t@.BB0_69\n\tadd\tr0, r0, r10\n.BB0_68:\n\tadd\tr10, r7, r11\n\tadd\tr9, r10, r12\n\tld.1\tr12, r12\n\tst.1\tr11, r12\n\tadd\t32, r10, r10\n\tsub!\tr10, r8, r11\n\tjump.lt\t@.BB0_68\n\tjump\t@.BB0_69\n.BB0_78:\n\tadd\t32, r5, r3\n\tptr.add\tr1, r3, r1\n\tand\t31, r2, r3\n\tshr.s!\t5, r2, r4\n\tjump.eq\t@.BB0_107\n\tadd\tr0, r0, r5\n.BB0_80:\n\tshl.s\t5, r5, r6\n\tptr.add\tr1, r6, r7\n\tld\tr7, r7\n\tadd\t160, r6, r6\n\tst.1\tr6, r7\n\tadd\t1, r5, r5\n\tsub!\tr5, r4, r6\n\tjump.lt\t@.BB0_80\n.BB0_107:\n\tsub!\tr3, r0, r5\n\tjump.eq\t@.BB0_82\n\tshl.s\t5, r4, r4\n\tptr.add\tr1, r4, r1\n\tshl.s\t3, r3, r3\n\tadd\t160, r4, r4\n\tld.1\tr4, r5\n\tshl\tr5, r3, r5\n\tshr\tr5, r3, r5\n\tld\tr1, r1\n\tsub\t256, r3, r3\n\tshr\tr1, r3, r1\n\tshl\tr1, r3, r1\n\tor\tr1, r5, r1\n\tst.1\tr4, r1\n.BB0_82:\n\tadd\t160, r2, r1\n\tst.1\tr1, r0\n\tsload\tr0, r1\n\tsub.s!\t@CPI0_5[0], r1, r2\n\tjump.gt\t@.BB0_23\n\tadd\t1, r1, r2\n\tsstore\tr0, r2\n\tadd\t@CPI0_10[0], r1, r4\n\tst.1\t0, r0\n\tld.1\t128, r5\n\tsub.s!\t@CPI0_5[0], r5, r1\n\tjump.gt\t@.BB0_23\n\tsload\tr4, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r2\n\tand\t127, r2, r3\n\tadd.ne\tr2, r0, r3\n\tsub.s!\t31, r3, r2\n\tadd\t0, r0, r2\n\tadd.gt\t1, r0, r2\n\txor\tr1, r2, r1\n\tand!\t1, r1, r1\n\tjump.eq\t@.BB0_85\n.BB0_10:\n\tadd\t@CPI0_13[0], r0, r1\n\tst.1\t0, r1\n\tadd\t34, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_14[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_85:\n\tsub.s!\t32, r3, r1\n\tadd\tr8, r0, stack-[7]\n\tjump.lt\t@.BB0_88\n\tadd\tr3, r0, stack-[4]\n\tadd\tr5, r0, stack-[6]\n\tadd\tr4, r0, stack-[5]\n\tst.1\t0, r4\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_4[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[6], r0, r5\n\tadd\t31, r5, r2\n\tshr.s\t5, r2, r2\n\tsub.s!\t32, r5, r3\n\tadd.lt\tr0, r0, r2\n\tld\tr1, r3\n\tadd\tstack-[4], r0, r1\n\tadd\t31, r1, r1\n\tshr.s\t5, r1, r1\n\tadd\tr3, r1, r1\n\tadd\tr3, r2, r2\n\tsub!\tr2, r1, r3\n\tadd\tstack-[5], r0, r4\n\tjump.ge\t@.BB0_88\n.BB0_89:\n\tsstore\tr2, r0\n\tadd\t1, r2, r2\n\tsub!\tr2, r1, r3\n\tjump.lt\t@.BB0_89\n.BB0_88:\n\tsub.s!\t31, r5, r1\n\tjump.le\t@.BB0_100\n\tadd\tr5, r0, stack-[6]\n\tadd\tr4, r0, stack-[5]\n\tst.1\t0, r4\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_4[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tadd\tstack-[7], r0, r3\n\tjump.eq\t@.BB0_2\n\tand!\tstack-[6], r3, r2\n\tld\tr1, r1\n\tjump.ne\t@.BB0_94\n\tadd\t160, r0, r3\n\tjump\t@.BB0_97\n.BB0_100:\n\tsub!\tr5, r0, r1\n\tadd\tr0, r0, r1\n\tjump.eq\t@.BB0_102\n\tld.1\t160, r1\n.BB0_102:\n\tshl.s\t3, r5, r2\n\tsub.s\t1, r0, r3\n\tshr\tr3, r2, r2\n\txor\tr2, r3, r2\n\tand\tr1, r2, r2\n\tshl.s\t1, r5, r1\n\tjump\t@.BB0_90\n.BB0_94:\n\tadd\t32, r0, r4\n\tadd\tr0, r0, r3\n.BB0_95:\n\tadd\tr4, r0, r5\n\tadd\t128, r5, r4\n\tld.1\tr4, r4\n\tsstore\tr1, r4\n\tadd\t32, r5, r4\n\tadd\t1, r1, r1\n\tadd\t32, r3, r3\n\tsub!\tr3, r2, r6\n\tjump.lt\t@.BB0_95\n\tadd\t160, r5, r3\n.BB0_97:\n\tadd\tstack-[6], r0, r5\n\tsub!\tr2, r5, r2\n\tjump.ge\t@.BB0_99\n\tshl.s\t3, r5, r2\n\tand\t248, r2, r2\n\tsub.s\t1, r0, r4\n\tshr\tr4, r2, r2\n\txor\tr2, r4, r2\n\tld.1\tr3, r3\n\tand\tr3, r2, r2\n\tsstore\tr1, r2\n.BB0_99:\n\tadd\t1, r0, r1\n\tshl.s\t1, r5, r2\n\tadd\tstack-[5], r0, r4\n.BB0_90:\n\tor\tr2, r1, r1\n\tsstore\tr4, r1\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.func_end0:\n\nabi_encode_string:\n.func_begin1:\n\tld.1.inc\tr1, r3, r4\n\tst.1.inc\tr2, r3, r1\n\tsub!\tr3, r0, r2\n\tjump.eq\t@.BB1_3\n\tadd\tr0, r0, r2\n.BB1_2:\n\tadd\tr1, r2, r5\n\tadd\tr4, r2, r6\n\tld.1\tr6, r6\n\tst.1\tr5, r6\n\tadd\t32, r2, r2\n\tsub!\tr2, r3, r5\n\tjump.lt\t@.BB1_2\n.BB1_3:\n\tadd\tr1, r3, r2\n\tst.1\tr2, r0\n\tadd\t31, r3, r2\n\tsub.s\t32, r0, r3\n\tand\tr2, r3, r2\n\tadd\tr1, r2, r1\n\tret\n.func_end1:\n\ncopy_array_from_storage_to_memory_string:\n.func_begin2:\n\tnop\tstack+=[3]\n\tsload\tr1, r2\n\tand!\t1, r2, r3\n\tshr.s\t1, r2, r4\n\tand\t127, r4, r6\n\tadd.ne\tr4, r0, r6\n\tsub.s!\t31, r6, r4\n\tadd\t0, r0, r4\n\tadd.gt\t1, r0, r4\n\tsub!\tr3, r4, r4\n\tjump.ne\t@.BB2_1\n\tld.1\t64, r5\n\tst.1.inc\tr5, r6, r4\n\tsub!\tr3, r0, r3\n\tjump.eq\t@.BB2_8\n\tadd\tr4, r0, stack-[1]\n\tadd\tr6, r0, stack-[3]\n\tadd\tr5, r0, stack-[2]\n\tst.1\t0, r1\n\tadd\t@CPI2_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI2_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI2_1[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB2_10\n\tadd\tstack-[3], r0, r6\n\tsub!\tr6, r0, r2\n\tjump.eq\t@.BB2_12\n\tld\tr1, r2\n\tadd\tr0, r0, r1\n\tadd\tstack-[2], r0, r5\n\tadd\tstack-[1], r0, r7\n.BB2_14:\n\tadd\tr7, r1, r3\n\tsload\tr2, r4\n\tst.1\tr3, r4\n\tadd\t1, r2, r2\n\tadd\t32, r1, r1\n\tsub!\tr1, r6, r3\n\tjump.lt\t@.BB2_14\n\tjump\t@.BB2_4\n.BB2_8:\n\tsub.s\t256, r0, r1\n\tand\tr2, r1, r1\n\tst.1\tr4, r1\n\tsub!\tr6, r0, r1\n\tadd\t32, r0, r1\n\tadd.eq\t0, r0, r1\n\tjump\t@.BB2_4\n.BB2_12:\n\tadd\tr0, r0, r1\n\tadd\tstack-[2], r0, r5\n.BB2_4:\n\tadd\t63, r1, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r2\n\tadd\tr2, r5, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI2_2[0], r1, r3\n\tjump.gt\t@.BB2_6\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB2_6\n\tst.1\t64, r1\n\tadd\tr5, r0, r1\n\tret\n.BB2_1:\n\tadd\t@CPI2_3[0], r0, r1\n\tst.1\t0, r1\n\tadd\t34, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI2_4[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB2_6:\n\tadd\t@CPI2_3[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI2_4[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB2_10:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end2:\n\n__staticcall:\n.func_begin3:\n.tmp0:\n\tfar_call.static\tr1, r2, @.BB3_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB3_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end3:\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\nCPI2_0:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 44951156777603103434328014148080614096119502149053393678412182219895500439552\nCPI0_2:\n\t.cell 44975913341749041186633542617358601786417444276936568854985550194286268514304\nCPI0_3:\n\t.cell 55361298535492314021107612898590137610470821879050329936185219669955321004032\nCPI0_4:\nCPI2_1:\n\t.cell 904625697166532776746648320380374280103671757735618107014721178055227736064\nCPI0_5:\nCPI2_2:\n\t.cell 18446744073709551615\nCPI0_6:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_7:\n\t.cell 1701366481\nCPI0_8:\n\t.cell 1362739199\nCPI0_9:\n\t.cell 778358465\nCPI0_10:\n\t.cell 18569430475105882587588266137607568536673111973893317399460219858819262702947\nCPI0_11:\n\t.cell 18446744073709551487\nCPI0_12:\n\t.cell 57896044618658097711785492504343953926634992332820282019728792003956564819936\nCPI0_13:\nCPI2_3:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_14:\nCPI2_4:\n\t.cell 2852213850513516153367582212096\n","bytecode":{"object":""},"methodIdentifiers":{"addAnimal(string)":"5139bfff","listofanimals(uint256)":"6568cad1","retrieve()":"2e64cec1"}},"irOptimized":"/// @use-src 0:\"contracts/AnimalFactory.sol\"\nobject \"Animal_30\" {\n    code {\n        {\n            /// @src 0:280:628  \"contract Animal{...\"\n            let _1 := memoryguard(0x80)\n            if callvalue() { revert(0, 0) }\n            let newFreePtr := add(_1, 96)\n            let _2 := sub(shl(64, 1), 1)\n            if or(gt(newFreePtr, _2), lt(newFreePtr, _1))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:280:628  \"contract Animal{...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 0:280:628  \"contract Animal{...\" */ 0x24)\n            }\n            mstore(64, newFreePtr)\n            let memPtr := allocate_memory()\n            /// @src 0:380:401  \"[\\\"cat\\\",\\\"cow\\\",\\\"zebra\\\"]\"\n            let _3 := 3\n            /// @src 0:280:628  \"contract Animal{...\"\n            mstore(memPtr, /** @src 0:380:401  \"[\\\"cat\\\",\\\"cow\\\",\\\"zebra\\\"]\" */ _3)\n            /// @src 0:280:628  \"contract Animal{...\"\n            let _4 := 32\n            mstore(add(memPtr, _4), \"cat\")\n            mstore(_1, memPtr)\n            let memPtr_1 := allocate_memory()\n            mstore(memPtr_1, /** @src 0:380:401  \"[\\\"cat\\\",\\\"cow\\\",\\\"zebra\\\"]\" */ _3)\n            /// @src 0:280:628  \"contract Animal{...\"\n            mstore(add(memPtr_1, _4), \"cow\")\n            mstore(/** @src 0:380:401  \"[\\\"cat\\\",\\\"cow\\\",\\\"zebra\\\"]\" */ add(_1, /** @src 0:280:628  \"contract Animal{...\" */ _4), memPtr_1)\n            let memPtr_2 := allocate_memory()\n            let _5 := 5\n            mstore(memPtr_2, 5)\n            mstore(add(memPtr_2, _4), \"zebra\")\n            mstore(/** @src 0:380:401  \"[\\\"cat\\\",\\\"cow\\\",\\\"zebra\\\"]\" */ add(_1, /** @src 0:280:628  \"contract Animal{...\" */ 64), memPtr_2)\n            /// @src -1:-1:-1\n            let _6 := 0\n            /// @src 0:280:628  \"contract Animal{...\"\n            let oldLen := sload(/** @src -1:-1:-1 */ _6)\n            /// @src 0:280:628  \"contract Animal{...\"\n            sstore(/** @src -1:-1:-1 */ _6, /** @src 0:380:401  \"[\\\"cat\\\",\\\"cow\\\",\\\"zebra\\\"]\" */ _3)\n            /// @src 0:280:628  \"contract Animal{...\"\n            if lt(/** @src 0:380:401  \"[\\\"cat\\\",\\\"cow\\\",\\\"zebra\\\"]\" */ _3, /** @src 0:280:628  \"contract Animal{...\" */ oldLen)\n            {\n                mstore(/** @src -1:-1:-1 */ _6, _6)\n                /// @src 0:280:628  \"contract Animal{...\"\n                let data := keccak256(/** @src -1:-1:-1 */ _6, /** @src 0:280:628  \"contract Animal{...\" */ _4)\n                let _7 := add(data, oldLen)\n                let start := add(data, /** @src 0:380:401  \"[\\\"cat\\\",\\\"cow\\\",\\\"zebra\\\"]\" */ _3)\n                /// @src 0:280:628  \"contract Animal{...\"\n                for { } lt(start, _7) { start := add(start, 1) }\n                {\n                    let oldLen_1 := extract_byte_array_length(sload(start))\n                    if iszero(iszero(oldLen_1))\n                    {\n                        let _8 := 31\n                        switch gt(oldLen_1, _8)\n                        case 1 {\n                            mstore(/** @src -1:-1:-1 */ _6, /** @src 0:280:628  \"contract Animal{...\" */ start)\n                            let data_1 := keccak256(/** @src -1:-1:-1 */ _6, /** @src 0:280:628  \"contract Animal{...\" */ _4)\n                            clear_storage_range_bytes1(add(data_1, 1), add(data_1, shr(_5, add(oldLen_1, _8))))\n                            sstore(start, /** @src -1:-1:-1 */ _6)\n                            /// @src 0:280:628  \"contract Animal{...\"\n                            sstore(data_1, /** @src -1:-1:-1 */ _6)\n                        }\n                        default /// @src 0:280:628  \"contract Animal{...\"\n                        {\n                            sstore(start, /** @src -1:-1:-1 */ _6)\n                        }\n                    }\n                }\n            }\n            /// @src 0:280:628  \"contract Animal{...\"\n            let srcPtr := _1\n            mstore(/** @src -1:-1:-1 */ _6, _6)\n            /// @src 0:280:628  \"contract Animal{...\"\n            let elementSlot := keccak256(/** @src -1:-1:-1 */ _6, /** @src 0:280:628  \"contract Animal{...\" */ _4)\n            let i := /** @src -1:-1:-1 */ _6\n            /// @src 0:280:628  \"contract Animal{...\"\n            for { }\n            lt(i, /** @src 0:380:401  \"[\\\"cat\\\",\\\"cow\\\",\\\"zebra\\\"]\" */ _3)\n            /// @src 0:280:628  \"contract Animal{...\"\n            { i := add(i, 1) }\n            {\n                let _9 := mload(srcPtr)\n                let newLen := mload(_9)\n                if gt(newLen, _2)\n                {\n                    mstore(/** @src -1:-1:-1 */ _6, /** @src 0:280:628  \"contract Animal{...\" */ shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(/** @src -1:-1:-1 */ _6, /** @src 0:280:628  \"contract Animal{...\" */ 0x24)\n                }\n                let _10 := extract_byte_array_length(sload(elementSlot))\n                let _11 := 31\n                if gt(_10, _11)\n                {\n                    mstore(/** @src -1:-1:-1 */ _6, /** @src 0:280:628  \"contract Animal{...\" */ elementSlot)\n                    let data_2 := keccak256(/** @src -1:-1:-1 */ _6, /** @src 0:280:628  \"contract Animal{...\" */ _4)\n                    let deleteStart := add(data_2, shr(_5, add(newLen, _11)))\n                    if lt(newLen, _4) { deleteStart := data_2 }\n                    clear_storage_range_bytes1(deleteStart, add(data_2, shr(_5, add(_10, _11))))\n                }\n                let srcOffset := /** @src -1:-1:-1 */ _6\n                /// @src 0:280:628  \"contract Animal{...\"\n                srcOffset := _4\n                switch gt(newLen, _11)\n                case 1 {\n                    let loopEnd := and(newLen, not(31))\n                    mstore(/** @src -1:-1:-1 */ _6, /** @src 0:280:628  \"contract Animal{...\" */ elementSlot)\n                    let dstPtr := keccak256(/** @src -1:-1:-1 */ _6, /** @src 0:280:628  \"contract Animal{...\" */ _4)\n                    let i_1 := /** @src -1:-1:-1 */ _6\n                    /// @src 0:280:628  \"contract Animal{...\"\n                    for { } lt(i_1, loopEnd) { i_1 := add(i_1, _4) }\n                    {\n                        sstore(dstPtr, mload(add(_9, srcOffset)))\n                        dstPtr := add(dstPtr, 1)\n                        srcOffset := add(srcOffset, _4)\n                    }\n                    if lt(loopEnd, newLen)\n                    {\n                        let lastValue := mload(add(_9, srcOffset))\n                        sstore(dstPtr, and(lastValue, not(shr(and(shl(/** @src 0:380:401  \"[\\\"cat\\\",\\\"cow\\\",\\\"zebra\\\"]\" */ _3, /** @src 0:280:628  \"contract Animal{...\" */ newLen), 248), not(0)))))\n                    }\n                    let _12 := 1\n                    sstore(elementSlot, add(shl(_12, newLen), _12))\n                }\n                default {\n                    let value := /** @src -1:-1:-1 */ _6\n                    /// @src 0:280:628  \"contract Animal{...\"\n                    if newLen\n                    {\n                        value := mload(add(_9, srcOffset))\n                    }\n                    sstore(elementSlot, or(and(value, not(shr(shl(/** @src 0:380:401  \"[\\\"cat\\\",\\\"cow\\\",\\\"zebra\\\"]\" */ _3, /** @src 0:280:628  \"contract Animal{...\" */ newLen), not(0)))), shl(1, newLen)))\n                }\n                srcPtr := add(srcPtr, _4)\n                elementSlot := add(elementSlot, 1)\n            }\n            let _13 := mload(64)\n            let _14 := datasize(\"Animal_30_deployed\")\n            codecopy(_13, dataoffset(\"Animal_30_deployed\"), _14)\n            return(_13, _14)\n        }\n        function allocate_memory() -> memPtr\n        {\n            memPtr := mload(64)\n            let newFreePtr := add(memPtr, 64)\n            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr))\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(0, 0x24)\n            }\n            mstore(64, newFreePtr)\n        }\n        function extract_byte_array_length(data) -> length\n        {\n            length := shr(1, data)\n            let outOfPlaceEncoding := and(data, 1)\n            if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n            if eq(outOfPlaceEncoding, lt(length, 32))\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x22)\n                revert(0, 0x24)\n            }\n        }\n        function clear_storage_range_bytes1(start, end)\n        {\n            for { } lt(start, end) { start := add(start, 1) }\n            { sstore(start, 0) }\n        }\n    }\n    /// @use-src 0:\"contracts/AnimalFactory.sol\"\n    object \"Animal_30_deployed\" {\n        code {\n            {\n                /// @src 0:280:628  \"contract Animal{...\"\n                let _1 := memoryguard(0x80)\n                let _2 := 64\n                mstore(_2, _1)\n                let _3 := 4\n                if iszero(lt(calldatasize(), _3))\n                {\n                    let _4 := 0\n                    switch shr(224, calldataload(_4))\n                    case 0x2e64cec1 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let length := sload(_4)\n                        if gt(length, 0xffffffffffffffff)\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, 0x41)\n                            revert(_4, 0x24)\n                        }\n                        let _5 := 0x20\n                        finalize_allocation(_1, add(shl(5, length), _5))\n                        mstore(_1, length)\n                        let mpos := _1\n                        mpos := add(_1, _5)\n                        let mpos_1 := mpos\n                        mstore(_4, _4)\n                        let spos := 18569430475105882587588266137607568536673111973893317399460219858819262702947\n                        let i := _4\n                        for { } lt(i, length) { i := add(i, 1) }\n                        {\n                            mstore(mpos, copy_array_from_storage_to_memory_string(spos))\n                            mpos := add(mpos, _5)\n                            spos := add(spos, 1)\n                        }\n                        let memPos := mload(_2)\n                        let tail := add(memPos, _5)\n                        mstore(memPos, _5)\n                        let pos := tail\n                        let length_1 := mload(_1)\n                        mstore(tail, length_1)\n                        pos := add(memPos, _2)\n                        let tail_1 := add(add(memPos, shl(5, length_1)), _2)\n                        let srcPtr := mpos_1\n                        let i_1 := _4\n                        for { } lt(i_1, length_1) { i_1 := add(i_1, 1) }\n                        {\n                            mstore(pos, add(sub(tail_1, memPos), not(63)))\n                            tail_1 := abi_encode_string(mload(srcPtr), tail_1)\n                            srcPtr := add(srcPtr, _5)\n                            pos := add(pos, _5)\n                        }\n                        return(memPos, sub(tail_1, memPos))\n                    }\n                    case 0x5139bfff {\n                        if callvalue() { revert(_4, _4) }\n                        let _6 := 32\n                        if slt(add(calldatasize(), not(3)), _6) { revert(_4, _4) }\n                        let offset := calldataload(_3)\n                        let _7 := 0xffffffffffffffff\n                        if gt(offset, _7) { revert(_4, _4) }\n                        if iszero(slt(add(offset, 35), calldatasize())) { revert(_4, _4) }\n                        let _8 := calldataload(add(_3, offset))\n                        let _9 := 36\n                        if gt(_8, _7)\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, 0x41)\n                            revert(_4, _9)\n                        }\n                        let _10 := not(31)\n                        let memPtr := mload(_2)\n                        finalize_allocation(memPtr, add(and(add(_8, 0x1f), _10), _6))\n                        mstore(memPtr, _8)\n                        if gt(add(add(offset, _8), _9), calldatasize()) { revert(_4, _4) }\n                        calldatacopy(add(memPtr, _6), add(offset, _9), _8)\n                        mstore(add(add(memPtr, _8), _6), _4)\n                        let oldLen := sload(_4)\n                        if iszero(lt(oldLen, 18446744073709551616))\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, 0x41)\n                            revert(_4, _9)\n                        }\n                        let _11 := 1\n                        sstore(_4, add(oldLen, _11))\n                        let slot, offset_1 := storage_array_index_access_string__dyn(oldLen)\n                        if offset_1\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, _4)\n                            revert(_4, _9)\n                        }\n                        let newLen := mload(memPtr)\n                        if gt(newLen, _7)\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, 0x41)\n                            revert(_4, _9)\n                        }\n                        let _12 := extract_byte_array_length(sload(slot))\n                        if gt(_12, 0x1f)\n                        {\n                            mstore(_4, slot)\n                            let data := keccak256(_4, _6)\n                            let deleteStart := add(data, shr(5, add(newLen, 0x1f)))\n                            if lt(newLen, _6) { deleteStart := data }\n                            let _13 := add(data, shr(5, add(_12, 0x1f)))\n                            let start := deleteStart\n                            for { } lt(start, _13) { start := add(start, _11) }\n                            { sstore(start, _4) }\n                        }\n                        let srcOffset := _4\n                        srcOffset := _6\n                        switch gt(newLen, 0x1f)\n                        case 1 {\n                            let loopEnd := and(newLen, _10)\n                            mstore(_4, slot)\n                            let dstPtr := keccak256(_4, _6)\n                            let i_2 := _4\n                            for { } lt(i_2, loopEnd) { i_2 := add(i_2, _6) }\n                            {\n                                sstore(dstPtr, mload(add(memPtr, srcOffset)))\n                                dstPtr := add(dstPtr, _11)\n                                srcOffset := add(srcOffset, _6)\n                            }\n                            if lt(loopEnd, newLen)\n                            {\n                                let lastValue := mload(add(memPtr, srcOffset))\n                                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n                            }\n                            sstore(slot, add(shl(_11, newLen), _11))\n                        }\n                        default {\n                            let value := _4\n                            if newLen\n                            {\n                                value := mload(add(memPtr, srcOffset))\n                            }\n                            sstore(slot, or(and(value, not(shr(shl(3, newLen), not(0)))), shl(_11, newLen)))\n                        }\n                        return(_4, _4)\n                    }\n                    case 0x6568cad1 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                        let value_1 := calldataload(_3)\n                        /// @src 0:347:401  \"string[] public listofanimals =  [\\\"cat\\\",\\\"cow\\\",\\\"zebra\\\"]\"\n                        if iszero(lt(value_1, /** @src 0:280:628  \"contract Animal{...\" */ sload(_4)))\n                        /// @src 0:347:401  \"string[] public listofanimals =  [\\\"cat\\\",\\\"cow\\\",\\\"zebra\\\"]\"\n                        {\n                            revert(/** @src 0:280:628  \"contract Animal{...\" */ _4, _4)\n                        }\n                        /// @src 0:347:401  \"string[] public listofanimals =  [\\\"cat\\\",\\\"cow\\\",\\\"zebra\\\"]\"\n                        let slot_1, offset_2 := storage_array_index_access_string__dyn(value_1)\n                        /// @src 0:280:628  \"contract Animal{...\"\n                        if iszero(iszero(offset_2))\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, _4)\n                            revert(_4, 0x24)\n                        }\n                        let value_2 := copy_array_from_storage_to_memory_string(slot_1)\n                        let memPos_1 := mload(_2)\n                        mstore(memPos_1, 32)\n                        return(memPos_1, sub(abi_encode_string(value_2, add(memPos_1, 32)), memPos_1))\n                    }\n                }\n                revert(0, 0)\n            }\n            function abi_encode_string(value, pos) -> end\n            {\n                let length := mload(value)\n                mstore(pos, length)\n                let i := 0\n                for { } lt(i, length) { i := add(i, 0x20) }\n                {\n                    let _1 := 0x20\n                    mstore(add(add(pos, i), _1), mload(add(add(value, i), _1)))\n                }\n                mstore(add(add(pos, length), 0x20), 0)\n                end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            function storage_array_index_access_string__dyn(index) -> slot, offset\n            {\n                let _1 := 0\n                if iszero(lt(index, sload(_1)))\n                {\n                    mstore(_1, shl(224, 0x4e487b71))\n                    mstore(4, 0x32)\n                    revert(_1, 0x24)\n                }\n                mstore(_1, _1)\n                slot := add(18569430475105882587588266137607568536673111973893317399460219858819262702947, index)\n                offset := _1\n            }\n            function extract_byte_array_length(data) -> length\n            {\n                length := shr(1, data)\n                let outOfPlaceEncoding := and(data, 1)\n                if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                if eq(outOfPlaceEncoding, lt(length, 32))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x22)\n                    revert(0, 0x24)\n                }\n            }\n            function copy_array_from_storage_to_memory_string(slot) -> memPtr\n            {\n                memPtr := mload(64)\n                let ret := /** @src -1:-1:-1 */ 0\n                /// @src 0:280:628  \"contract Animal{...\"\n                let slotValue := sload(slot)\n                let length := extract_byte_array_length(slotValue)\n                mstore(memPtr, length)\n                let _1 := 0x20\n                let _2 := 1\n                switch and(slotValue, 1)\n                case 0 {\n                    mstore(add(memPtr, _1), and(slotValue, not(255)))\n                    ret := add(add(memPtr, shl(5, iszero(iszero(length)))), _1)\n                }\n                case 1 {\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 0:280:628  \"contract Animal{...\" */ slot)\n                    let dataPos := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:280:628  \"contract Animal{...\" */ _1)\n                    let i := /** @src -1:-1:-1 */ 0\n                    /// @src 0:280:628  \"contract Animal{...\"\n                    for { } lt(i, length) { i := add(i, _1) }\n                    {\n                        mstore(add(add(memPtr, i), _1), sload(dataPos))\n                        dataPos := add(dataPos, _2)\n                    }\n                    ret := add(add(memPtr, i), _1)\n                }\n                finalize_allocation(memPtr, sub(ret, memPtr))\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220aed7bfbe6f9578a653bf33c126afbd24905b29ab60071d1f180a40487ac2cb8b64736f6c63430008180033\"\n    }\n}\n","hash":"010000c7860f12ad9c09e0120eb6c4942dece3a1b081ec457ee0a623bb3570ba","factoryDependencies":{}},"AnimalFactory":{"abi":[{"inputs":[],"name":"Bird","outputs":[{"internalType":"contract Animal","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"Cow","outputs":[{"internalType":"contract Animal","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"createAnimalcontract","outputs":[],"stateMutability":"nonpayable","type":"function"}],"metadata":{"optimizer_settings":{"is_debug_logging_enabled":false,"is_fallback_to_size_enabled":false,"is_system_request_memoization_disabled":false,"is_verify_each_enabled":false,"jump_table_density_threshold":null,"level_back_end":"Aggressive","level_middle_end":"Aggressive","level_middle_end_size":"Zero"},"solc_metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"Bird\",\"outputs\":[{\"internalType\":\"contract Animal\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Cow\",\"outputs\":[{\"internalType\":\"contract Animal\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createAnimalcontract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AnimalFactory.sol\":\"AnimalFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOcmu\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/AnimalFactory.sol\":{\"keccak256\":\"0x7f9685b263e13e948c1a283fcc2d689dcae9d48efab40ee3bb5d225fb635c78e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://258d6dc8ce3261fa69b6483046421264ae933804106df8ff244ca9665ecc06fb\",\"dweb:/ipfs/QmRQwirjjaNsvPova6HAKM9RaD8EwZkVysyBPgRgst19ZV\"]}},\"version\":1}","solc_version":"0.8.24","solc_zkvm_edition":null,"zk_version":"1.4.1"},"evm":{"legacyAssembly":null,"assembly":"\t.text\n\t.file\t\"AnimalFactory.sol:AnimalFactory\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[1]\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r3, stack[@ptr_return_data]\n\tadd\t128, r0, r4\n\tst.1\t64, r4\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_1\n\tsub.s!\t4, r3, r2\n\tjump.lt\t@.BB0_2\n\tld\tr1, r1\n\tshr.s\t224, r1, r1\n\tsub.s!\t@CPI0_2[0], r1, r2\n\tjump.eq\t@.BB0_31\n\tsub.s!\t@CPI0_3[0], r1, r2\n\tjump.eq\t@.BB0_10\n\tsub.s!\t@CPI0_4[0], r1, r1\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t1, r0, r1\n\tsload\tr1, r1\n\tjump\t@.BB0_33\n.BB0_1:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_1[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_31:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tsload\tr0, r1\n.BB0_33:\n\tand\t@CPI0_5[0], r1, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_6[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_10:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t@CPI0_7[0], r0, r1\n\tst.1\t164, r1\n\tcontext.gas_left\tr1\n\tadd\t@CPI0_8[0], r0, r2\n\tst.1\t128, r2\n\tst.1\t132, r0\n\tadd\t96, r0, r2\n\tadd\tr2, r0, stack-[1]\n\tst.1\t196, r2\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_9[0], r1, r1\n\tst.1\t228, r0\n\tadd\t32774, r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_11\n\tadd\tstack-[1], r0, r4\n\tld\tr1, r1\n\tsub!\tr1, r0, r2\n\tjump.ne\t@.BB0_15\n\tptr.add\tstack[@ptr_return_data], r0, r1\n\tadd\tstack[@returndatasize], r0, r2\n\tjump\t@.BB0_16\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_11:\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tadd\tr1, r0, r2\n\tshr.s\t96, r2, r2\n\tand\t@CPI0_0[0], r2, stack[@returndatasize]\n\tand\t@CPI0_0[0], r2, r2\n.BB0_16:\n\tld.1\t64, r3\n\tand\t31, r2, r4\n\tshr.s!\t5, r2, r5\n\tjump.eq\t@.BB0_35\n\tadd\tr0, r0, r6\n.BB0_18:\n\tshl.s\t5, r6, r7\n\tadd\tr3, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_18\n.BB0_35:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_20\n.BB0_19:\n\tshl.s\t5, r5, r5\n\tptr.add\tr1, r5, r1\n\tadd\tr3, r5, r5\n\tshl.s\t3, r4, r4\n\tld.1\tr5, r6\n\tshl\tr6, r4, r6\n\tshr\tr6, r4, r6\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r6, r1\n\tst.1\tr5, r1\n.BB0_20:\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr1, r0, r3\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr1, r0, r2\n\tshl.s\t96, r2, r1\n\tshl.s\t64, r3, r2\n\tor\tr2, r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_15:\n\tand\t@CPI0_5[0], r1, r1\n\tsload\tr0, r2\n\tand\t@CPI0_10[0], r2, r2\n\tor\tr2, r1, r1\n\tsstore\tr0, r1\n\tld.1\t64, r1\n\tsub.s!\t@CPI0_11[0], r1, r2\n\tjump.le\t@.BB0_23\n\tadd\t@CPI0_13[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_14[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_23:\n\tadd\t36, r1, r2\n\tadd\t@CPI0_7[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t68, r1, r2\n\tcontext.gas_left\tr3\n\tst.1\tr2, r4\n\tadd\t@CPI0_8[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t100, r1, r2\n\tst.1\tr2, r0\n\tadd\t4, r1, r2\n\tst.1\tr2, r0\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr2, r0, r3\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r3, r2\n\tor\tr1, r2, r1\n\tor\t@CPI0_12[0], r1, r1\n\tadd\t32774, r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_22\n\tld\tr1, r1\n\tsub!\tr1, r0, r2\n\tjump.ne\t@.BB0_26\n\tptr.add\tstack[@ptr_return_data], r0, r1\n\tadd\tstack[@returndatasize], r0, r2\n\tjump\t@.BB0_27\n.BB0_22:\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tadd\tr1, r0, r2\n\tshr.s\t96, r2, r2\n\tand\t@CPI0_0[0], r2, stack[@returndatasize]\n\tand\t@CPI0_0[0], r2, r2\n.BB0_27:\n\tld.1\t64, r3\n\tand\t31, r2, r4\n\tshr.s!\t5, r2, r5\n\tjump.eq\t@.BB0_34\n\tadd\tr0, r0, r6\n.BB0_29:\n\tshl.s\t5, r6, r7\n\tadd\tr3, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_29\n.BB0_34:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_20\n\tjump\t@.BB0_19\n.BB0_26:\n\tand\t@CPI0_5[0], r1, r1\n\tadd\t1, r0, r2\n\tsload\tr2, r3\n\tand\t@CPI0_10[0], r3, r3\n\tor\tr3, r1, r1\n\tsstore\tr2, r1\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.func_end0:\n\n__farcall:\n.func_begin1:\n.tmp0:\n\tfar_call\tr1, r2, @.BB1_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB1_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end1:\n\n\t.data\n\t.p2align\t5, 0x0\nreturndatasize:\n\t.cell 0\n\n\t.p2align\t5, 0x0\nptr_return_data:\n.cell\t0\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_2:\n\t.cell 4281270164\nCPI0_3:\n\t.cell 4059191768\nCPI0_4:\n\t.cell 1571039973\nCPI0_5:\n\t.cell 1461501637330902918203684832716283019655932542975\nCPI0_6:\n\t.cell 2535301202817642044428229017600\nCPI0_7:\n\t.cell 452318227730700891676712456309936158960999546954514912163905672257824190650\nCPI0_8:\n\t.cell -45094662312588414058508742492242807367897819822786606328124609013070528553987\nCPI0_9:\n\t.cell 904625697166532776746648320380374280103671765658434360802338178844445376512\nCPI0_10:\n\t.cell -1461501637330902918203684832716283019655932542976\nCPI0_11:\n\t.cell 18446744073709551483\nCPI0_12:\n\t.cell 904625697166532776746648320380374280103671765658434358441154937409622769664\nCPI0_13:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_14:\n\t.cell 2852213850513516153367582212096\n","bytecode":{"object":"0002000000000002000100000000000200000000030100190000006003300270000000320330019700010000003103550000008004000039000000400040043f00000001022001900000001a0000c13d000000040230008c000000470000413d000000000101043b000000e001100270000000340210009c000000220000613d000000350210009c0000002a0000613d000000360110009c000000470000c13d0000000001000416000000000101004b000000470000c13d0000000101000039000000000101041a000000260000013d0000000001000416000000000101004b000000470000c13d0000002001000039000001000010044300000120000004430000003301000041000000c30001042e0000000001000416000000000101004b000000470000c13d000000000100041a0000003701100197000000800010043f0000003801000041000000c30001042e0000000001000416000000000101004b000000470000c13d0000003901000041000000a40010043f00000000010004140000003a02000041000000800020043f000000840000043f0000006002000039000100000002001d000000c40020043f0000003202000041000000320310009c0000000001028019000000c0011002100000003b011001c7000000e40000043f000080060200003900c200bd0000040f0000000102200190000000490000613d0000000104000029000000000101043b000000000201004b000000730000c13d000000010100036700000000020000310000004e0000013d0000000001000019000000c400010430000100000001035500000000020100190000006002200270000000320020019d0000003202200197000000400300043d0000001f0420018f00000005052002720000005b0000613d000000000600001900000005076002100000000008730019000000000771034f000000000707043b00000000007804350000000106600039000000000756004b000000530000413d000000000604004b0000006a0000613d0000000505500210000000000151034f00000000055300190000000304400210000000000605043300000000064601cf000000000646022f000000000101043b0000010004400089000000000141022f00000000014101cf000000000161019f00000000001504350000003201000041000000320430009c0000000003018019000000320420009c000000000201801900000060012002100000004002300210000000000112019f000000c4000104300000003701100197000000000200041a0000003c02200197000000000112019f000000000010041b000000400100043d0000003d0210009c000000810000a13d0000003f0100004100000000001004350000004101000039000000040010043f0000004001000041000000c4000104300000002402100039000000390300004100000000003204350000004402100039000000000300041400000000004204350000003a02000041000000000021043500000064021000390000000000020435000000040210003900000000000204350000003202000041000000320430009c0000000003028019000000320410009c00000000010280190000004001100210000000c002300210000000000121019f0000003e011001c7000080060200003900c200bd0000040f0000000102200190000000a00000613d000000000101043b000000000201004b000000b50000c13d00000001010003670000000002000031000000a50000013d000100000001035500000000020100190000006002200270000000320020019d0000003202200197000000400300043d0000001f0420018f0000000505200272000000b20000613d000000000600001900000005076002100000000008730019000000000771034f000000000707043b00000000007804350000000106600039000000000756004b000000aa0000413d000000000604004b0000006a0000613d0000005d0000013d00000037011001970000000102000039000000000302041a0000003c03300197000000000113019f000000000012041b0000000001000019000000c30001042e000000c0002104210000000102000039000000000001042d0000000002000019000000000001042d000000c200000432000000c30001042e000000c40001043000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffff000000020000000000000000000000000000004000000100000000000000000000000000000000000000000000000000000000000000000000000000ff2eff9400000000000000000000000000000000000000000000000000000000f1f259d8000000000000000000000000000000000000000000000000000000005da42ae5000000000000000000000000ffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000020000000800000000000000000010000c7860f12ad9c09e0120eb6c4942dece3a1b081ec457ee0a623bb3570ba9c4d535bdea7cd8a978f128b93471df48c7dbab89d703809115bdc118c235bfd0200000000000000000000000000000000000084000000800000000000000000ffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffff7b02000000000000000000000000000000000000840000000000000000000000004e487b710000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fefeaef663248c830789a9ad07c32b4c6af814749379068f349ddf0333ed3713"},"methodIdentifiers":{"Bird()":"5da42ae5","Cow()":"ff2eff94","createAnimalcontract()":"f1f259d8"}},"irOptimized":"/// @use-src 0:\"contracts/AnimalFactory.sol\"\nobject \"AnimalFactory_55\" {\n    code {\n        {\n            /// @src 0:632:899  \"contract AnimalFactory{...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            let _2 := datasize(\"AnimalFactory_55_deployed\")\n            codecopy(_1, dataoffset(\"AnimalFactory_55_deployed\"), _2)\n            return(_1, _2)\n        }\n    }\n    /// @use-src 0:\"contracts/AnimalFactory.sol\"\n    object \"AnimalFactory_55_deployed\" {\n        code {\n            {\n                /// @src 0:632:899  \"contract AnimalFactory{...\"\n                let _1 := memoryguard(0x80)\n                let _2 := 64\n                mstore(_2, _1)\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let _3 := 0\n                    switch shr(224, calldataload(_3))\n                    case 0x5da42ae5 {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                        mstore(_1, and(sload(/** @src 0:756:774  \"Animal public Bird\" */ 1), /** @src 0:632:899  \"contract AnimalFactory{...\" */ sub(shl(160, 1), 1)))\n                        return(_1, 32)\n                    }\n                    case 0xf1f259d8 {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                        /// @src 0:838:850  \"new Animal()\"\n                        let _4 := /** @src 0:632:899  \"contract AnimalFactory{...\" */ mload(_2)\n                        /// @src 0:838:850  \"new Animal()\"\n                        let _5 := datasize(\"Animal_30\")\n                        let _6 := add(_4, _5)\n                        let _7 := 0xffffffffffffffff\n                        if or(gt(_6, _7), lt(_6, _4))\n                        {\n                            /// @src 0:632:899  \"contract AnimalFactory{...\"\n                            mstore(_3, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(_3, 0x24)\n                        }\n                        /// @src 0:838:850  \"new Animal()\"\n                        let _8 := dataoffset(\"Animal_30\")\n                        datacopy(_4, _8, _5)\n                        let expr_address := create(/** @src 0:632:899  \"contract AnimalFactory{...\" */ _3, /** @src 0:838:850  \"new Animal()\" */ _4, sub(_6, _4))\n                        if iszero(expr_address)\n                        {\n                            /// @src 0:632:899  \"contract AnimalFactory{...\"\n                            let pos := mload(_2)\n                            returndatacopy(pos, _3, returndatasize())\n                            revert(pos, returndatasize())\n                        }\n                        let _9 := sub(shl(160, 1), 1)\n                        let _10 := shl(160, 0xffffffffffffffffffffffff)\n                        sstore(_3, or(and(sload(_3), _10), and(expr_address, _9)))\n                        /// @src 0:868:880  \"new Animal()\"\n                        let _11 := /** @src 0:632:899  \"contract AnimalFactory{...\" */ mload(_2)\n                        /// @src 0:868:880  \"new Animal()\"\n                        let _12 := add(_11, _5)\n                        if or(gt(_12, /** @src 0:838:850  \"new Animal()\" */ _7), /** @src 0:868:880  \"new Animal()\" */ lt(_12, _11))\n                        {\n                            /// @src 0:632:899  \"contract AnimalFactory{...\"\n                            mstore(_3, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(_3, 0x24)\n                        }\n                        /// @src 0:868:880  \"new Animal()\"\n                        datacopy(_11, _8, _5)\n                        let expr_address_1 := create(/** @src 0:632:899  \"contract AnimalFactory{...\" */ _3, /** @src 0:868:880  \"new Animal()\" */ _11, sub(_12, _11))\n                        if iszero(expr_address_1)\n                        {\n                            /// @src 0:632:899  \"contract AnimalFactory{...\"\n                            let pos_1 := mload(_2)\n                            returndatacopy(pos_1, _3, returndatasize())\n                            revert(pos_1, returndatasize())\n                        }\n                        sstore(/** @src 0:861:880  \"Bird = new Animal()\" */ 0x01, /** @src 0:632:899  \"contract AnimalFactory{...\" */ or(and(sload(/** @src 0:861:880  \"Bird = new Animal()\" */ 0x01), /** @src 0:632:899  \"contract AnimalFactory{...\" */ _10), and(expr_address_1, _9)))\n                        return(_3, _3)\n                    }\n                    case 0xff2eff94 {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                        let value := and(sload(_3), sub(shl(160, 1), 1))\n                        let memPos := mload(_2)\n                        mstore(memPos, value)\n                        return(memPos, 32)\n                    }\n                }\n                revert(0, 0)\n            }\n        }\n        /// @use-src 0:\"contracts/AnimalFactory.sol\"\n        object \"Animal_30\" {\n            code {\n                {\n                    /// @src 0:280:628  \"contract Animal{...\"\n                    let _1 := memoryguard(0x80)\n                    if callvalue() { revert(0, 0) }\n                    let newFreePtr := add(_1, 96)\n                    let _2 := sub(shl(64, 1), 1)\n                    if or(gt(newFreePtr, _2), lt(newFreePtr, _1))\n                    {\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 0:280:628  \"contract Animal{...\" */ shl(224, 0x4e487b71))\n                        mstore(4, 0x41)\n                        revert(/** @src -1:-1:-1 */ 0, /** @src 0:280:628  \"contract Animal{...\" */ 0x24)\n                    }\n                    mstore(64, newFreePtr)\n                    let memPtr := allocate_memory()\n                    /// @src 0:380:401  \"[\\\"cat\\\",\\\"cow\\\",\\\"zebra\\\"]\"\n                    let _3 := 3\n                    /// @src 0:280:628  \"contract Animal{...\"\n                    mstore(memPtr, /** @src 0:380:401  \"[\\\"cat\\\",\\\"cow\\\",\\\"zebra\\\"]\" */ _3)\n                    /// @src 0:280:628  \"contract Animal{...\"\n                    let _4 := 32\n                    mstore(add(memPtr, _4), \"cat\")\n                    mstore(_1, memPtr)\n                    let memPtr_1 := allocate_memory()\n                    mstore(memPtr_1, /** @src 0:380:401  \"[\\\"cat\\\",\\\"cow\\\",\\\"zebra\\\"]\" */ _3)\n                    /// @src 0:280:628  \"contract Animal{...\"\n                    mstore(add(memPtr_1, _4), \"cow\")\n                    mstore(/** @src 0:380:401  \"[\\\"cat\\\",\\\"cow\\\",\\\"zebra\\\"]\" */ add(_1, /** @src 0:280:628  \"contract Animal{...\" */ _4), memPtr_1)\n                    let memPtr_2 := allocate_memory()\n                    let _5 := 5\n                    mstore(memPtr_2, 5)\n                    mstore(add(memPtr_2, _4), \"zebra\")\n                    mstore(/** @src 0:380:401  \"[\\\"cat\\\",\\\"cow\\\",\\\"zebra\\\"]\" */ add(_1, /** @src 0:280:628  \"contract Animal{...\" */ 64), memPtr_2)\n                    /// @src -1:-1:-1\n                    let _6 := 0\n                    /// @src 0:280:628  \"contract Animal{...\"\n                    let oldLen := sload(/** @src -1:-1:-1 */ _6)\n                    /// @src 0:280:628  \"contract Animal{...\"\n                    sstore(/** @src -1:-1:-1 */ _6, /** @src 0:380:401  \"[\\\"cat\\\",\\\"cow\\\",\\\"zebra\\\"]\" */ _3)\n                    /// @src 0:280:628  \"contract Animal{...\"\n                    if lt(/** @src 0:380:401  \"[\\\"cat\\\",\\\"cow\\\",\\\"zebra\\\"]\" */ _3, /** @src 0:280:628  \"contract Animal{...\" */ oldLen)\n                    {\n                        mstore(/** @src -1:-1:-1 */ _6, _6)\n                        /// @src 0:280:628  \"contract Animal{...\"\n                        let data := keccak256(/** @src -1:-1:-1 */ _6, /** @src 0:280:628  \"contract Animal{...\" */ _4)\n                        let _7 := add(data, oldLen)\n                        let start := add(data, /** @src 0:380:401  \"[\\\"cat\\\",\\\"cow\\\",\\\"zebra\\\"]\" */ _3)\n                        /// @src 0:280:628  \"contract Animal{...\"\n                        for { } lt(start, _7) { start := add(start, 1) }\n                        {\n                            let oldLen_1 := extract_byte_array_length(sload(start))\n                            if iszero(iszero(oldLen_1))\n                            {\n                                let _8 := 31\n                                switch gt(oldLen_1, _8)\n                                case 1 {\n                                    mstore(/** @src -1:-1:-1 */ _6, /** @src 0:280:628  \"contract Animal{...\" */ start)\n                                    let data_1 := keccak256(/** @src -1:-1:-1 */ _6, /** @src 0:280:628  \"contract Animal{...\" */ _4)\n                                    clear_storage_range_bytes1(add(data_1, 1), add(data_1, shr(_5, add(oldLen_1, _8))))\n                                    sstore(start, /** @src -1:-1:-1 */ _6)\n                                    /// @src 0:280:628  \"contract Animal{...\"\n                                    sstore(data_1, /** @src -1:-1:-1 */ _6)\n                                }\n                                default /// @src 0:280:628  \"contract Animal{...\"\n                                {\n                                    sstore(start, /** @src -1:-1:-1 */ _6)\n                                }\n                            }\n                        }\n                    }\n                    /// @src 0:280:628  \"contract Animal{...\"\n                    let srcPtr := _1\n                    mstore(/** @src -1:-1:-1 */ _6, _6)\n                    /// @src 0:280:628  \"contract Animal{...\"\n                    let elementSlot := keccak256(/** @src -1:-1:-1 */ _6, /** @src 0:280:628  \"contract Animal{...\" */ _4)\n                    let i := /** @src -1:-1:-1 */ _6\n                    /// @src 0:280:628  \"contract Animal{...\"\n                    for { }\n                    lt(i, /** @src 0:380:401  \"[\\\"cat\\\",\\\"cow\\\",\\\"zebra\\\"]\" */ _3)\n                    /// @src 0:280:628  \"contract Animal{...\"\n                    { i := add(i, 1) }\n                    {\n                        let _9 := mload(srcPtr)\n                        let newLen := mload(_9)\n                        if gt(newLen, _2)\n                        {\n                            mstore(/** @src -1:-1:-1 */ _6, /** @src 0:280:628  \"contract Animal{...\" */ shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(/** @src -1:-1:-1 */ _6, /** @src 0:280:628  \"contract Animal{...\" */ 0x24)\n                        }\n                        let _10 := extract_byte_array_length(sload(elementSlot))\n                        let _11 := 31\n                        if gt(_10, _11)\n                        {\n                            mstore(/** @src -1:-1:-1 */ _6, /** @src 0:280:628  \"contract Animal{...\" */ elementSlot)\n                            let data_2 := keccak256(/** @src -1:-1:-1 */ _6, /** @src 0:280:628  \"contract Animal{...\" */ _4)\n                            let deleteStart := add(data_2, shr(_5, add(newLen, _11)))\n                            if lt(newLen, _4) { deleteStart := data_2 }\n                            clear_storage_range_bytes1(deleteStart, add(data_2, shr(_5, add(_10, _11))))\n                        }\n                        let srcOffset := /** @src -1:-1:-1 */ _6\n                        /// @src 0:280:628  \"contract Animal{...\"\n                        srcOffset := _4\n                        switch gt(newLen, _11)\n                        case 1 {\n                            let loopEnd := and(newLen, not(31))\n                            mstore(/** @src -1:-1:-1 */ _6, /** @src 0:280:628  \"contract Animal{...\" */ elementSlot)\n                            let dstPtr := keccak256(/** @src -1:-1:-1 */ _6, /** @src 0:280:628  \"contract Animal{...\" */ _4)\n                            let i_1 := /** @src -1:-1:-1 */ _6\n                            /// @src 0:280:628  \"contract Animal{...\"\n                            for { } lt(i_1, loopEnd) { i_1 := add(i_1, _4) }\n                            {\n                                sstore(dstPtr, mload(add(_9, srcOffset)))\n                                dstPtr := add(dstPtr, 1)\n                                srcOffset := add(srcOffset, _4)\n                            }\n                            if lt(loopEnd, newLen)\n                            {\n                                let lastValue := mload(add(_9, srcOffset))\n                                sstore(dstPtr, and(lastValue, not(shr(and(shl(/** @src 0:380:401  \"[\\\"cat\\\",\\\"cow\\\",\\\"zebra\\\"]\" */ _3, /** @src 0:280:628  \"contract Animal{...\" */ newLen), 248), not(0)))))\n                            }\n                            let _12 := 1\n                            sstore(elementSlot, add(shl(_12, newLen), _12))\n                        }\n                        default {\n                            let value := /** @src -1:-1:-1 */ _6\n                            /// @src 0:280:628  \"contract Animal{...\"\n                            if newLen\n                            {\n                                value := mload(add(_9, srcOffset))\n                            }\n                            sstore(elementSlot, or(and(value, not(shr(shl(/** @src 0:380:401  \"[\\\"cat\\\",\\\"cow\\\",\\\"zebra\\\"]\" */ _3, /** @src 0:280:628  \"contract Animal{...\" */ newLen), not(0)))), shl(1, newLen)))\n                        }\n                        srcPtr := add(srcPtr, _4)\n                        elementSlot := add(elementSlot, 1)\n                    }\n                    let _13 := mload(64)\n                    let _14 := datasize(\"Animal_30_deployed\")\n                    codecopy(_13, dataoffset(\"Animal_30_deployed\"), _14)\n                    return(_13, _14)\n                }\n                function allocate_memory() -> memPtr\n                {\n                    memPtr := mload(64)\n                    let newFreePtr := add(memPtr, 64)\n                    if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr))\n                    {\n                        mstore(0, shl(224, 0x4e487b71))\n                        mstore(4, 0x41)\n                        revert(0, 0x24)\n                    }\n                    mstore(64, newFreePtr)\n                }\n                function extract_byte_array_length(data) -> length\n                {\n                    length := shr(1, data)\n                    let outOfPlaceEncoding := and(data, 1)\n                    if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                    if eq(outOfPlaceEncoding, lt(length, 32))\n                    {\n                        mstore(0, shl(224, 0x4e487b71))\n                        mstore(4, 0x22)\n                        revert(0, 0x24)\n                    }\n                }\n                function clear_storage_range_bytes1(start, end)\n                {\n                    for { } lt(start, end) { start := add(start, 1) }\n                    { sstore(start, 0) }\n                }\n            }\n            /// @use-src 0:\"contracts/AnimalFactory.sol\"\n            object \"Animal_30_deployed\" {\n                code {\n                    {\n                        /// @src 0:280:628  \"contract Animal{...\"\n                        let _1 := memoryguard(0x80)\n                        let _2 := 64\n                        mstore(_2, _1)\n                        let _3 := 4\n                        if iszero(lt(calldatasize(), _3))\n                        {\n                            let _4 := 0\n                            switch shr(224, calldataload(_4))\n                            case 0x2e64cec1 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                let length := sload(_4)\n                                if gt(length, 0xffffffffffffffff)\n                                {\n                                    mstore(_4, shl(224, 0x4e487b71))\n                                    mstore(_3, 0x41)\n                                    revert(_4, 0x24)\n                                }\n                                let _5 := 0x20\n                                finalize_allocation(_1, add(shl(5, length), _5))\n                                mstore(_1, length)\n                                let mpos := _1\n                                mpos := add(_1, _5)\n                                let mpos_1 := mpos\n                                mstore(_4, _4)\n                                let spos := 18569430475105882587588266137607568536673111973893317399460219858819262702947\n                                let i := _4\n                                for { } lt(i, length) { i := add(i, 1) }\n                                {\n                                    mstore(mpos, copy_array_from_storage_to_memory_string(spos))\n                                    mpos := add(mpos, _5)\n                                    spos := add(spos, 1)\n                                }\n                                let memPos := mload(_2)\n                                let tail := add(memPos, _5)\n                                mstore(memPos, _5)\n                                let pos := tail\n                                let length_1 := mload(_1)\n                                mstore(tail, length_1)\n                                pos := add(memPos, _2)\n                                let tail_1 := add(add(memPos, shl(5, length_1)), _2)\n                                let srcPtr := mpos_1\n                                let i_1 := _4\n                                for { } lt(i_1, length_1) { i_1 := add(i_1, 1) }\n                                {\n                                    mstore(pos, add(sub(tail_1, memPos), not(63)))\n                                    tail_1 := abi_encode_string(mload(srcPtr), tail_1)\n                                    srcPtr := add(srcPtr, _5)\n                                    pos := add(pos, _5)\n                                }\n                                return(memPos, sub(tail_1, memPos))\n                            }\n                            case 0x5139bfff {\n                                if callvalue() { revert(_4, _4) }\n                                let _6 := 32\n                                if slt(add(calldatasize(), not(3)), _6) { revert(_4, _4) }\n                                let offset := calldataload(_3)\n                                let _7 := 0xffffffffffffffff\n                                if gt(offset, _7) { revert(_4, _4) }\n                                if iszero(slt(add(offset, 35), calldatasize())) { revert(_4, _4) }\n                                let _8 := calldataload(add(_3, offset))\n                                let _9 := 36\n                                if gt(_8, _7)\n                                {\n                                    mstore(_4, shl(224, 0x4e487b71))\n                                    mstore(_3, 0x41)\n                                    revert(_4, _9)\n                                }\n                                let _10 := not(31)\n                                let memPtr := mload(_2)\n                                finalize_allocation(memPtr, add(and(add(_8, 0x1f), _10), _6))\n                                mstore(memPtr, _8)\n                                if gt(add(add(offset, _8), _9), calldatasize()) { revert(_4, _4) }\n                                calldatacopy(add(memPtr, _6), add(offset, _9), _8)\n                                mstore(add(add(memPtr, _8), _6), _4)\n                                let oldLen := sload(_4)\n                                if iszero(lt(oldLen, 18446744073709551616))\n                                {\n                                    mstore(_4, shl(224, 0x4e487b71))\n                                    mstore(_3, 0x41)\n                                    revert(_4, _9)\n                                }\n                                let _11 := 1\n                                sstore(_4, add(oldLen, _11))\n                                let slot, offset_1 := storage_array_index_access_string__dyn(oldLen)\n                                if offset_1\n                                {\n                                    mstore(_4, shl(224, 0x4e487b71))\n                                    mstore(_3, _4)\n                                    revert(_4, _9)\n                                }\n                                let newLen := mload(memPtr)\n                                if gt(newLen, _7)\n                                {\n                                    mstore(_4, shl(224, 0x4e487b71))\n                                    mstore(_3, 0x41)\n                                    revert(_4, _9)\n                                }\n                                let _12 := extract_byte_array_length(sload(slot))\n                                if gt(_12, 0x1f)\n                                {\n                                    mstore(_4, slot)\n                                    let data := keccak256(_4, _6)\n                                    let deleteStart := add(data, shr(5, add(newLen, 0x1f)))\n                                    if lt(newLen, _6) { deleteStart := data }\n                                    let _13 := add(data, shr(5, add(_12, 0x1f)))\n                                    let start := deleteStart\n                                    for { } lt(start, _13) { start := add(start, _11) }\n                                    { sstore(start, _4) }\n                                }\n                                let srcOffset := _4\n                                srcOffset := _6\n                                switch gt(newLen, 0x1f)\n                                case 1 {\n                                    let loopEnd := and(newLen, _10)\n                                    mstore(_4, slot)\n                                    let dstPtr := keccak256(_4, _6)\n                                    let i_2 := _4\n                                    for { } lt(i_2, loopEnd) { i_2 := add(i_2, _6) }\n                                    {\n                                        sstore(dstPtr, mload(add(memPtr, srcOffset)))\n                                        dstPtr := add(dstPtr, _11)\n                                        srcOffset := add(srcOffset, _6)\n                                    }\n                                    if lt(loopEnd, newLen)\n                                    {\n                                        let lastValue := mload(add(memPtr, srcOffset))\n                                        sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n                                    }\n                                    sstore(slot, add(shl(_11, newLen), _11))\n                                }\n                                default {\n                                    let value := _4\n                                    if newLen\n                                    {\n                                        value := mload(add(memPtr, srcOffset))\n                                    }\n                                    sstore(slot, or(and(value, not(shr(shl(3, newLen), not(0)))), shl(_11, newLen)))\n                                }\n                                return(_4, _4)\n                            }\n                            case 0x6568cad1 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                                let value_1 := calldataload(_3)\n                                /// @src 0:347:401  \"string[] public listofanimals =  [\\\"cat\\\",\\\"cow\\\",\\\"zebra\\\"]\"\n                                if iszero(lt(value_1, /** @src 0:280:628  \"contract Animal{...\" */ sload(_4)))\n                                /// @src 0:347:401  \"string[] public listofanimals =  [\\\"cat\\\",\\\"cow\\\",\\\"zebra\\\"]\"\n                                {\n                                    revert(/** @src 0:280:628  \"contract Animal{...\" */ _4, _4)\n                                }\n                                /// @src 0:347:401  \"string[] public listofanimals =  [\\\"cat\\\",\\\"cow\\\",\\\"zebra\\\"]\"\n                                let slot_1, offset_2 := storage_array_index_access_string__dyn(value_1)\n                                /// @src 0:280:628  \"contract Animal{...\"\n                                if iszero(iszero(offset_2))\n                                {\n                                    mstore(_4, shl(224, 0x4e487b71))\n                                    mstore(_3, _4)\n                                    revert(_4, 0x24)\n                                }\n                                let value_2 := copy_array_from_storage_to_memory_string(slot_1)\n                                let memPos_1 := mload(_2)\n                                mstore(memPos_1, 32)\n                                return(memPos_1, sub(abi_encode_string(value_2, add(memPos_1, 32)), memPos_1))\n                            }\n                        }\n                        revert(0, 0)\n                    }\n                    function abi_encode_string(value, pos) -> end\n                    {\n                        let length := mload(value)\n                        mstore(pos, length)\n                        let i := 0\n                        for { } lt(i, length) { i := add(i, 0x20) }\n                        {\n                            let _1 := 0x20\n                            mstore(add(add(pos, i), _1), mload(add(add(value, i), _1)))\n                        }\n                        mstore(add(add(pos, length), 0x20), 0)\n                        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n                    }\n                    function finalize_allocation(memPtr, size)\n                    {\n                        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, 0x24)\n                        }\n                        mstore(64, newFreePtr)\n                    }\n                    function storage_array_index_access_string__dyn(index) -> slot, offset\n                    {\n                        let _1 := 0\n                        if iszero(lt(index, sload(_1)))\n                        {\n                            mstore(_1, shl(224, 0x4e487b71))\n                            mstore(4, 0x32)\n                            revert(_1, 0x24)\n                        }\n                        mstore(_1, _1)\n                        slot := add(18569430475105882587588266137607568536673111973893317399460219858819262702947, index)\n                        offset := _1\n                    }\n                    function extract_byte_array_length(data) -> length\n                    {\n                        length := shr(1, data)\n                        let outOfPlaceEncoding := and(data, 1)\n                        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                        if eq(outOfPlaceEncoding, lt(length, 32))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x22)\n                            revert(0, 0x24)\n                        }\n                    }\n                    function copy_array_from_storage_to_memory_string(slot) -> memPtr\n                    {\n                        memPtr := mload(64)\n                        let ret := /** @src -1:-1:-1 */ 0\n                        /// @src 0:280:628  \"contract Animal{...\"\n                        let slotValue := sload(slot)\n                        let length := extract_byte_array_length(slotValue)\n                        mstore(memPtr, length)\n                        let _1 := 0x20\n                        let _2 := 1\n                        switch and(slotValue, 1)\n                        case 0 {\n                            mstore(add(memPtr, _1), and(slotValue, not(255)))\n                            ret := add(add(memPtr, shl(5, iszero(iszero(length)))), _1)\n                        }\n                        case 1 {\n                            mstore(/** @src -1:-1:-1 */ 0, /** @src 0:280:628  \"contract Animal{...\" */ slot)\n                            let dataPos := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:280:628  \"contract Animal{...\" */ _1)\n                            let i := /** @src -1:-1:-1 */ 0\n                            /// @src 0:280:628  \"contract Animal{...\"\n                            for { } lt(i, length) { i := add(i, _1) }\n                            {\n                                mstore(add(add(memPtr, i), _1), sload(dataPos))\n                                dataPos := add(dataPos, _2)\n                            }\n                            ret := add(add(memPtr, i), _1)\n                        }\n                        finalize_allocation(memPtr, sub(ret, memPtr))\n                    }\n                }\n                data \".metadata\" hex\"a2646970667358221220aed7bfbe6f9578a653bf33c126afbd24905b29ab60071d1f180a40487ac2cb8b64736f6c63430008180033\"\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220bd441f2ee5df56243272c0336fedf5191ec4c402486f77245405182b634b88a264736f6c63430008180033\"\n    }\n}\n","hash":"010000438816fbcf11708422751cf0f24ca5ab94e87cfff0c1d2466e7662ce05","factoryDependencies":{"010000c7860f12ad9c09e0120eb6c4942dece3a1b081ec457ee0a623bb3570ba":"contracts/AnimalFactory.sol:Animal"}}},"contracts/array.sol":{"Array":{"abi":[{"inputs":[{"internalType":"string","name":"_name","type":"string"},{"internalType":"uint256","name":"_favoritenumber","type":"uint256"}],"name":"addperson","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"listofpeople","outputs":[{"internalType":"uint256","name":"favoritenumber","type":"uint256"},{"internalType":"string","name":"name","type":"string"}],"stateMutability":"view","type":"function"}],"metadata":{"optimizer_settings":{"is_debug_logging_enabled":false,"is_fallback_to_size_enabled":false,"is_system_request_memoization_disabled":false,"is_verify_each_enabled":false,"jump_table_density_threshold":null,"level_back_end":"Aggressive","level_middle_end":"Aggressive","level_middle_end_size":"Zero"},"solc_metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_favoritenumber\",\"type\":\"uint256\"}],\"name\":\"addperson\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listofpeople\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"favoritenumber\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/array.sol\":\"Array\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOcmu\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/array.sol\":{\"keccak256\":\"0x5fb4ee3ef06afa51184ac2affc90725922bc98922066bd6359bdcb79fa639a8e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cc72aff6a4fc7630bc707379aa4fb0bfff61f1ca56b236e449ac3588f3742174\",\"dweb:/ipfs/Qma1ip1uh7gjkz6WqhcbzHhKwKdV37LhtXemLJ5S2EtruP\"]}},\"version\":1}","solc_version":"0.8.24","solc_zkvm_edition":null,"zk_version":"1.4.1"},"evm":{"legacyAssembly":null,"assembly":"\t.text\n\t.file\t\"array.sol:Array\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[7]\n\tadd\t128, r0, r3\n\tst.1\t64, r3\n\tadd\tr1, r0, r4\n\tshr.s\t96, r4, r4\n\tand\t@CPI0_0[0], r4, r4\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_1\n\tsub.s!\t4, r4, r2\n\tjump.lt\t@.BB0_2\n\tld\tr1, r2\n\tshr.s\t224, r2, r2\n\tsub.s!\t@CPI0_2[0], r2, r5\n\tjump.eq\t@.BB0_28\n\tsub.s!\t@CPI0_3[0], r2, r2\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr2\n\tsub.s!\t36, r4, r3\n\tjump.lt\t@.BB0_2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tadd\t1, r0, r2\n\tsload\tr2, r3\n\tsub!\tr1, r3, r3\n\tjump.ge\t@.BB0_2\n\tst.1\t0, r2\n\tshl.s\t1, r1, r4\n\tadd\t@CPI0_8[0], r4, r1\n\tsload\tr1, r2\n\tand!\t1, r2, r3\n\tshr.s\t1, r2, r5\n\tand\t127, r5, r6\n\tadd.ne\tr5, r0, r6\n\tadd\t@CPI0_7[0], r4, r4\n\tsub.s!\t31, r6, r5\n\tadd\t0, r0, r5\n\tadd.gt\t1, r0, r5\n\tsub!\tr3, r5, r5\n\tjump.eq\t@.BB0_13\n.BB0_11:\n\tadd\t@CPI0_11[0], r0, r1\n\tst.1\t0, r1\n\tadd\t34, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_12[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_1:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_1[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_28:\n\tcontext.get_context_u128\tr2\n\tsub.s!\t68, r4, r5\n\tjump.lt\t@.BB0_2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r5\n\tsub.s!\t@CPI0_4[0], r5, r2\n\tjump.gt\t@.BB0_2\n\tadd\t35, r5, r2\n\tsub!\tr2, r4, r2\n\tjump.ge\t@.BB0_2\n\tadd\t4, r5, r6\n\tptr.add\tr1, r6, r2\n\tld\tr2, r2\n\tsub.s!\t@CPI0_4[0], r2, r7\n\tjump.gt\t@.BB0_16\n\tadd\t31, r2, r7\n\tsub.s\t32, r0, r10\n\tand\tr7, r10, r7\n\tadd\t63, r7, r7\n\tand\tr7, r10, r7\n\tsub.s!\t@CPI0_5[0], r7, r8\n\tjump.gt\t@.BB0_16\n\tadd\t128, r7, r7\n\tst.1\t64, r7\n\tst.1\t128, r2\n\tadd\tr5, r2, r5\n\tadd\t36, r5, r5\n\tsub!\tr5, r4, r4\n\tjump.gt\t@.BB0_2\n\tadd\t32, r6, r4\n\tptr.add\tr1, r4, r4\n\tand\t31, r2, r5\n\tshr.s!\t5, r2, r6\n\tjump.eq\t@.BB0_60\n\tadd\tr0, r0, r7\n.BB0_37:\n\tshl.s\t5, r7, r8\n\tptr.add\tr4, r8, r9\n\tld\tr9, r9\n\tadd\t160, r8, r8\n\tst.1\tr8, r9\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_37\n.BB0_60:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_39\n\tshl.s\t5, r6, r6\n\tptr.add\tr4, r6, r4\n\tshl.s\t3, r5, r5\n\tadd\t160, r6, r6\n\tld.1\tr6, r7\n\tshl\tr7, r5, r7\n\tshr\tr7, r5, r7\n\tld\tr4, r4\n\tsub\t256, r5, r5\n\tshr\tr4, r5, r4\n\tshl\tr4, r5, r4\n\tor\tr4, r7, r4\n\tst.1\tr6, r4\n.BB0_39:\n\tadd\t160, r2, r2\n\tst.1\tr2, r0\n\tld.1\t64, r2\n\tsub.s!\t@CPI0_6[0], r2, r4\n\tjump.gt\t@.BB0_16\n\tadd\t64, r2, r4\n\tst.1\t64, r4\n\tptr.add.s\t36, r1, r1\n\tld\tr1, r1\n\tst.1.inc\tr2, r1, r1\n\tst.1\tr1, r3\n\tadd\t1, r0, r5\n\tsload\tr5, r3\n\tsub.s!\t@CPI0_4[0], r3, r4\n\tjump.gt\t@.BB0_16\n\tadd\t1, r3, r4\n\tsstore\tr5, r4\n\tst.1\t0, r5\n\tld.1\tr2, r2\n\tshl.s\t1, r3, r3\n\tadd\t@CPI0_7[0], r3, r4\n\tsstore\tr4, r2\n\tadd\t@CPI0_8[0], r3, r4\n\tld.1\tr1, r3\n\tld.1.inc\tr3, r6, r7\n\tsub.s!\t@CPI0_4[0], r6, r1\n\tjump.gt\t@.BB0_16\n\tsload\tr4, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r2\n\tand\t127, r2, r8\n\tadd.ne\tr2, r0, r8\n\tsub.s!\t31, r8, r2\n\tadd\t0, r0, r2\n\tadd.gt\t1, r0, r2\n\txor\tr1, r2, r1\n\tand!\t1, r1, r1\n\tjump.ne\t@.BB0_11\n\tadd\tr7, r0, stack-[1]\n\tadd\tr3, r0, stack-[3]\n\tadd\tr5, r0, stack-[2]\n\tadd\tr8, r0, stack-[4]\n\tsub.s!\t32, r8, r1\n\tadd\tr10, r0, stack-[6]\n\tadd\tr4, r0, stack-[5]\n\tadd\tr6, r0, stack-[7]\n\tjump.lt\t@.BB0_46\n\tst.1\t0, r4\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_9[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[7], r0, r6\n\tadd\t31, r6, r2\n\tshr.s\t5, r2, r2\n\tsub.s!\t32, r6, r3\n\tadd.lt\tr0, r0, r2\n\tld\tr1, r3\n\tadd\tstack-[4], r0, r1\n\tadd\t31, r1, r1\n\tshr.s\t5, r1, r1\n\tadd\tr3, r1, r1\n\tadd\tr3, r2, r2\n\tsub!\tr2, r1, r3\n\tadd\tstack-[5], r0, r4\n\tjump.ge\t@.BB0_46\n.BB0_47:\n\tsstore\tr2, r0\n\tadd\t1, r2, r2\n\tsub!\tr2, r1, r3\n\tjump.lt\t@.BB0_47\n.BB0_46:\n\tsub.s!\t31, r6, r1\n\tjump.le\t@.BB0_57\n\tst.1\t0, r4\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_9[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tadd\tstack-[6], r0, r2\n\tjump.eq\t@.BB0_2\n\tand!\tstack-[7], r2, r3\n\tld\tr1, r1\n\tjump.ne\t@.BB0_52\n\tadd\t32, r0, r2\n\tjump\t@.BB0_54\n.BB0_13:\n\tsload\tr4, r4\n\tst.1\t128, r6\n\tsub!\tr3, r0, r3\n\tjump.eq\t@.BB0_19\n\tadd\tr6, r0, stack-[7]\n\tadd\tr4, r0, stack-[6]\n\tst.1\t0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_9[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[7], r0, r5\n\tsub!\tr5, r0, r2\n\tjump.ne\t@.BB0_23\n\tadd\t32, r0, r3\n\tadd\t160, r0, r1\n\tadd\tstack-[6], r0, r4\n\tjump\t@.BB0_17\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_19:\n\tsub.s\t256, r0, r1\n\tand\tr2, r1, r1\n\tst.1\t160, r1\n\tsub!\tr6, r0, r1\n\tadd\t192, r0, r1\n\tadd.eq\t160, r0, r1\n.BB0_14:\n\tsub.s\t97, r1, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r3\n\tsub.s!\t@CPI0_10[0], r3, r1\n\tjump.lt\t@.BB0_15\n.BB0_16:\n\tadd\t@CPI0_11[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_12[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_15:\n\tadd\t128, r3, r1\n.BB0_17:\n\tst.1\t64, r1\n\tst.1\tr1, r4\n\tadd\t160, r3, r2\n\tadd\t64, r0, r4\n\tst.1\tr2, r4\n\tadd\t192, r3, r4\n\tld.1\t128, r2\n\tst.1\tr4, r2\n\tadd\t224, r3, r3\n\tsub!\tr2, r0, r4\n\tjump.eq\t@.BB0_27\n\tadd\tr0, r0, r4\n.BB0_26:\n\tadd\tr4, r3, r5\n\tadd\t160, r4, r6\n\tld.1\tr6, r6\n\tst.1\tr5, r6\n\tadd\t32, r4, r4\n\tsub!\tr4, r2, r5\n\tjump.lt\t@.BB0_26\n.BB0_27:\n\tadd\t31, r2, r4\n\tsub.s\t32, r0, r5\n\tand\tr4, r5, r4\n\tadd\tr2, r3, r2\n\tst.1\tr2, r0\n\tadd\t96, r4, r2\n\tadd\t@CPI0_0[0], r0, r3\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t96, r2, r2\n\tor\tr2, r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_23:\n\tld\tr1, r1\n\tadd\tr0, r0, r3\n.BB0_24:\n\tadd\tr3, r0, r2\n\tsload\tr1, r3\n\tadd\t160, r2, r4\n\tst.1\tr4, r3\n\tadd\t1, r1, r1\n\tadd\t32, r2, r3\n\tsub!\tr3, r5, r4\n\tjump.lt\t@.BB0_24\n\tadd\t192, r2, r1\n\tadd\tstack-[6], r0, r4\n\tjump\t@.BB0_14\n.BB0_57:\n\tsub!\tstack-[7], r0, r1\n\tadd\tr0, r0, r1\n\tjump.eq\t@.BB0_59\n\tadd\tstack-[1], r0, r1\n\tld.1\tr1, r1\n.BB0_59:\n\tadd\tstack-[7], r0, r4\n\tshl.s\t3, r4, r2\n\tsub.s\t1, r0, r3\n\tshr\tr3, r2, r2\n\txor\tr2, r3, r2\n\tand\tr1, r2, r1\n\tshl.s\t1, r4, r2\n\tjump\t@.BB0_48\n.BB0_52:\n\tadd\t32, r0, r2\n\tadd\tr0, r0, r4\n\tadd\tstack-[3], r0, r6\n.BB0_53:\n\tadd\tr2, r6, r5\n\tld.1\tr5, r5\n\tsstore\tr1, r5\n\tadd\t32, r2, r2\n\tadd\t1, r1, r1\n\tadd\t32, r4, r4\n\tsub!\tr4, r3, r5\n\tjump.lt\t@.BB0_53\n.BB0_54:\n\tsub.s!\tstack-[7], r3, r3\n\tjump.ge\t@.BB0_56\n\tadd\tstack-[7], r0, r3\n\tshl.s\t3, r3, r3\n\tand\t248, r3, r3\n\tsub.s\t1, r0, r4\n\tshr\tr4, r3, r3\n\txor\tr3, r4, r3\n\tadd\tstack-[3], r2, r2\n\tld.1\tr2, r2\n\tand\tr2, r3, r2\n\tsstore\tr1, r2\n.BB0_56:\n\tadd\tstack-[7], r0, r1\n\tshl.s\t1, r1, r1\n\tadd\tstack-[2], r0, r2\n.BB0_48:\n\tor\tr1, r2, r1\n\tadd\tstack-[5], r0, r2\n\tsstore\tr2, r1\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.func_end0:\n\n__staticcall:\n.func_begin1:\n.tmp0:\n\tfar_call.static\tr1, r2, @.BB1_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB1_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end1:\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_2:\n\t.cell 3786612778\nCPI0_3:\n\t.cell 3205602267\nCPI0_4:\n\t.cell 18446744073709551615\nCPI0_5:\n\t.cell 18446744073709551487\nCPI0_6:\n\t.cell 18446744073709551551\nCPI0_7:\n\t.cell -35707666377435648211887908874984608119992236509074197713628505308453184860938\nCPI0_8:\n\t.cell -35707666377435648211887908874984608119992236509074197713628505308453184860937\nCPI0_9:\n\t.cell 904625697166532776746648320380374280103671757735618107014721178055227736064\nCPI0_10:\n\t.cell 18446744073709551488\nCPI0_11:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_12:\n\t.cell 2852213850513516153367582212096\n","bytecode":{"object":"00070000000000020000008003000039000000400030043f00000000040100190000006004400270000000590440019700000001022001900000002f0000c13d000000040240008c000000ea0000413d000000000201043b000000e0022002700000005b0520009c000000370000613d0000005c0220009c000000ea0000c13d0000000002000416000000240340008c000000ea0000413d000000000202004b000000ea0000c13d0000000401100370000000000101043b0000000102000039000000000302041a000000000331004b000000ea0000813d000000000020043500000001041002100000006101400041000000000201041a000000010320019000000001052002700000007f0650018f000000000605c01900000060044000410000001f0560008c00000000050000190000000105002039000000000553004b000000d20000613d000000640100004100000000001004350000002201000039000000040010043f000000650100004100000160000104300000000001000416000000000101004b000000ea0000c13d0000002001000039000001000010044300000120000004430000005a010000410000015f0001042e0000000002000416000000440540008c000000ea0000413d000000000202004b000000ea0000c13d0000000402100370000000000502043b0000005d0250009c000000ea0000213d0000002302500039000000000242004b000000ea0000813d0000000406500039000000000261034f000000000202043b0000005d0720009c000000f70000213d0000001f07200039000000200a00008a0000000007a7016f0000003f077000390000000007a7016f0000005e0870009c000000f70000213d0000008007700039000000400070043f000000800020043f00000000052500190000002405500039000000000445004b000000ea0000213d0000002004600039000000000441034f0000001f0520018f0000000506200272000000640000613d00000000070000190000000508700210000000000984034f000000000909043b000000a00880003900000000009804350000000107700039000000000867004b0000005c0000413d000000000705004b000000730000613d0000000506600210000000000464034f0000000305500210000000a006600039000000000706043300000000075701cf000000000757022f000000000404043b0000010005500089000000000454022f00000000045401cf000000000474019f0000000000460435000000a0022000390000000000020435000000400200043d0000005f0420009c000000f70000213d0000004004200039000000400040043f0000002401100370000000000101043b000000000112043600000000003104350000000105000039000000000305041a0000005d0430009c000000f70000213d0000000104300039000000000045041b0000000000500435000000000202043300000001033002100000006004300041000000000024041b0000006104300041000000000301043300000000760304340000005d0160009c000000f70000213d000000000104041a000000010210019000000001021002700000007f0820018f000000000802c0190000001f0280008c00000000020000190000000102002039000000000121013f0000000101100190000000290000c13d000100000007001d000300000003001d000200000005001d000400000008001d000000200180008c00060000000a001d000500000004001d000700000006001d000000bf0000413d000000000040043500000059010000410000000002000414000000590320009c0000000002018019000000c00120021000000062011001c70000801002000039015e01590000040f0000000102200190000000ea0000613d00000007060000290000001f026000390000000502200270000000200360008c0000000002004019000000000301043b00000004010000290000001f01100039000000050110027000000000011300190000000002230019000000000312004b0000000504000029000000bf0000813d000000000002041b0000000102200039000000000312004b000000bb0000413d0000001f0160008c0000012d0000a13d000000000040043500000059010000410000000002000414000000590320009c0000000002018019000000c00120021000000062011001c70000801002000039015e01590000040f00000001022001900000000602000029000000ea0000613d0000000703200180000000000101043b0000013a0000c13d0000002002000039000001450000013d000000000404041a000000800060043f000000000303004b000000ec0000613d000700000006001d000600000004001d000000000010043500000059010000410000000002000414000000590320009c0000000002018019000000c00120021000000062011001c70000801002000039015e01590000040f0000000102200190000000ea0000613d0000000705000029000000000205004b000001200000c13d0000002003000039000000a0010000390000000604000029000000fe0000013d00000000010000190000016000010430000001000100008a000000000112016f000000a00010043f000000000106004b000000c001000039000000a001006039000000610110008a000000200200008a000000000321016f000000630130009c000000fd0000413d000000640100004100000000001004350000004101000039000000040010043f000000650100004100000160000104300000008001300039000000400010043f0000000000410435000000a00230003900000040040000390000000000420435000000c004300039000000800200043d0000000000240435000000e003300039000000000402004b000001110000613d00000000040000190000000005340019000000a006400039000000000606043300000000006504350000002004400039000000000524004b0000010a0000413d0000001f04200039000000200500008a000000000454016f0000000002320019000000000002043500000060024000390000005903000041000000590420009c0000000002038019000000590410009c000000000103801900000040011002100000006002200210000000000112019f0000015f0001042e000000000101043b00000000030000190000000002030019000000000301041a000000a004200039000000000034043500000001011000390000002003200039000000000453004b000001220000413d000000c0012000390000000604000029000000f20000013d000000070100006b0000000001000019000001320000613d0000000101000029000000000101043300000007040000290000000302400210000000010300008a000000000223022f000000000232013f000000000121016f0000000102400210000001540000013d00000020020000390000000004000019000000030600002900000000056200190000000005050433000000000051041b000000200220003900000001011000390000002004400039000000000534004b0000013d0000413d000000070330006c000001510000813d00000007030000290000000303300210000000f80330018f000000010400008a000000000334022f000000000343013f00000003022000290000000002020433000000000232016f000000000021041b000000070100002900000001011002100000000202000029000000000121019f0000000502000029000000000012041b00000000010000190000015f0001042e0000015c002104230000000102000039000000000001042d0000000002000019000000000001042d0000015e000004320000015f0001042e000001600001043000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffff000000020000000000000000000000000000004000000100000000000000000000000000000000000000000000000000000000000000000000000000e1b3202a00000000000000000000000000000000000000000000000000000000bf119bdb000000000000000000000000000000000000000000000000ffffffffffffffff000000000000000000000000000000000000000000000000ffffffffffffff7f000000000000000000000000000000000000000000000000ffffffffffffffbfb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6b10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf70200000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffff804e487b710000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000240000000000000000000000000b26932dff1805665250fee0dd1b36c0f7b44806d192b96692d07c0eaae2bcfe"},"methodIdentifiers":{"addperson(string,uint256)":"e1b3202a","listofpeople(uint256)":"bf119bdb"}},"irOptimized":"/// @use-src 1:\"contracts/array.sol\"\nobject \"Array_86\" {\n    code {\n        {\n            /// @src 1:60:700  \"contract Array{...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            let _2 := datasize(\"Array_86_deployed\")\n            codecopy(_1, dataoffset(\"Array_86_deployed\"), _2)\n            return(_1, _2)\n        }\n    }\n    /// @use-src 1:\"contracts/array.sol\"\n    object \"Array_86_deployed\" {\n        code {\n            {\n                /// @src 1:60:700  \"contract Array{...\"\n                let _1 := 64\n                mstore(_1, memoryguard(0x80))\n                let _2 := 4\n                if iszero(lt(calldatasize(), _2))\n                {\n                    let _3 := 0\n                    switch shr(224, calldataload(_3))\n                    case 0xbf119bdb {\n                        if callvalue() { revert(_3, _3) }\n                        let _4 := 32\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_3, _3) }\n                        let value := calldataload(_2)\n                        let _5 := 1\n                        /// @src 1:515:543  \"person[] public listofpeople\"\n                        if iszero(lt(value, /** @src 1:60:700  \"contract Array{...\" */ sload(1)))\n                        /// @src 1:515:543  \"person[] public listofpeople\"\n                        {\n                            revert(/** @src 1:60:700  \"contract Array{...\" */ _3, _3)\n                        }\n                        /// @src 1:515:543  \"person[] public listofpeople\"\n                        let slot, offset := storage_array_index_access_struct_person__dyn(value)\n                        /// @src 1:60:700  \"contract Array{...\"\n                        let _6 := sload(/** @src 1:515:543  \"person[] public listofpeople\" */ slot)\n                        let _7 := add(slot, /** @src 1:60:700  \"contract Array{...\" */ 1)\n                        let memPtr := mload(_1)\n                        let ret := _3\n                        let slotValue := sload(_7)\n                        let length := extract_byte_array_length(slotValue)\n                        mstore(memPtr, length)\n                        switch and(slotValue, 1)\n                        case 0 {\n                            mstore(add(memPtr, _4), and(slotValue, not(255)))\n                            ret := add(add(memPtr, shl(5, iszero(iszero(length)))), _4)\n                        }\n                        case 1 {\n                            mstore(_3, _7)\n                            let dataPos := keccak256(_3, _4)\n                            let i := _3\n                            for { } lt(i, length) { i := add(i, _4) }\n                            {\n                                mstore(add(add(memPtr, i), _4), sload(dataPos))\n                                dataPos := add(dataPos, _5)\n                            }\n                            ret := add(add(memPtr, i), _4)\n                        }\n                        finalize_allocation(memPtr, sub(ret, memPtr))\n                        let memPos := mload(_1)\n                        mstore(memPos, _6)\n                        mstore(add(memPos, _4), _1)\n                        let length_1 := mload(memPtr)\n                        mstore(add(memPos, _1), length_1)\n                        let i_1 := _3\n                        for { } lt(i_1, length_1) { i_1 := add(i_1, _4) }\n                        {\n                            mstore(add(add(memPos, i_1), 96), mload(add(add(memPtr, i_1), _4)))\n                        }\n                        mstore(add(add(memPos, length_1), 96), _3)\n                        return(memPos, add(sub(add(memPos, and(add(length_1, 31), not(31))), memPos), 96))\n                    }\n                    case 0xe1b3202a {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), _1) { revert(_3, _3) }\n                        let offset_1 := calldataload(_2)\n                        let _8 := 0xffffffffffffffff\n                        if gt(offset_1, _8) { revert(_3, _3) }\n                        if iszero(slt(add(offset_1, 35), calldatasize())) { revert(_3, _3) }\n                        let _9 := calldataload(add(_2, offset_1))\n                        let _10 := 36\n                        if gt(_9, _8)\n                        {\n                            mstore(_3, shl(224, 0x4e487b71))\n                            mstore(_2, 0x41)\n                            revert(_3, _10)\n                        }\n                        let _11 := 0x20\n                        let _12 := not(31)\n                        let memPtr_1 := mload(_1)\n                        finalize_allocation(memPtr_1, add(and(add(_9, 0x1f), _12), _11))\n                        mstore(memPtr_1, _9)\n                        if gt(add(add(offset_1, _9), _10), calldatasize()) { revert(_3, _3) }\n                        calldatacopy(add(memPtr_1, _11), add(offset_1, _10), _9)\n                        mstore(add(add(memPtr_1, _9), _11), _3)\n                        let memPtr_2 := mload(_1)\n                        let newFreePtr := add(memPtr_2, _1)\n                        if or(gt(newFreePtr, _8), lt(newFreePtr, memPtr_2))\n                        {\n                            mstore(_3, shl(224, 0x4e487b71))\n                            mstore(_2, 0x41)\n                            revert(_3, _10)\n                        }\n                        mstore(_1, newFreePtr)\n                        mstore(memPtr_2, calldataload(_10))\n                        /// @src 1:659:688  \"person(_favoritenumber,_name)\"\n                        let _13 := add(memPtr_2, /** @src 1:60:700  \"contract Array{...\" */ _11)\n                        mstore(_13, memPtr_1)\n                        let _14 := 1\n                        let oldLen := sload(_14)\n                        if iszero(lt(oldLen, 18446744073709551616))\n                        {\n                            mstore(_3, shl(224, 0x4e487b71))\n                            mstore(_2, 0x41)\n                            revert(_3, _10)\n                        }\n                        sstore(_14, add(oldLen, _14))\n                        let slot_1, offset_2 := storage_array_index_access_struct_person__dyn(oldLen)\n                        if offset_2\n                        {\n                            mstore(_3, shl(224, 0x4e487b71))\n                            mstore(_2, _3)\n                            revert(_3, _10)\n                        }\n                        sstore(slot_1, mload(memPtr_2))\n                        let memberSlot := add(slot_1, _14)\n                        let _15 := mload(_13)\n                        let newLen := mload(_15)\n                        if gt(newLen, _8)\n                        {\n                            mstore(_3, shl(224, 0x4e487b71))\n                            mstore(_2, 0x41)\n                            revert(_3, _10)\n                        }\n                        let _16 := extract_byte_array_length(sload(memberSlot))\n                        if gt(_16, 0x1f)\n                        {\n                            mstore(_3, memberSlot)\n                            let data := keccak256(_3, _11)\n                            let deleteStart := add(data, shr(5, add(newLen, 0x1f)))\n                            if lt(newLen, _11) { deleteStart := data }\n                            let _17 := add(data, shr(5, add(_16, 0x1f)))\n                            let start := deleteStart\n                            for { } lt(start, _17) { start := add(start, _14) }\n                            { sstore(start, _3) }\n                        }\n                        let srcOffset := _3\n                        srcOffset := _11\n                        switch gt(newLen, 0x1f)\n                        case 1 {\n                            let loopEnd := and(newLen, _12)\n                            mstore(_3, memberSlot)\n                            let dstPtr := keccak256(_3, _11)\n                            let i_2 := _3\n                            for { } lt(i_2, loopEnd) { i_2 := add(i_2, _11) }\n                            {\n                                sstore(dstPtr, mload(add(_15, srcOffset)))\n                                dstPtr := add(dstPtr, _14)\n                                srcOffset := add(srcOffset, _11)\n                            }\n                            if lt(loopEnd, newLen)\n                            {\n                                let lastValue := mload(add(_15, srcOffset))\n                                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n                            }\n                            sstore(memberSlot, add(shl(_14, newLen), _14))\n                        }\n                        default {\n                            let value_1 := _3\n                            if newLen\n                            {\n                                value_1 := mload(add(_15, srcOffset))\n                            }\n                            sstore(memberSlot, or(and(value_1, not(shr(shl(3, newLen), not(0)))), shl(_14, newLen)))\n                        }\n                        return(_3, _3)\n                    }\n                }\n                revert(0, 0)\n            }\n            function storage_array_index_access_struct_person__dyn(index) -> slot, offset\n            {\n                if iszero(lt(index, sload(/** @src 1:515:543  \"person[] public listofpeople\" */ 1)))\n                /// @src 1:60:700  \"contract Array{...\"\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x32)\n                    revert(0, 0x24)\n                }\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 1:515:543  \"person[] public listofpeople\" */ 1)\n                /// @src 1:60:700  \"contract Array{...\"\n                slot := add(80084422859880547211683076133703299733277748156566366325829078699459944778998, shl(/** @src 1:515:543  \"person[] public listofpeople\" */ 1, /** @src 1:60:700  \"contract Array{...\" */ index))\n                offset := /** @src -1:-1:-1 */ 0\n            }\n            /// @src 1:60:700  \"contract Array{...\"\n            function extract_byte_array_length(data) -> length\n            {\n                length := shr(1, data)\n                let outOfPlaceEncoding := and(data, 1)\n                if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                if eq(outOfPlaceEncoding, lt(length, 32))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x22)\n                    revert(0, 0x24)\n                }\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220c365c3d8cfef6bece8164fbfb05ece4082fae19d67d0217489ad61e7952c0b2864736f6c63430008180033\"\n    }\n}\n","hash":"010000674c540559e4c4ef6c93ddaf539f20d216ff921ade541cd6241270b304","factoryDependencies":{}}},"contracts/exercise_on_array.sol":{"Animal":{"abi":[{"inputs":[{"internalType":"string","name":"_Animal","type":"string"}],"name":"addAnimal","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"listofanimals","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"retrieve","outputs":[{"internalType":"string[]","name":"","type":"string[]"}],"stateMutability":"view","type":"function"}],"metadata":{"optimizer_settings":{"is_debug_logging_enabled":false,"is_fallback_to_size_enabled":false,"is_system_request_memoization_disabled":false,"is_verify_each_enabled":false,"jump_table_density_threshold":null,"level_back_end":"Aggressive","level_middle_end":"Aggressive","level_middle_end_size":"Zero"},"solc_metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_Animal\",\"type\":\"string\"}],\"name\":\"addAnimal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listofanimals\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieve\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/exercise_on_array.sol\":\"Animal\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOcmu\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/exercise_on_array.sol\":{\"keccak256\":\"0x0db644a54c09d70a5401e2b9c95e01d8b268cc53955bd3a3a47e1e513a73cbac\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://98894cd3be97d4de3d8c7137aa31cd6d5a8d1be1d2156411132bcdda2e68a088\",\"dweb:/ipfs/QmVh1Q2cGYEDwBqAzw28juNx2LJBYWiFi4RTcWyJ1LirJ6\"]}},\"version\":1}","solc_version":"0.8.24","solc_zkvm_edition":null,"zk_version":"1.4.1"},"evm":{"legacyAssembly":null,"assembly":"\t.text\n\t.file\t\"exercise_on_array.sol:Animal\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[7]\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_1\n\tadd\t128, r0, r2\n\tst.1\t64, r2\n\tsub.s!\t4, r3, r2\n\tjump.lt\t@.BB0_2\n\tld\tr1, r2\n\tshr.s\t224, r2, r2\n\tsub.s!\t@CPI0_7[0], r2, r4\n\tjump.eq\t@.BB0_103\n\tsub.s!\t@CPI0_8[0], r2, r4\n\tjump.eq\t@.BB0_71\n\tsub.s!\t@CPI0_9[0], r2, r1\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tsload\tr0, r5\n\tsub.s!\t@CPI0_5[0], r5, r1\n\tjump.gt\t@.BB0_23\n\tshl.s\t5, r5, r1\n\tadd\t63, r1, r1\n\tand\t@CPI0_12[0], r1, r1\n\tsub.s!\t@CPI0_11[0], r1, r2\n\tjump.gt\t@.BB0_23\n\tadd\t128, r1, r1\n\tst.1\t64, r1\n\tst.1\t128, r5\n\tst.1\t0, r0\n\tsub!\tr5, r0, r2\n\tjump.eq\t@.BB0_64\n\tadd\t160, r0, r6\n\tadd\t@CPI0_10[0], r0, r7\n\tadd\tr0, r0, r8\n\tadd\tr5, r0, stack-[1]\n.BB0_52:\n\tsload\tr7, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r3\n\tand\t127, r3, r4\n\tadd.ne\tr3, r0, r4\n\tsub.s!\t31, r4, r3\n\tadd\t0, r0, r3\n\tadd.gt\t1, r0, r3\n\txor\tr1, r3, r3\n\tand!\t1, r3, r3\n\tjump.ne\t@.BB0_10\n\tld.1\t64, r9\n\tst.1.inc\tr9, r4, r3\n\tsub!\tr2, r0, r2\n\tjump.eq\t@.BB0_56\n\tadd\tr3, r0, stack-[2]\n\tadd\tr4, r0, stack-[3]\n\tadd\tr9, r0, stack-[4]\n\tadd\tr8, r0, stack-[5]\n\tadd\tr6, r0, stack-[7]\n\tadd\tr7, r0, stack-[6]\n\tst.1\t0, r7\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_4[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[3], r0, r10\n\tsub!\tr10, r0, r2\n\tadd\tstack-[1], r0, r5\n\tadd\tstack-[7], r0, r6\n\tadd\tstack-[5], r0, r8\n\tjump.eq\t@.BB0_59\n\tld\tr1, r2\n\tadd\tr0, r0, r1\n\tadd\tstack-[6], r0, r7\n\tadd\tstack-[4], r0, r9\n\tadd\tstack-[2], r0, r11\n.BB0_61:\n\tadd\tr11, r1, r3\n\tsload\tr2, r4\n\tst.1\tr3, r4\n\tadd\t1, r2, r2\n\tadd\t32, r1, r1\n\tsub!\tr1, r10, r3\n\tjump.lt\t@.BB0_61\n\tjump\t@.BB0_54\n.BB0_56:\n\tsub.s\t256, r0, r2\n\tand\tr1, r2, r1\n\tst.1\tr3, r1\n\tsub!\tr4, r0, r1\n\tadd\t32, r0, r1\n\tadd.eq\t0, r0, r1\n\tjump\t@.BB0_54\n.BB0_59:\n\tadd\tr0, r0, r1\n\tadd\tstack-[6], r0, r7\n\tadd\tstack-[4], r0, r9\n.BB0_54:\n\tadd\t63, r1, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r2\n\tadd\tr2, r9, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_5[0], r1, r3\n\tjump.gt\t@.BB0_23\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_23\n\tst.1\t64, r1\n\tst.1.inc\tr6, r9, r6\n\tadd\t1, r7, r7\n\tadd\t1, r8, r8\n\tsub!\tr8, r5, r1\n\tjump.lt\t@.BB0_52\n\tld.1\t64, r1\n.BB0_64:\n\tadd\t32, r0, r2\n\tst.1.inc\tr1, r2, r3\n\tld.1\t128, r2\n\tst.1\tr3, r2\n\tadd\t64, r1, r3\n\tshl.s\t5, r2, r4\n\tadd\tr4, r3, r7\n\tsub!\tr2, r0, r4\n\tjump.ne\t@.BB0_65\n.BB0_70:\n\tsub\tr7, r1, r2\n\tadd\t@CPI0_0[0], r0, r3\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t96, r2, r2\n\tor\tr2, r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_1:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t3, r0, r1\n\tst.1\t224, r1\n\tadd\t@CPI0_1[0], r0, r2\n\tst.1\t256, r2\n\tadd\t224, r0, r2\n\tst.1\t128, r2\n\tst.1\t288, r1\n\tadd\t@CPI0_2[0], r0, r2\n\tst.1\t320, r2\n\tadd\t288, r0, r2\n\tst.1\t160, r2\n\tadd\t416, r0, r2\n\tst.1\t64, r2\n\tadd\t5, r0, r2\n\tst.1\t352, r2\n\tadd\t@CPI0_3[0], r0, r2\n\tst.1\t384, r2\n\tadd\t352, r0, r2\n\tst.1\t192, r2\n\tsload\tr0, r2\n\tsstore\tr0, r1\n\tsub.s!\t4, r2, r1\n\tjump.lt\t@.BB0_7\n\tadd\tr2, r0, stack-[7]\n\tst.1\t0, r0\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_4[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tadd\tstack-[7], r1, r3\n\tadd\t3, r1, r4\n\tsub!\tr4, r3, r1\n\tjump.ge\t@.BB0_7\n\tadd\tr3, r0, stack-[5]\n\tjump\t@.BB0_9\n.BB0_20:\n\tadd\tstack-[7], r0, r4\n\tsstore\tr4, r0\n\tadd\tstack-[5], r0, r3\n.BB0_14:\n\tsstore\tr1, r0\n.BB0_15:\n\tadd\t1, r4, r4\n\tsub!\tr4, r3, r1\n\tjump.ge\t@.BB0_7\n.BB0_9:\n\tsload\tr4, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r1\n\tand\t127, r1, r5\n\tadd.ne\tr1, r0, r5\n\tsub.s!\t31, r5, r1\n\tadd\t0, r0, r1\n\tadd.gt\t1, r0, r1\n\tsub!\tr2, r1, r1\n\tjump.ne\t@.BB0_10\n\tsub!\tr5, r0, r1\n\tjump.eq\t@.BB0_15\n\tsub.s!\t31, r5, r1\n\tadd\tr4, r0, r1\n\tjump.le\t@.BB0_14\n\tadd\tr5, r0, stack-[6]\n\tadd\tr4, r0, stack-[7]\n\tst.1\t0, r4\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_4[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tadd\tstack-[6], r0, r2\n\tadd\t31, r2, r2\n\tshr.s\t5, r2, r2\n\tadd\tr1, r2, r2\n\tadd\t1, r1, r3\n\tsub!\tr3, r2, r4\n\tjump.ge\t@.BB0_20\n.BB0_19:\n\tsstore\tr3, r0\n\tadd\t1, r3, r3\n\tsub!\tr3, r2, r4\n\tjump.lt\t@.BB0_19\n\tjump\t@.BB0_20\n.BB0_7:\n\tst.1\t0, r0\n\tadd\t@CPI0_0[0], r0, r3\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_4[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\t128, r0, r4\n\tld\tr1, r5\n\tadd\tr0, r0, r6\n\tjump\t@.BB0_21\n.BB0_38:\n\tshl.s\t1, r7, r1\n\tor\t1, r1, r1\n\tadd\tstack-[7], r0, r4\n\tadd\tstack-[6], r0, r5\n.BB0_30:\n\tsstore\tr5, r1\n\tsub.s!\t2, r6, r1\n\tadd\t1, r6, r6\n\tadd\t1, r5, r5\n\tjump.ge\t@.BB0_22\n.BB0_21:\n\tld.1.inc\tr4, r8, r4\n\tld.1.inc\tr8, r7, r9\n\tsub.s!\t@CPI0_5[0], r7, r1\n\tjump.gt\t@.BB0_23\n\tsload\tr5, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r2\n\tand\t127, r2, r3\n\tadd.ne\tr2, r0, r3\n\tsub.s!\t31, r3, r2\n\tadd\t0, r0, r2\n\tadd.gt\t1, r0, r2\n\txor\tr1, r2, r1\n\tand!\t1, r1, r1\n\tjump.ne\t@.BB0_10\n\tsub.s!\t32, r3, r1\n\tadd\tr4, r0, stack-[7]\n\tadd\tr5, r0, stack-[6]\n\tadd\tr6, r0, stack-[5]\n\tadd\tr7, r0, stack-[4]\n\tadd\tr8, r0, stack-[3]\n\tjump.lt\t@.BB0_28\n\tadd\tr3, r0, stack-[1]\n\tadd\tr9, r0, stack-[2]\n\tst.1\t0, r5\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_4[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[4], r0, r7\n\tadd\t31, r7, r2\n\tshr.s\t5, r2, r2\n\tsub.s!\t32, r7, r3\n\tadd.lt\tr0, r0, r2\n\tld\tr1, r3\n\tadd\tstack-[1], r0, r1\n\tadd\t31, r1, r1\n\tshr.s\t5, r1, r1\n\tadd\tr3, r1, r1\n\tadd\tr3, r2, r2\n\tsub!\tr2, r1, r3\n\tadd\tstack-[7], r0, r4\n\tadd\tstack-[6], r0, r5\n\tadd\tstack-[5], r0, r6\n\tadd\tstack-[2], r0, r9\n\tjump.ge\t@.BB0_28\n.BB0_29:\n\tsstore\tr2, r0\n\tadd\t1, r2, r2\n\tsub!\tr2, r1, r3\n\tjump.lt\t@.BB0_29\n.BB0_28:\n\tsub.s!\t31, r7, r1\n\tjump.le\t@.BB0_39\n\tst.1\t0, r5\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_4[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tsub.s\t32, r0, r2\n\tadd\tstack-[4], r0, r7\n\tand!\tr7, r2, r3\n\tld\tr1, r1\n\tadd\tstack-[5], r0, r6\n\tjump.eq\t@.BB0_33\n\tadd\t32, r0, r2\n\tadd\tr0, r0, r4\n\tadd\tstack-[3], r0, r8\n.BB0_35:\n\tadd\tr2, r8, r5\n\tld.1\tr5, r5\n\tsstore\tr1, r5\n\tadd\t32, r2, r2\n\tadd\t1, r1, r1\n\tadd\t32, r4, r4\n\tsub!\tr4, r3, r5\n\tjump.lt\t@.BB0_35\n\tsub!\tr3, r7, r3\n\tjump.ge\t@.BB0_38\n\tjump\t@.BB0_37\n.BB0_39:\n\tsub!\tr7, r0, r1\n\tjump.eq\t@.BB0_40\n\tld.1\tr9, r1\n\tjump\t@.BB0_42\n.BB0_40:\n\tadd\tr0, r0, r1\n.BB0_42:\n\tshl.s\t3, r7, r2\n\tsub.s\t1, r0, r3\n\tshr\tr3, r2, r2\n\txor\tr2, r3, r2\n\tand\tr1, r2, r1\n\tshl.s\t1, r7, r2\n\tor\tr1, r2, r1\n\tjump\t@.BB0_30\n.BB0_33:\n\tadd\t32, r0, r2\n\tadd\tstack-[3], r0, r8\n\tsub!\tr3, r7, r3\n\tjump.ge\t@.BB0_38\n.BB0_37:\n\tshl.s\t3, r7, r3\n\tand\t248, r3, r3\n\tsub.s\t1, r0, r4\n\tshr\tr4, r3, r3\n\txor\tr3, r4, r3\n\tadd\tr2, r8, r2\n\tld.1\tr2, r2\n\tand\tr2, r3, r2\n\tsstore\tr1, r2\n\tjump\t@.BB0_38\n.BB0_103:\n\tcontext.get_context_u128\tr2\n\tsub.s!\t36, r3, r3\n\tjump.lt\t@.BB0_2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tsload\tr0, r2\n\tsub!\tr1, r2, r2\n\tjump.ge\t@.BB0_2\n\tst.1\t0, r0\n\tadd\t@CPI0_10[0], r1, r1\n\tnear_call\tr0, @copy_array_from_storage_to_memory_string, @DEFAULT_UNWIND\n\tadd\t32, r0, r2\n\tld.1\t64, r3\n\tadd\tr3, r0, stack-[7]\n\tst.1.inc\tr3, r2, r2\n\tnear_call\tr0, @abi_encode_string, @DEFAULT_UNWIND\n\tadd\tstack-[7], r0, r4\n\tsub\tr1, r4, r1\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd.ge\tr2, r0, r4\n\tshl.s\t64, r4, r2\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_71:\n\tcontext.get_context_u128\tr2\n\tsub.s!\t36, r3, r4\n\tjump.lt\t@.BB0_2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r4\n\tsub.s!\t@CPI0_5[0], r4, r2\n\tjump.gt\t@.BB0_2\n\tadd\t35, r4, r2\n\tsub!\tr2, r3, r2\n\tjump.ge\t@.BB0_2\n\tadd\t4, r4, r5\n\tptr.add\tr1, r5, r2\n\tld\tr2, r2\n\tsub.s!\t@CPI0_5[0], r2, r6\n\tjump.gt\t@.BB0_23\n\tadd\t31, r2, r6\n\tsub.s\t32, r0, r8\n\tand\tr6, r8, r6\n\tadd\t63, r6, r6\n\tand\tr6, r8, r6\n\tsub.s!\t@CPI0_11[0], r6, r7\n\tjump.le\t@.BB0_77\n.BB0_23:\n\tadd\t@CPI0_13[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_14[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_22:\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_6[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_77:\n\tadd\t128, r6, r6\n\tst.1\t64, r6\n\tst.1\t128, r2\n\tadd\tr4, r2, r4\n\tadd\t36, r4, r4\n\tsub!\tr4, r3, r3\n\tjump.le\t@.BB0_78\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_65:\n\tadd\t160, r0, r4\n\tsub.s\t32, r0, r5\n\tadd\tr0, r0, r6\n\tjump\t@.BB0_66\n.BB0_69:\n\tadd\t31, r8, r9\n\tand\tr9, r5, r9\n\tadd\tr7, r8, r8\n\tst.1\tr8, r0\n\tadd\tr7, r9, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r2, r8\n\tjump.ge\t@.BB0_70\n.BB0_66:\n\tsub\tr7, r1, r8\n\tsub.s\t64, r8, r8\n\tst.1.inc\tr3, r8, r3\n\tld.1.inc\tr4, r8, r4\n\tld.1.inc\tr8, r8, r9\n\tst.1.inc\tr7, r8, r7\n\tsub!\tr8, r0, r10\n\tjump.eq\t@.BB0_69\n\tadd\tr0, r0, r10\n.BB0_68:\n\tadd\tr10, r7, r11\n\tadd\tr9, r10, r12\n\tld.1\tr12, r12\n\tst.1\tr11, r12\n\tadd\t32, r10, r10\n\tsub!\tr10, r8, r11\n\tjump.lt\t@.BB0_68\n\tjump\t@.BB0_69\n.BB0_78:\n\tadd\t32, r5, r3\n\tptr.add\tr1, r3, r1\n\tand\t31, r2, r3\n\tshr.s!\t5, r2, r4\n\tjump.eq\t@.BB0_107\n\tadd\tr0, r0, r5\n.BB0_80:\n\tshl.s\t5, r5, r6\n\tptr.add\tr1, r6, r7\n\tld\tr7, r7\n\tadd\t160, r6, r6\n\tst.1\tr6, r7\n\tadd\t1, r5, r5\n\tsub!\tr5, r4, r6\n\tjump.lt\t@.BB0_80\n.BB0_107:\n\tsub!\tr3, r0, r5\n\tjump.eq\t@.BB0_82\n\tshl.s\t5, r4, r4\n\tptr.add\tr1, r4, r1\n\tshl.s\t3, r3, r3\n\tadd\t160, r4, r4\n\tld.1\tr4, r5\n\tshl\tr5, r3, r5\n\tshr\tr5, r3, r5\n\tld\tr1, r1\n\tsub\t256, r3, r3\n\tshr\tr1, r3, r1\n\tshl\tr1, r3, r1\n\tor\tr1, r5, r1\n\tst.1\tr4, r1\n.BB0_82:\n\tadd\t160, r2, r1\n\tst.1\tr1, r0\n\tsload\tr0, r1\n\tsub.s!\t@CPI0_5[0], r1, r2\n\tjump.gt\t@.BB0_23\n\tadd\t1, r1, r2\n\tsstore\tr0, r2\n\tadd\t@CPI0_10[0], r1, r4\n\tst.1\t0, r0\n\tld.1\t128, r5\n\tsub.s!\t@CPI0_5[0], r5, r1\n\tjump.gt\t@.BB0_23\n\tsload\tr4, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r2\n\tand\t127, r2, r3\n\tadd.ne\tr2, r0, r3\n\tsub.s!\t31, r3, r2\n\tadd\t0, r0, r2\n\tadd.gt\t1, r0, r2\n\txor\tr1, r2, r1\n\tand!\t1, r1, r1\n\tjump.eq\t@.BB0_85\n.BB0_10:\n\tadd\t@CPI0_13[0], r0, r1\n\tst.1\t0, r1\n\tadd\t34, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_14[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_85:\n\tsub.s!\t32, r3, r1\n\tadd\tr8, r0, stack-[7]\n\tjump.lt\t@.BB0_88\n\tadd\tr3, r0, stack-[4]\n\tadd\tr5, r0, stack-[6]\n\tadd\tr4, r0, stack-[5]\n\tst.1\t0, r4\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_4[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[6], r0, r5\n\tadd\t31, r5, r2\n\tshr.s\t5, r2, r2\n\tsub.s!\t32, r5, r3\n\tadd.lt\tr0, r0, r2\n\tld\tr1, r3\n\tadd\tstack-[4], r0, r1\n\tadd\t31, r1, r1\n\tshr.s\t5, r1, r1\n\tadd\tr3, r1, r1\n\tadd\tr3, r2, r2\n\tsub!\tr2, r1, r3\n\tadd\tstack-[5], r0, r4\n\tjump.ge\t@.BB0_88\n.BB0_89:\n\tsstore\tr2, r0\n\tadd\t1, r2, r2\n\tsub!\tr2, r1, r3\n\tjump.lt\t@.BB0_89\n.BB0_88:\n\tsub.s!\t31, r5, r1\n\tjump.le\t@.BB0_100\n\tadd\tr5, r0, stack-[6]\n\tadd\tr4, r0, stack-[5]\n\tst.1\t0, r4\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_4[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tadd\tstack-[7], r0, r3\n\tjump.eq\t@.BB0_2\n\tand!\tstack-[6], r3, r2\n\tld\tr1, r1\n\tjump.ne\t@.BB0_94\n\tadd\t160, r0, r3\n\tjump\t@.BB0_97\n.BB0_100:\n\tsub!\tr5, r0, r1\n\tadd\tr0, r0, r1\n\tjump.eq\t@.BB0_102\n\tld.1\t160, r1\n.BB0_102:\n\tshl.s\t3, r5, r2\n\tsub.s\t1, r0, r3\n\tshr\tr3, r2, r2\n\txor\tr2, r3, r2\n\tand\tr1, r2, r2\n\tshl.s\t1, r5, r1\n\tjump\t@.BB0_90\n.BB0_94:\n\tadd\t32, r0, r4\n\tadd\tr0, r0, r3\n.BB0_95:\n\tadd\tr4, r0, r5\n\tadd\t128, r5, r4\n\tld.1\tr4, r4\n\tsstore\tr1, r4\n\tadd\t32, r5, r4\n\tadd\t1, r1, r1\n\tadd\t32, r3, r3\n\tsub!\tr3, r2, r6\n\tjump.lt\t@.BB0_95\n\tadd\t160, r5, r3\n.BB0_97:\n\tadd\tstack-[6], r0, r5\n\tsub!\tr2, r5, r2\n\tjump.ge\t@.BB0_99\n\tshl.s\t3, r5, r2\n\tand\t248, r2, r2\n\tsub.s\t1, r0, r4\n\tshr\tr4, r2, r2\n\txor\tr2, r4, r2\n\tld.1\tr3, r3\n\tand\tr3, r2, r2\n\tsstore\tr1, r2\n.BB0_99:\n\tadd\t1, r0, r1\n\tshl.s\t1, r5, r2\n\tadd\tstack-[5], r0, r4\n.BB0_90:\n\tor\tr2, r1, r1\n\tsstore\tr4, r1\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.func_end0:\n\nabi_encode_string:\n.func_begin1:\n\tld.1.inc\tr1, r3, r4\n\tst.1.inc\tr2, r3, r1\n\tsub!\tr3, r0, r2\n\tjump.eq\t@.BB1_3\n\tadd\tr0, r0, r2\n.BB1_2:\n\tadd\tr1, r2, r5\n\tadd\tr4, r2, r6\n\tld.1\tr6, r6\n\tst.1\tr5, r6\n\tadd\t32, r2, r2\n\tsub!\tr2, r3, r5\n\tjump.lt\t@.BB1_2\n.BB1_3:\n\tadd\tr1, r3, r2\n\tst.1\tr2, r0\n\tadd\t31, r3, r2\n\tsub.s\t32, r0, r3\n\tand\tr2, r3, r2\n\tadd\tr1, r2, r1\n\tret\n.func_end1:\n\ncopy_array_from_storage_to_memory_string:\n.func_begin2:\n\tnop\tstack+=[3]\n\tsload\tr1, r2\n\tand!\t1, r2, r3\n\tshr.s\t1, r2, r4\n\tand\t127, r4, r6\n\tadd.ne\tr4, r0, r6\n\tsub.s!\t31, r6, r4\n\tadd\t0, r0, r4\n\tadd.gt\t1, r0, r4\n\tsub!\tr3, r4, r4\n\tjump.ne\t@.BB2_1\n\tld.1\t64, r5\n\tst.1.inc\tr5, r6, r4\n\tsub!\tr3, r0, r3\n\tjump.eq\t@.BB2_8\n\tadd\tr4, r0, stack-[1]\n\tadd\tr6, r0, stack-[3]\n\tadd\tr5, r0, stack-[2]\n\tst.1\t0, r1\n\tadd\t@CPI2_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI2_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI2_1[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB2_10\n\tadd\tstack-[3], r0, r6\n\tsub!\tr6, r0, r2\n\tjump.eq\t@.BB2_12\n\tld\tr1, r2\n\tadd\tr0, r0, r1\n\tadd\tstack-[2], r0, r5\n\tadd\tstack-[1], r0, r7\n.BB2_14:\n\tadd\tr7, r1, r3\n\tsload\tr2, r4\n\tst.1\tr3, r4\n\tadd\t1, r2, r2\n\tadd\t32, r1, r1\n\tsub!\tr1, r6, r3\n\tjump.lt\t@.BB2_14\n\tjump\t@.BB2_4\n.BB2_8:\n\tsub.s\t256, r0, r1\n\tand\tr2, r1, r1\n\tst.1\tr4, r1\n\tsub!\tr6, r0, r1\n\tadd\t32, r0, r1\n\tadd.eq\t0, r0, r1\n\tjump\t@.BB2_4\n.BB2_12:\n\tadd\tr0, r0, r1\n\tadd\tstack-[2], r0, r5\n.BB2_4:\n\tadd\t63, r1, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r2\n\tadd\tr2, r5, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI2_2[0], r1, r3\n\tjump.gt\t@.BB2_6\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB2_6\n\tst.1\t64, r1\n\tadd\tr5, r0, r1\n\tret\n.BB2_1:\n\tadd\t@CPI2_3[0], r0, r1\n\tst.1\t0, r1\n\tadd\t34, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI2_4[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB2_6:\n\tadd\t@CPI2_3[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI2_4[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB2_10:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end2:\n\n__staticcall:\n.func_begin3:\n.tmp0:\n\tfar_call.static\tr1, r2, @.BB3_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB3_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end3:\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\nCPI2_0:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 44951156777603103434328014148080614096119502149053393678412182219895500439552\nCPI0_2:\n\t.cell 44975913341749041186633542617358601786417444276936568854985550194286268514304\nCPI0_3:\n\t.cell 55361298535492314021107612898590137610470821879050329936185219669955321004032\nCPI0_4:\nCPI2_1:\n\t.cell 904625697166532776746648320380374280103671757735618107014721178055227736064\nCPI0_5:\nCPI2_2:\n\t.cell 18446744073709551615\nCPI0_6:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_7:\n\t.cell 1701366481\nCPI0_8:\n\t.cell 1362739199\nCPI0_9:\n\t.cell 778358465\nCPI0_10:\n\t.cell 18569430475105882587588266137607568536673111973893317399460219858819262702947\nCPI0_11:\n\t.cell 18446744073709551487\nCPI0_12:\n\t.cell 57896044618658097711785492504343953926634992332820282019728792003956564819936\nCPI0_13:\nCPI2_3:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_14:\nCPI2_4:\n\t.cell 2852213850513516153367582212096\n","bytecode":{"object":""},"methodIdentifiers":{"addAnimal(string)":"5139bfff","listofanimals(uint256)":"6568cad1","retrieve()":"2e64cec1"}},"irOptimized":"/// @use-src 2:\"contracts/exercise_on_array.sol\"\nobject \"Animal_117\" {\n    code {\n        {\n            /// @src 2:280:628  \"contract Animal{...\"\n            let _1 := memoryguard(0x80)\n            if callvalue() { revert(0, 0) }\n            let newFreePtr := add(_1, 96)\n            let _2 := sub(shl(64, 1), 1)\n            if or(gt(newFreePtr, _2), lt(newFreePtr, _1))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 2:280:628  \"contract Animal{...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 2:280:628  \"contract Animal{...\" */ 0x24)\n            }\n            mstore(64, newFreePtr)\n            let memPtr := allocate_memory()\n            /// @src 2:380:401  \"[\\\"cat\\\",\\\"cow\\\",\\\"zebra\\\"]\"\n            let _3 := 3\n            /// @src 2:280:628  \"contract Animal{...\"\n            mstore(memPtr, /** @src 2:380:401  \"[\\\"cat\\\",\\\"cow\\\",\\\"zebra\\\"]\" */ _3)\n            /// @src 2:280:628  \"contract Animal{...\"\n            let _4 := 32\n            mstore(add(memPtr, _4), \"cat\")\n            mstore(_1, memPtr)\n            let memPtr_1 := allocate_memory()\n            mstore(memPtr_1, /** @src 2:380:401  \"[\\\"cat\\\",\\\"cow\\\",\\\"zebra\\\"]\" */ _3)\n            /// @src 2:280:628  \"contract Animal{...\"\n            mstore(add(memPtr_1, _4), \"cow\")\n            mstore(/** @src 2:380:401  \"[\\\"cat\\\",\\\"cow\\\",\\\"zebra\\\"]\" */ add(_1, /** @src 2:280:628  \"contract Animal{...\" */ _4), memPtr_1)\n            let memPtr_2 := allocate_memory()\n            let _5 := 5\n            mstore(memPtr_2, 5)\n            mstore(add(memPtr_2, _4), \"zebra\")\n            mstore(/** @src 2:380:401  \"[\\\"cat\\\",\\\"cow\\\",\\\"zebra\\\"]\" */ add(_1, /** @src 2:280:628  \"contract Animal{...\" */ 64), memPtr_2)\n            /// @src -1:-1:-1\n            let _6 := 0\n            /// @src 2:280:628  \"contract Animal{...\"\n            let oldLen := sload(/** @src -1:-1:-1 */ _6)\n            /// @src 2:280:628  \"contract Animal{...\"\n            sstore(/** @src -1:-1:-1 */ _6, /** @src 2:380:401  \"[\\\"cat\\\",\\\"cow\\\",\\\"zebra\\\"]\" */ _3)\n            /// @src 2:280:628  \"contract Animal{...\"\n            if lt(/** @src 2:380:401  \"[\\\"cat\\\",\\\"cow\\\",\\\"zebra\\\"]\" */ _3, /** @src 2:280:628  \"contract Animal{...\" */ oldLen)\n            {\n                mstore(/** @src -1:-1:-1 */ _6, _6)\n                /// @src 2:280:628  \"contract Animal{...\"\n                let data := keccak256(/** @src -1:-1:-1 */ _6, /** @src 2:280:628  \"contract Animal{...\" */ _4)\n                let _7 := add(data, oldLen)\n                let start := add(data, /** @src 2:380:401  \"[\\\"cat\\\",\\\"cow\\\",\\\"zebra\\\"]\" */ _3)\n                /// @src 2:280:628  \"contract Animal{...\"\n                for { } lt(start, _7) { start := add(start, 1) }\n                {\n                    let oldLen_1 := extract_byte_array_length(sload(start))\n                    if iszero(iszero(oldLen_1))\n                    {\n                        let _8 := 31\n                        switch gt(oldLen_1, _8)\n                        case 1 {\n                            mstore(/** @src -1:-1:-1 */ _6, /** @src 2:280:628  \"contract Animal{...\" */ start)\n                            let data_1 := keccak256(/** @src -1:-1:-1 */ _6, /** @src 2:280:628  \"contract Animal{...\" */ _4)\n                            clear_storage_range_bytes1(add(data_1, 1), add(data_1, shr(_5, add(oldLen_1, _8))))\n                            sstore(start, /** @src -1:-1:-1 */ _6)\n                            /// @src 2:280:628  \"contract Animal{...\"\n                            sstore(data_1, /** @src -1:-1:-1 */ _6)\n                        }\n                        default /// @src 2:280:628  \"contract Animal{...\"\n                        {\n                            sstore(start, /** @src -1:-1:-1 */ _6)\n                        }\n                    }\n                }\n            }\n            /// @src 2:280:628  \"contract Animal{...\"\n            let srcPtr := _1\n            mstore(/** @src -1:-1:-1 */ _6, _6)\n            /// @src 2:280:628  \"contract Animal{...\"\n            let elementSlot := keccak256(/** @src -1:-1:-1 */ _6, /** @src 2:280:628  \"contract Animal{...\" */ _4)\n            let i := /** @src -1:-1:-1 */ _6\n            /// @src 2:280:628  \"contract Animal{...\"\n            for { }\n            lt(i, /** @src 2:380:401  \"[\\\"cat\\\",\\\"cow\\\",\\\"zebra\\\"]\" */ _3)\n            /// @src 2:280:628  \"contract Animal{...\"\n            { i := add(i, 1) }\n            {\n                let _9 := mload(srcPtr)\n                let newLen := mload(_9)\n                if gt(newLen, _2)\n                {\n                    mstore(/** @src -1:-1:-1 */ _6, /** @src 2:280:628  \"contract Animal{...\" */ shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(/** @src -1:-1:-1 */ _6, /** @src 2:280:628  \"contract Animal{...\" */ 0x24)\n                }\n                let _10 := extract_byte_array_length(sload(elementSlot))\n                let _11 := 31\n                if gt(_10, _11)\n                {\n                    mstore(/** @src -1:-1:-1 */ _6, /** @src 2:280:628  \"contract Animal{...\" */ elementSlot)\n                    let data_2 := keccak256(/** @src -1:-1:-1 */ _6, /** @src 2:280:628  \"contract Animal{...\" */ _4)\n                    let deleteStart := add(data_2, shr(_5, add(newLen, _11)))\n                    if lt(newLen, _4) { deleteStart := data_2 }\n                    clear_storage_range_bytes1(deleteStart, add(data_2, shr(_5, add(_10, _11))))\n                }\n                let srcOffset := /** @src -1:-1:-1 */ _6\n                /// @src 2:280:628  \"contract Animal{...\"\n                srcOffset := _4\n                switch gt(newLen, _11)\n                case 1 {\n                    let loopEnd := and(newLen, not(31))\n                    mstore(/** @src -1:-1:-1 */ _6, /** @src 2:280:628  \"contract Animal{...\" */ elementSlot)\n                    let dstPtr := keccak256(/** @src -1:-1:-1 */ _6, /** @src 2:280:628  \"contract Animal{...\" */ _4)\n                    let i_1 := /** @src -1:-1:-1 */ _6\n                    /// @src 2:280:628  \"contract Animal{...\"\n                    for { } lt(i_1, loopEnd) { i_1 := add(i_1, _4) }\n                    {\n                        sstore(dstPtr, mload(add(_9, srcOffset)))\n                        dstPtr := add(dstPtr, 1)\n                        srcOffset := add(srcOffset, _4)\n                    }\n                    if lt(loopEnd, newLen)\n                    {\n                        let lastValue := mload(add(_9, srcOffset))\n                        sstore(dstPtr, and(lastValue, not(shr(and(shl(/** @src 2:380:401  \"[\\\"cat\\\",\\\"cow\\\",\\\"zebra\\\"]\" */ _3, /** @src 2:280:628  \"contract Animal{...\" */ newLen), 248), not(0)))))\n                    }\n                    let _12 := 1\n                    sstore(elementSlot, add(shl(_12, newLen), _12))\n                }\n                default {\n                    let value := /** @src -1:-1:-1 */ _6\n                    /// @src 2:280:628  \"contract Animal{...\"\n                    if newLen\n                    {\n                        value := mload(add(_9, srcOffset))\n                    }\n                    sstore(elementSlot, or(and(value, not(shr(shl(/** @src 2:380:401  \"[\\\"cat\\\",\\\"cow\\\",\\\"zebra\\\"]\" */ _3, /** @src 2:280:628  \"contract Animal{...\" */ newLen), not(0)))), shl(1, newLen)))\n                }\n                srcPtr := add(srcPtr, _4)\n                elementSlot := add(elementSlot, 1)\n            }\n            let _13 := mload(64)\n            let _14 := datasize(\"Animal_117_deployed\")\n            codecopy(_13, dataoffset(\"Animal_117_deployed\"), _14)\n            return(_13, _14)\n        }\n        function allocate_memory() -> memPtr\n        {\n            memPtr := mload(64)\n            let newFreePtr := add(memPtr, 64)\n            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr))\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(0, 0x24)\n            }\n            mstore(64, newFreePtr)\n        }\n        function extract_byte_array_length(data) -> length\n        {\n            length := shr(1, data)\n            let outOfPlaceEncoding := and(data, 1)\n            if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n            if eq(outOfPlaceEncoding, lt(length, 32))\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x22)\n                revert(0, 0x24)\n            }\n        }\n        function clear_storage_range_bytes1(start, end)\n        {\n            for { } lt(start, end) { start := add(start, 1) }\n            { sstore(start, 0) }\n        }\n    }\n    /// @use-src 2:\"contracts/exercise_on_array.sol\"\n    object \"Animal_117_deployed\" {\n        code {\n            {\n                /// @src 2:280:628  \"contract Animal{...\"\n                let _1 := memoryguard(0x80)\n                let _2 := 64\n                mstore(_2, _1)\n                let _3 := 4\n                if iszero(lt(calldatasize(), _3))\n                {\n                    let _4 := 0\n                    switch shr(224, calldataload(_4))\n                    case 0x2e64cec1 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let length := sload(_4)\n                        if gt(length, 0xffffffffffffffff)\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, 0x41)\n                            revert(_4, 0x24)\n                        }\n                        let _5 := 0x20\n                        finalize_allocation(_1, add(shl(5, length), _5))\n                        mstore(_1, length)\n                        let mpos := _1\n                        mpos := add(_1, _5)\n                        let mpos_1 := mpos\n                        mstore(_4, _4)\n                        let spos := 18569430475105882587588266137607568536673111973893317399460219858819262702947\n                        let i := _4\n                        for { } lt(i, length) { i := add(i, 1) }\n                        {\n                            mstore(mpos, copy_array_from_storage_to_memory_string(spos))\n                            mpos := add(mpos, _5)\n                            spos := add(spos, 1)\n                        }\n                        let memPos := mload(_2)\n                        let tail := add(memPos, _5)\n                        mstore(memPos, _5)\n                        let pos := tail\n                        let length_1 := mload(_1)\n                        mstore(tail, length_1)\n                        pos := add(memPos, _2)\n                        let tail_1 := add(add(memPos, shl(5, length_1)), _2)\n                        let srcPtr := mpos_1\n                        let i_1 := _4\n                        for { } lt(i_1, length_1) { i_1 := add(i_1, 1) }\n                        {\n                            mstore(pos, add(sub(tail_1, memPos), not(63)))\n                            tail_1 := abi_encode_string(mload(srcPtr), tail_1)\n                            srcPtr := add(srcPtr, _5)\n                            pos := add(pos, _5)\n                        }\n                        return(memPos, sub(tail_1, memPos))\n                    }\n                    case 0x5139bfff {\n                        if callvalue() { revert(_4, _4) }\n                        let _6 := 32\n                        if slt(add(calldatasize(), not(3)), _6) { revert(_4, _4) }\n                        let offset := calldataload(_3)\n                        let _7 := 0xffffffffffffffff\n                        if gt(offset, _7) { revert(_4, _4) }\n                        if iszero(slt(add(offset, 35), calldatasize())) { revert(_4, _4) }\n                        let _8 := calldataload(add(_3, offset))\n                        let _9 := 36\n                        if gt(_8, _7)\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, 0x41)\n                            revert(_4, _9)\n                        }\n                        let _10 := not(31)\n                        let memPtr := mload(_2)\n                        finalize_allocation(memPtr, add(and(add(_8, 0x1f), _10), _6))\n                        mstore(memPtr, _8)\n                        if gt(add(add(offset, _8), _9), calldatasize()) { revert(_4, _4) }\n                        calldatacopy(add(memPtr, _6), add(offset, _9), _8)\n                        mstore(add(add(memPtr, _8), _6), _4)\n                        let oldLen := sload(_4)\n                        if iszero(lt(oldLen, 18446744073709551616))\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, 0x41)\n                            revert(_4, _9)\n                        }\n                        let _11 := 1\n                        sstore(_4, add(oldLen, _11))\n                        let slot, offset_1 := storage_array_index_access_string__dyn(oldLen)\n                        if offset_1\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, _4)\n                            revert(_4, _9)\n                        }\n                        let newLen := mload(memPtr)\n                        if gt(newLen, _7)\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, 0x41)\n                            revert(_4, _9)\n                        }\n                        let _12 := extract_byte_array_length(sload(slot))\n                        if gt(_12, 0x1f)\n                        {\n                            mstore(_4, slot)\n                            let data := keccak256(_4, _6)\n                            let deleteStart := add(data, shr(5, add(newLen, 0x1f)))\n                            if lt(newLen, _6) { deleteStart := data }\n                            let _13 := add(data, shr(5, add(_12, 0x1f)))\n                            let start := deleteStart\n                            for { } lt(start, _13) { start := add(start, _11) }\n                            { sstore(start, _4) }\n                        }\n                        let srcOffset := _4\n                        srcOffset := _6\n                        switch gt(newLen, 0x1f)\n                        case 1 {\n                            let loopEnd := and(newLen, _10)\n                            mstore(_4, slot)\n                            let dstPtr := keccak256(_4, _6)\n                            let i_2 := _4\n                            for { } lt(i_2, loopEnd) { i_2 := add(i_2, _6) }\n                            {\n                                sstore(dstPtr, mload(add(memPtr, srcOffset)))\n                                dstPtr := add(dstPtr, _11)\n                                srcOffset := add(srcOffset, _6)\n                            }\n                            if lt(loopEnd, newLen)\n                            {\n                                let lastValue := mload(add(memPtr, srcOffset))\n                                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n                            }\n                            sstore(slot, add(shl(_11, newLen), _11))\n                        }\n                        default {\n                            let value := _4\n                            if newLen\n                            {\n                                value := mload(add(memPtr, srcOffset))\n                            }\n                            sstore(slot, or(and(value, not(shr(shl(3, newLen), not(0)))), shl(_11, newLen)))\n                        }\n                        return(_4, _4)\n                    }\n                    case 0x6568cad1 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                        let value_1 := calldataload(_3)\n                        /// @src 2:347:401  \"string[] public listofanimals =  [\\\"cat\\\",\\\"cow\\\",\\\"zebra\\\"]\"\n                        if iszero(lt(value_1, /** @src 2:280:628  \"contract Animal{...\" */ sload(_4)))\n                        /// @src 2:347:401  \"string[] public listofanimals =  [\\\"cat\\\",\\\"cow\\\",\\\"zebra\\\"]\"\n                        {\n                            revert(/** @src 2:280:628  \"contract Animal{...\" */ _4, _4)\n                        }\n                        /// @src 2:347:401  \"string[] public listofanimals =  [\\\"cat\\\",\\\"cow\\\",\\\"zebra\\\"]\"\n                        let slot_1, offset_2 := storage_array_index_access_string__dyn(value_1)\n                        /// @src 2:280:628  \"contract Animal{...\"\n                        if iszero(iszero(offset_2))\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, _4)\n                            revert(_4, 0x24)\n                        }\n                        let value_2 := copy_array_from_storage_to_memory_string(slot_1)\n                        let memPos_1 := mload(_2)\n                        mstore(memPos_1, 32)\n                        return(memPos_1, sub(abi_encode_string(value_2, add(memPos_1, 32)), memPos_1))\n                    }\n                }\n                revert(0, 0)\n            }\n            function abi_encode_string(value, pos) -> end\n            {\n                let length := mload(value)\n                mstore(pos, length)\n                let i := 0\n                for { } lt(i, length) { i := add(i, 0x20) }\n                {\n                    let _1 := 0x20\n                    mstore(add(add(pos, i), _1), mload(add(add(value, i), _1)))\n                }\n                mstore(add(add(pos, length), 0x20), 0)\n                end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            function storage_array_index_access_string__dyn(index) -> slot, offset\n            {\n                let _1 := 0\n                if iszero(lt(index, sload(_1)))\n                {\n                    mstore(_1, shl(224, 0x4e487b71))\n                    mstore(4, 0x32)\n                    revert(_1, 0x24)\n                }\n                mstore(_1, _1)\n                slot := add(18569430475105882587588266137607568536673111973893317399460219858819262702947, index)\n                offset := _1\n            }\n            function extract_byte_array_length(data) -> length\n            {\n                length := shr(1, data)\n                let outOfPlaceEncoding := and(data, 1)\n                if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                if eq(outOfPlaceEncoding, lt(length, 32))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x22)\n                    revert(0, 0x24)\n                }\n            }\n            function copy_array_from_storage_to_memory_string(slot) -> memPtr\n            {\n                memPtr := mload(64)\n                let ret := /** @src -1:-1:-1 */ 0\n                /// @src 2:280:628  \"contract Animal{...\"\n                let slotValue := sload(slot)\n                let length := extract_byte_array_length(slotValue)\n                mstore(memPtr, length)\n                let _1 := 0x20\n                let _2 := 1\n                switch and(slotValue, 1)\n                case 0 {\n                    mstore(add(memPtr, _1), and(slotValue, not(255)))\n                    ret := add(add(memPtr, shl(5, iszero(iszero(length)))), _1)\n                }\n                case 1 {\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 2:280:628  \"contract Animal{...\" */ slot)\n                    let dataPos := keccak256(/** @src -1:-1:-1 */ 0, /** @src 2:280:628  \"contract Animal{...\" */ _1)\n                    let i := /** @src -1:-1:-1 */ 0\n                    /// @src 2:280:628  \"contract Animal{...\"\n                    for { } lt(i, length) { i := add(i, _1) }\n                    {\n                        mstore(add(add(memPtr, i), _1), sload(dataPos))\n                        dataPos := add(dataPos, _2)\n                    }\n                    ret := add(add(memPtr, i), _1)\n                }\n                finalize_allocation(memPtr, sub(ret, memPtr))\n            }\n        }\n        data \".metadata\" hex\"a26469706673582212208dba715a6299f9927e1027059f57c35dae77480256da875d6e995de9a9e3a91a64736f6c63430008180033\"\n    }\n}\n","hash":"010000c7f9508bc51164892582da9441412951012c8a24a21d44e183bb80e101","factoryDependencies":{}}},"contracts/mapping.sol":{"Mapping":{"abi":[{"inputs":[{"internalType":"string","name":"_name","type":"string"},{"internalType":"uint256","name":"_favoritenumber","type":"uint256"}],"name":"addperson","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"favoritenumbertoname","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getarraylength","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"listofpeople","outputs":[{"internalType":"uint256","name":"favoritenumber","type":"uint256"},{"internalType":"string","name":"name","type":"string"}],"stateMutability":"view","type":"function"}],"metadata":{"optimizer_settings":{"is_debug_logging_enabled":false,"is_fallback_to_size_enabled":false,"is_system_request_memoization_disabled":false,"is_verify_each_enabled":false,"jump_table_density_threshold":null,"level_back_end":"Aggressive","level_middle_end":"Aggressive","level_middle_end_size":"Zero"},"solc_metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_favoritenumber\",\"type\":\"uint256\"}],\"name\":\"addperson\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"favoritenumbertoname\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getarraylength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listofpeople\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"favoritenumber\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mapping.sol\":\"Mapping\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOcmu\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/mapping.sol\":{\"keccak256\":\"0x40ef85f5dfbcf71e2bc00f75b0a09f37c3e42b223b681a86371e046c50922a3a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://91c509d5fd06f6937c448a30b88c45778ac2662c513026aa4b5bbf5e0a62fcf3\",\"dweb:/ipfs/QmUKv3WiQW2zf5CoDPDWnwnoYoAgVFvnvr9v8QaJR7i4nT\"]}},\"version\":1}","solc_version":"0.8.24","solc_zkvm_edition":null,"zk_version":"1.4.1"},"evm":{"legacyAssembly":null,"assembly":"\t.text\n\t.file\t\"mapping.sol:Mapping\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[6]\n\tptr.add\tr1, r0, stack[@ptr_calldata]\n\tadd\t128, r0, r3\n\tst.1\t64, r3\n\tadd\tr1, r0, r4\n\tshr.s\t96, r4, r4\n\tand\t@CPI0_0[0], r4, r4\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_1\n\tsub.s!\t4, r4, r2\n\tjump.lt\t@.BB0_2\n\tld\tr1, r2\n\tshr.s\t224, r2, r2\n\tsub.s!\t@CPI0_2[0], r2, r5\n\tjump.gt\t@.BB0_8\n\tsub.s!\t@CPI0_5[0], r2, r3\n\tjump.eq\t@.BB0_10\n\tsub.s!\t@CPI0_6[0], r2, r2\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr2\n\tsub.s!\t36, r4, r3\n\tjump.lt\t@.BB0_2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tst.1\t0, r1\n\tadd\t1, r0, r1\n\tst.1\t32, r1\n\tadd\t64, r0, r1\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tnear_call\tr0, @copy_array_from_storage_to_memory_string, @DEFAULT_UNWIND\n\tadd\t32, r0, r2\n\tld.1\t64, r3\n\tadd\tr3, r0, stack-[6]\n\tst.1.inc\tr3, r2, r2\n\tnear_call\tr0, @abi_encode_string, @DEFAULT_UNWIND\n\tadd\tstack-[6], r0, r4\n\tjump\t@.BB0_15\n.BB0_1:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_1[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_8:\n\tsub.s!\t@CPI0_3[0], r2, r5\n\tjump.eq\t@.BB0_16\n\tsub.s!\t@CPI0_4[0], r2, r2\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr2\n\tsub.s!\t68, r4, r5\n\tjump.lt\t@.BB0_2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r5\n\tsub.s!\t@CPI0_7[0], r5, r2\n\tjump.gt\t@.BB0_2\n\tadd\t35, r5, r2\n\tsub!\tr2, r4, r2\n\tjump.ge\t@.BB0_2\n\tadd\t4, r5, r6\n\tptr.add\tr1, r6, r2\n\tld\tr2, r2\n\tsub.s!\t@CPI0_8[0], r2, r7\n\tjump.ge\t@.BB0_25\n\tadd\t31, r2, r7\n\tsub.s\t32, r0, r10\n\tand\tr7, r10, r7\n\tadd\t63, r7, r7\n\tand\tr7, r10, r7\n\tsub.s!\t@CPI0_9[0], r7, r8\n\tjump.gt\t@.BB0_25\n\tadd\t128, r7, r7\n\tst.1\t64, r7\n\tst.1\t128, r2\n\tadd\tr5, r2, r5\n\tadd\t36, r5, r5\n\tsub!\tr5, r4, r4\n\tjump.gt\t@.BB0_2\n\tadd\t32, r6, r4\n\tptr.add\tr1, r4, r4\n\tand\t31, r2, r5\n\tshr.s!\t5, r2, r6\n\tjump.eq\t@.BB0_76\n\tadd\tr0, r0, r7\n.BB0_31:\n\tshl.s\t5, r7, r8\n\tptr.add\tr4, r8, r9\n\tld\tr9, r9\n\tadd\t160, r8, r8\n\tst.1\tr8, r9\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_31\n.BB0_76:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_33\n\tshl.s\t5, r6, r6\n\tptr.add\tr4, r6, r4\n\tshl.s\t3, r5, r5\n\tadd\t160, r6, r6\n\tld.1\tr6, r7\n\tshl\tr7, r5, r7\n\tshr\tr7, r5, r7\n\tld\tr4, r4\n\tsub\t256, r5, r5\n\tshr\tr4, r5, r4\n\tshl\tr4, r5, r4\n\tor\tr4, r7, r4\n\tst.1\tr6, r4\n.BB0_33:\n\tadd\t160, r2, r2\n\tst.1\tr2, r0\n\tld.1\t64, r2\n\tsub.s!\t@CPI0_10[0], r2, r4\n\tjump.gt\t@.BB0_25\n\tadd\t64, r2, r4\n\tst.1\t64, r4\n\tptr.add.s\t36, r1, r1\n\tld\tr1, r1\n\tst.1.inc\tr2, r1, r1\n\tst.1\tr1, r3\n\tadd\t2, r0, r4\n\tsload\tr4, r3\n\tsub.s!\t@CPI0_7[0], r3, r5\n\tjump.gt\t@.BB0_25\n\tadd\t1, r3, r5\n\tsstore\tr4, r5\n\tst.1\t0, r4\n\tld.1\tr2, r4\n\tshl.s\t1, r3, r2\n\tadd\t@CPI0_11[0], r2, r3\n\tsstore\tr3, r4\n\tld.1\tr1, r3\n\tld.1.inc\tr3, r5, r6\n\tsub.s!\t@CPI0_7[0], r5, r1\n\tjump.le\t@.BB0_36\n.BB0_25:\n\tadd\t@CPI0_15[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_16[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_10:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t2, r0, r1\n\tsload\tr1, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_17[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_16:\n\tcontext.get_context_u128\tr2\n\tsub.s!\t36, r4, r3\n\tjump.lt\t@.BB0_2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tadd\t2, r0, r2\n\tsload\tr2, r2\n\tsub!\tr1, r2, r2\n\tjump.ge\t@.BB0_2\n\tnear_call\tr0, @storage_array_index_access_struct_person__dyn, @DEFAULT_UNWIND\n\tsload\tr1, r2\n\tadd\tr2, r0, stack-[6]\n\tadd\t1, r1, r1\n\tnear_call\tr0, @copy_array_from_storage_to_memory_string, @DEFAULT_UNWIND\n\tadd\t64, r0, r2\n\tld.1\t64, r4\n\tadd\tr4, r0, stack-[5]\n\tadd\t32, r4, r3\n\tst.1\tr3, r2\n\tadd\tstack-[6], r0, r2\n\tst.1\tr4, r2\n\tadd\t64, r4, r2\n\tnear_call\tr0, @abi_encode_string, @DEFAULT_UNWIND\n\tadd\tstack-[5], r0, r4\n.BB0_15:\n\tsub\tr1, r4, r1\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd.ge\tr2, r0, r4\n\tshl.s\t64, r4, r2\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_36:\n\tadd\t@CPI0_12[0], r2, r4\n\tsload\tr4, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r1\n\tand\t127, r1, r7\n\tadd.ne\tr1, r0, r7\n\tsub.s!\t31, r7, r1\n\tadd\t0, r0, r1\n\tadd.gt\t1, r0, r1\n\tsub!\tr2, r1, r1\n\tjump.eq\t@.BB0_38\n.BB0_37:\n\tadd\t@CPI0_15[0], r0, r1\n\tst.1\t0, r1\n\tadd\t34, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_16[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_38:\n\tadd\tr6, r0, stack-[2]\n\tadd\tr3, r0, stack-[1]\n\tadd\tr10, r0, stack-[4]\n\tadd\tr7, r0, stack-[3]\n\tsub.s!\t32, r7, r1\n\tadd\tr4, r0, stack-[5]\n\tadd\tr5, r0, stack-[6]\n\tjump.lt\t@.BB0_41\n\tst.1\t0, r4\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_13[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[6], r0, r5\n\tadd\t31, r5, r2\n\tshr.s\t5, r2, r2\n\tsub.s!\t32, r5, r3\n\tadd.lt\tr0, r0, r2\n\tld\tr1, r3\n\tadd\tstack-[3], r0, r1\n\tadd\t31, r1, r1\n\tshr.s\t5, r1, r1\n\tadd\tr3, r1, r1\n\tadd\tr3, r2, r2\n\tsub!\tr2, r1, r3\n\tjump.ge\t@.BB0_41\n.BB0_42:\n\tsstore\tr2, r0\n\tadd\t1, r2, r2\n\tsub!\tr2, r1, r3\n\tjump.lt\t@.BB0_42\n.BB0_41:\n\tsub.s!\t31, r5, r1\n\tjump.le\t@.BB0_53\n\tadd\tstack-[5], r0, r1\n\tst.1\t0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_13[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tadd\tstack-[4], r0, r2\n\tjump.eq\t@.BB0_2\n\tand!\tstack-[6], r2, r3\n\tld\tr1, r1\n\tjump.ne\t@.BB0_48\n\tadd\t32, r0, r2\n\tjump\t@.BB0_50\n.BB0_53:\n\tsub!\tstack-[6], r0, r1\n\tadd\tr0, r0, r1\n\tjump.eq\t@.BB0_55\n\tadd\tstack-[2], r0, r1\n\tld.1\tr1, r1\n.BB0_55:\n\tadd\tstack-[6], r0, r4\n\tshl.s\t3, r4, r2\n\tsub.s\t1, r0, r3\n\tshr\tr3, r2, r2\n\txor\tr2, r3, r2\n\tand\tr1, r2, r1\n\tshl.s\t1, r4, r2\n\tor\tr1, r2, r1\n\tjump\t@.BB0_43\n.BB0_48:\n\tadd\t32, r0, r2\n\tadd\tr0, r0, r4\n\tadd\tstack-[1], r0, r6\n.BB0_49:\n\tadd\tr2, r6, r5\n\tld.1\tr5, r5\n\tsstore\tr1, r5\n\tadd\t32, r2, r2\n\tadd\t1, r1, r1\n\tadd\t32, r4, r4\n\tsub!\tr4, r3, r5\n\tjump.lt\t@.BB0_49\n.BB0_50:\n\tsub.s!\tstack-[6], r3, r3\n\tjump.ge\t@.BB0_52\n\tadd\tstack-[6], r0, r3\n\tshl.s\t3, r3, r3\n\tand\t248, r3, r3\n\tsub.s\t1, r0, r4\n\tshr\tr4, r3, r3\n\txor\tr3, r4, r3\n\tadd\tstack-[1], r2, r2\n\tld.1\tr2, r2\n\tand\tr2, r3, r2\n\tsstore\tr1, r2\n.BB0_52:\n\tadd\tstack-[6], r0, r1\n\tshl.s\t1, r1, r1\n\tor\t1, r1, r1\n.BB0_43:\n\tadd\tstack-[5], r0, r2\n\tsstore\tr2, r1\n\tadd\t36, r0, r1\n\tptr.add\tstack[@ptr_calldata], r1, r1\n\tld\tr1, r1\n\tst.1\t0, r1\n\tadd\t1, r0, r1\n\tadd\tr1, r0, stack-[6]\n\tst.1\t32, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_14[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tadd\tr1, r0, stack-[5]\n\tld.1\t128, r1\n\tadd\tr1, r0, stack-[3]\n\tsub.s!\t@CPI0_7[0], r1, r1\n\tjump.gt\t@.BB0_25\n\tadd\tstack-[5], r0, r1\n\tsload\tr1, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r2\n\tand\t127, r2, r3\n\tadd.ne\tr2, r0, r3\n\tadd\tr3, r0, stack-[2]\n\tsub.s!\t31, r3, r2\n\tadd\t0, r0, r2\n\tadd.gt\t1, r0, r2\n\txor\tr1, r2, r1\n\tand!\t1, r1, r1\n\tjump.ne\t@.BB0_37\n\tadd\tstack-[2], r0, r1\n\tsub.s!\t32, r1, r1\n\tjump.lt\t@.BB0_61\n\tadd\tstack-[5], r0, r1\n\tst.1\t0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_13[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[3], r0, r3\n\tadd\t31, r3, r2\n\tshr.s\t5, r2, r2\n\tsub.s!\t32, r3, r3\n\tadd.lt\tr0, r0, r2\n\tld\tr1, r3\n\tadd\tstack-[2], r0, r1\n\tadd\t31, r1, r1\n\tshr.s\t5, r1, r1\n\tadd\tr3, r1, r1\n\tadd\tr3, r2, r2\n\tsub!\tr2, r1, r3\n\tjump.ge\t@.BB0_61\n.BB0_62:\n\tsstore\tr2, r0\n\tadd\t1, r2, r2\n\tsub!\tr2, r1, r3\n\tjump.lt\t@.BB0_62\n.BB0_61:\n\tadd\tstack-[3], r0, r1\n\tsub.s!\t31, r1, r1\n\tjump.le\t@.BB0_73\n\tadd\tstack-[5], r0, r1\n\tst.1\t0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_13[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tadd\tstack-[4], r0, r2\n\tjump.eq\t@.BB0_2\n\tand!\tstack-[3], r2, r2\n\tld\tr1, r1\n\tjump.ne\t@.BB0_67\n\tadd\t160, r0, r3\n\tjump\t@.BB0_70\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_73:\n\tsub!\tstack-[3], r0, r1\n\tadd\tr0, r0, r1\n\tjump.eq\t@.BB0_75\n\tld.1\t160, r1\n.BB0_75:\n\tadd\tstack-[3], r0, r4\n\tshl.s\t3, r4, r2\n\tsub.s\t1, r0, r3\n\tshr\tr3, r2, r2\n\txor\tr2, r3, r2\n\tand\tr1, r2, r1\n\tshl.s\t1, r4, stack-[6]\n\tjump\t@.BB0_63\n.BB0_67:\n\tadd\t32, r0, r4\n\tadd\tr0, r0, r3\n.BB0_68:\n\tadd\tr4, r0, r5\n\tadd\t128, r5, r4\n\tld.1\tr4, r4\n\tsstore\tr1, r4\n\tadd\t32, r5, r4\n\tadd\t1, r1, r1\n\tadd\t32, r3, r3\n\tsub!\tr3, r2, r6\n\tjump.lt\t@.BB0_68\n\tadd\t160, r5, r3\n.BB0_70:\n\tsub.s!\tstack-[3], r2, r2\n\tjump.ge\t@.BB0_72\n\tadd\tstack-[3], r0, r2\n\tshl.s\t3, r2, r2\n\tand\t248, r2, r2\n\tsub.s\t1, r0, r4\n\tshr\tr4, r2, r2\n\txor\tr2, r4, r2\n\tld.1\tr3, r3\n\tand\tr3, r2, r2\n\tsstore\tr1, r2\n.BB0_72:\n\tadd\tstack-[3], r0, r1\n\tshl.s\t1, r1, r1\n.BB0_63:\n\tor\tstack-[6], r1, r1\n\tadd\tstack-[5], r0, r2\n\tsstore\tr2, r1\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.func_end0:\n\ncopy_array_from_storage_to_memory_string:\n.func_begin1:\n\tnop\tstack+=[3]\n\tsload\tr1, r2\n\tand!\t1, r2, r3\n\tshr.s\t1, r2, r4\n\tand\t127, r4, r6\n\tadd.ne\tr4, r0, r6\n\tsub.s!\t31, r6, r4\n\tadd\t0, r0, r4\n\tadd.gt\t1, r0, r4\n\tsub!\tr3, r4, r4\n\tjump.ne\t@.BB1_1\n\tld.1\t64, r5\n\tst.1.inc\tr5, r6, r4\n\tsub!\tr3, r0, r3\n\tjump.eq\t@.BB1_8\n\tadd\tr4, r0, stack-[1]\n\tadd\tr6, r0, stack-[3]\n\tadd\tr5, r0, stack-[2]\n\tst.1\t0, r1\n\tadd\t@CPI1_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI1_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI1_1[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB1_10\n\tadd\tstack-[3], r0, r6\n\tsub!\tr6, r0, r2\n\tjump.eq\t@.BB1_12\n\tld\tr1, r2\n\tadd\tr0, r0, r1\n\tadd\tstack-[2], r0, r5\n\tadd\tstack-[1], r0, r7\n.BB1_14:\n\tadd\tr7, r1, r3\n\tsload\tr2, r4\n\tst.1\tr3, r4\n\tadd\t1, r2, r2\n\tadd\t32, r1, r1\n\tsub!\tr1, r6, r3\n\tjump.lt\t@.BB1_14\n\tjump\t@.BB1_4\n.BB1_8:\n\tsub.s\t256, r0, r1\n\tand\tr2, r1, r1\n\tst.1\tr4, r1\n\tsub!\tr6, r0, r1\n\tadd\t32, r0, r1\n\tadd.eq\t0, r0, r1\n\tjump\t@.BB1_4\n.BB1_12:\n\tadd\tr0, r0, r1\n\tadd\tstack-[2], r0, r5\n.BB1_4:\n\tadd\t63, r1, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r2\n\tadd\tr2, r5, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI1_2[0], r1, r3\n\tjump.gt\t@.BB1_6\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB1_6\n\tst.1\t64, r1\n\tadd\tr5, r0, r1\n\tret\n.BB1_1:\n\tadd\t@CPI1_3[0], r0, r1\n\tst.1\t0, r1\n\tadd\t34, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI1_4[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB1_6:\n\tadd\t@CPI1_3[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI1_4[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB1_10:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end1:\n\nabi_encode_string:\n.func_begin2:\n\tld.1.inc\tr1, r3, r4\n\tst.1.inc\tr2, r3, r1\n\tsub!\tr3, r0, r2\n\tjump.eq\t@.BB2_3\n\tadd\tr0, r0, r2\n.BB2_2:\n\tadd\tr1, r2, r5\n\tadd\tr4, r2, r6\n\tld.1\tr6, r6\n\tst.1\tr5, r6\n\tadd\t32, r2, r2\n\tsub!\tr2, r3, r5\n\tjump.lt\t@.BB2_2\n.BB2_3:\n\tadd\tr1, r3, r2\n\tst.1\tr2, r0\n\tadd\t31, r3, r2\n\tsub.s\t32, r0, r3\n\tand\tr2, r3, r2\n\tadd\tr1, r2, r1\n\tret\n.func_end2:\n\nstorage_array_index_access_struct_person__dyn:\n.func_begin3:\n\tadd\t2, r0, r2\n\tsload\tr2, r3\n\tsub!\tr3, r1, r3\n\tjump.le\t@.BB3_1\n\tst.1\t0, r2\n\tshl.s\t1, r1, r1\n\tadd\t@CPI3_2[0], r1, r1\n\tret\n.BB3_1:\n\tadd\t@CPI3_0[0], r0, r1\n\tst.1\t0, r1\n\tadd\t50, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI3_1[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end3:\n\n__sha3:\n.func_begin4:\n\tadd\t@CPI4_0[0], r0, r2\n\tcontext.gas_left\tr3\n\tsub.s!\t@CPI4_0[0], r3, r4\n\tadd.ge\tr2, r0, r3\n\tsub.s!\t@CPI4_0[0], r1, r4\n\tadd.ge\tr2, r0, r1\n\tshl.s\t96, r1, r1\n\tshl.s\t192, r3, r2\n\tor\tr2, r1, r1\n\tor\t@CPI4_1[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB4_2\n\tld\tr1, r1\n\tret\n.BB4_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end4:\n\n__staticcall:\n.func_begin5:\n.tmp0:\n\tfar_call.static\tr1, r2, @.BB5_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB5_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end5:\n\n\t.data\n\t.p2align\t5, 0x0\nptr_calldata:\n.cell\t0\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\nCPI1_0:\nCPI4_0:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_2:\n\t.cell 3205602266\nCPI0_3:\n\t.cell 3205602267\nCPI0_4:\n\t.cell 3786612778\nCPI0_5:\n\t.cell 1476505509\nCPI0_6:\n\t.cell 2350832528\nCPI0_7:\nCPI1_2:\n\t.cell 18446744073709551615\nCPI0_8:\n\t.cell 18446744073709551616\nCPI0_9:\n\t.cell 18446744073709551487\nCPI0_10:\n\t.cell 18446744073709551551\nCPI0_11:\nCPI3_2:\n\t.cell 29102676481673041902632991033461445430619272659676223336789171408008386403022\nCPI0_12:\n\t.cell 29102676481673041902632991033461445430619272659676223336789171408008386403023\nCPI0_13:\nCPI1_1:\n\t.cell 904625697166532776746648320380374280103671757735618107014721178055227736064\nCPI0_14:\n\t.cell 904625697166532776746648320380374280103671760270919307471179981048634146816\nCPI0_15:\nCPI1_3:\nCPI3_0:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_16:\nCPI1_4:\nCPI3_1:\n\t.cell 2852213850513516153367582212096\nCPI0_17:\n\t.cell 2535301202817642044428229017600\nCPI4_1:\n\t.cell 904625697166532776746648320380374280103671755200316906558262375061821325312\n","bytecode":{"object":""},"methodIdentifiers":{"addperson(string,uint256)":"e1b3202a","favoritenumbertoname(uint256)":"8c1edb90","getarraylength()":"5801afa5","listofpeople(uint256)":"bf119bdb"}},"irOptimized":"/// @use-src 3:\"contracts/mapping.sol\"\nobject \"Mapping_167\" {\n    code {\n        {\n            /// @src 3:61:626  \"contract Mapping{...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            let _2 := datasize(\"Mapping_167_deployed\")\n            codecopy(_1, dataoffset(\"Mapping_167_deployed\"), _2)\n            return(_1, _2)\n        }\n    }\n    /// @use-src 3:\"contracts/mapping.sol\"\n    object \"Mapping_167_deployed\" {\n        code {\n            {\n                /// @src 3:61:626  \"contract Mapping{...\"\n                let _1 := memoryguard(0x80)\n                mstore(64, _1)\n                if iszero(lt(calldatasize(), 4))\n                {\n                    switch shr(224, calldataload(0))\n                    case 0x5801afa5 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        mstore(_1, sload(/** @src 3:596:608  \"listofpeople\" */ 0x02))\n                        /// @src 3:61:626  \"contract Mapping{...\"\n                        return(_1, 32)\n                    }\n                    case 0x8c1edb90 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        mstore(0, calldataload(4))\n                        mstore(32, 1)\n                        let value := copy_array_from_storage_to_memory_string(keccak256(0, 64))\n                        let memPos := mload(64)\n                        mstore(memPos, 32)\n                        return(memPos, sub(abi_encode_string(value, add(memPos, 32)), memPos))\n                    }\n                    case 0xbf119bdb {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value_1 := calldataload(4)\n                        /// @src 3:272:300  \"person[] public listofpeople\"\n                        if iszero(lt(value_1, /** @src 3:61:626  \"contract Mapping{...\" */ sload(/** @src 3:272:300  \"person[] public listofpeople\" */ 2)))\n                        {\n                            revert(/** @src 3:61:626  \"contract Mapping{...\" */ 0, 0)\n                        }\n                        /// @src 3:272:300  \"person[] public listofpeople\"\n                        let slot, offset := storage_array_index_access_struct_person__dyn(value_1)\n                        /// @src 3:61:626  \"contract Mapping{...\"\n                        let _2 := sload(/** @src 3:272:300  \"person[] public listofpeople\" */ slot)\n                        let ret_mpos := copy_array_from_storage_to_memory_string(add(slot, /** @src 3:61:626  \"contract Mapping{...\" */ 1))\n                        let memPos_1 := mload(64)\n                        mstore(memPos_1, _2)\n                        mstore(add(memPos_1, 32), 64)\n                        return(memPos_1, sub(abi_encode_string(ret_mpos, add(memPos_1, 64)), memPos_1))\n                    }\n                    case 0xe1b3202a {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                        let offset_1 := calldataload(4)\n                        if gt(offset_1, 0xffffffffffffffff) { revert(0, 0) }\n                        if iszero(slt(add(offset_1, 35), calldatasize())) { revert(0, 0) }\n                        let _3 := calldataload(add(4, offset_1))\n                        let _4 := 36\n                        if gt(_3, 0xffffffffffffffff)\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, _4)\n                        }\n                        let _5 := 0x1f\n                        let memPtr := mload(64)\n                        finalize_allocation(memPtr, add(and(add(_3, _5), not(31)), 0x20))\n                        mstore(memPtr, _3)\n                        if gt(add(add(offset_1, _3), _4), calldatasize()) { revert(0, 0) }\n                        calldatacopy(add(memPtr, 0x20), add(offset_1, _4), _3)\n                        mstore(add(add(memPtr, _3), 0x20), 0)\n                        let memPtr_1 := mload(64)\n                        let newFreePtr := add(memPtr_1, 64)\n                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr_1))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, _4)\n                        }\n                        mstore(64, newFreePtr)\n                        mstore(memPtr_1, calldataload(_4))\n                        /// @src 3:416:445  \"person(_favoritenumber,_name)\"\n                        let _6 := add(memPtr_1, /** @src 3:61:626  \"contract Mapping{...\" */ 0x20)\n                        mstore(_6, memPtr)\n                        let oldLen := sload(/** @src 3:398:410  \"listofpeople\" */ 0x02)\n                        /// @src 3:61:626  \"contract Mapping{...\"\n                        if iszero(lt(oldLen, 18446744073709551616))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, _4)\n                        }\n                        sstore(/** @src 3:398:410  \"listofpeople\" */ 0x02, /** @src 3:61:626  \"contract Mapping{...\" */ add(oldLen, 1))\n                        let slot_1, offset_2 := storage_array_index_access_struct_person__dyn(oldLen)\n                        if offset_2\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0)\n                            revert(0, _4)\n                        }\n                        sstore(slot_1, mload(memPtr_1))\n                        let _7 := mload(_6)\n                        let newLen := mload(_7)\n                        if gt(newLen, 0xffffffffffffffff)\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, _4)\n                        }\n                        let _8 := extract_byte_array_length(sload(add(slot_1, 1)))\n                        if gt(_8, _5)\n                        {\n                            mstore(0, add(slot_1, 1))\n                            let data := keccak256(0, 0x20)\n                            let deleteStart := add(data, shr(5, add(newLen, _5)))\n                            if lt(newLen, 0x20) { deleteStart := data }\n                            let _9 := add(data, shr(5, add(_8, _5)))\n                            let start := deleteStart\n                            for { } lt(start, _9) { start := add(start, 1) }\n                            { sstore(start, 0) }\n                        }\n                        let srcOffset := 0\n                        srcOffset := 0x20\n                        switch gt(newLen, _5)\n                        case 1 {\n                            let loopEnd := and(newLen, not(31))\n                            mstore(0, add(slot_1, 1))\n                            let dstPtr := keccak256(0, 0x20)\n                            let i := 0\n                            for { } lt(i, loopEnd) { i := add(i, 0x20) }\n                            {\n                                sstore(dstPtr, mload(add(_7, srcOffset)))\n                                dstPtr := add(dstPtr, 1)\n                                srcOffset := add(srcOffset, 0x20)\n                            }\n                            if lt(loopEnd, newLen)\n                            {\n                                let lastValue := mload(add(_7, srcOffset))\n                                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n                            }\n                            sstore(add(slot_1, 1), add(shl(1, newLen), 1))\n                        }\n                        default {\n                            let value_2 := 0\n                            if newLen\n                            {\n                                value_2 := mload(add(_7, srcOffset))\n                            }\n                            sstore(add(slot_1, 1), or(and(value_2, not(shr(shl(3, newLen), not(0)))), shl(1, newLen)))\n                        }\n                        mstore(0, calldataload(_4))\n                        mstore(0x20, 1)\n                        let dataSlot := keccak256(0, 64)\n                        let newLen_1 := mload(memPtr)\n                        if gt(newLen_1, 0xffffffffffffffff)\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, _4)\n                        }\n                        let _10 := extract_byte_array_length(sload(dataSlot))\n                        if gt(_10, _5)\n                        {\n                            mstore(0, dataSlot)\n                            let data_1 := keccak256(0, 0x20)\n                            let deleteStart_1 := add(data_1, shr(5, add(newLen_1, _5)))\n                            if lt(newLen_1, 0x20) { deleteStart_1 := data_1 }\n                            let _11 := add(data_1, shr(5, add(_10, _5)))\n                            let start_1 := deleteStart_1\n                            for { } lt(start_1, _11) { start_1 := add(start_1, 1) }\n                            { sstore(start_1, 0) }\n                        }\n                        let srcOffset_1 := 0\n                        srcOffset_1 := 0x20\n                        switch gt(newLen_1, _5)\n                        case 1 {\n                            let loopEnd_1 := and(newLen_1, not(31))\n                            mstore(0, dataSlot)\n                            let dstPtr_1 := keccak256(0, 0x20)\n                            let i_1 := 0\n                            for { } lt(i_1, loopEnd_1) { i_1 := add(i_1, 0x20) }\n                            {\n                                sstore(dstPtr_1, mload(add(memPtr, srcOffset_1)))\n                                dstPtr_1 := add(dstPtr_1, 1)\n                                srcOffset_1 := add(srcOffset_1, 0x20)\n                            }\n                            if lt(loopEnd_1, newLen_1)\n                            {\n                                let lastValue_1 := mload(add(memPtr, srcOffset_1))\n                                sstore(dstPtr_1, and(lastValue_1, not(shr(and(shl(3, newLen_1), 248), not(0)))))\n                            }\n                            sstore(dataSlot, add(shl(1, newLen_1), 1))\n                        }\n                        default {\n                            let value_3 := 0\n                            if newLen_1\n                            {\n                                value_3 := mload(add(memPtr, srcOffset_1))\n                            }\n                            sstore(dataSlot, or(and(value_3, not(shr(shl(3, newLen_1), not(0)))), shl(1, newLen_1)))\n                        }\n                        return(0, 0)\n                    }\n                }\n                revert(0, 0)\n            }\n            function extract_byte_array_length(data) -> length\n            {\n                length := shr(1, data)\n                let outOfPlaceEncoding := and(data, 1)\n                if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                if eq(outOfPlaceEncoding, lt(length, 32))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x22)\n                    revert(0, 0x24)\n                }\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            function copy_array_from_storage_to_memory_string(slot) -> memPtr\n            {\n                memPtr := mload(64)\n                let ret := /** @src -1:-1:-1 */ 0\n                /// @src 3:61:626  \"contract Mapping{...\"\n                let slotValue := sload(slot)\n                let length := extract_byte_array_length(slotValue)\n                mstore(memPtr, length)\n                let _1 := 0x20\n                let _2 := 1\n                switch and(slotValue, 1)\n                case 0 {\n                    mstore(add(memPtr, _1), and(slotValue, not(255)))\n                    ret := add(add(memPtr, shl(5, iszero(iszero(length)))), _1)\n                }\n                case 1 {\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 3:61:626  \"contract Mapping{...\" */ slot)\n                    let dataPos := keccak256(/** @src -1:-1:-1 */ 0, /** @src 3:61:626  \"contract Mapping{...\" */ _1)\n                    let i := /** @src -1:-1:-1 */ 0\n                    /// @src 3:61:626  \"contract Mapping{...\"\n                    for { } lt(i, length) { i := add(i, _1) }\n                    {\n                        mstore(add(add(memPtr, i), _1), sload(dataPos))\n                        dataPos := add(dataPos, _2)\n                    }\n                    ret := add(add(memPtr, i), _1)\n                }\n                finalize_allocation(memPtr, sub(ret, memPtr))\n            }\n            function abi_encode_string(value, pos) -> end\n            {\n                let length := mload(value)\n                mstore(pos, length)\n                let i := /** @src -1:-1:-1 */ 0\n                /// @src 3:61:626  \"contract Mapping{...\"\n                for { } lt(i, length) { i := add(i, 0x20) }\n                {\n                    let _1 := 0x20\n                    mstore(add(add(pos, i), _1), mload(add(add(value, i), _1)))\n                }\n                mstore(add(add(pos, length), 0x20), /** @src -1:-1:-1 */ 0)\n                /// @src 3:61:626  \"contract Mapping{...\"\n                end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n            }\n            function storage_array_index_access_struct_person__dyn(index) -> slot, offset\n            {\n                if iszero(lt(index, sload(/** @src 3:272:300  \"person[] public listofpeople\" */ 2)))\n                /// @src 3:61:626  \"contract Mapping{...\"\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x32)\n                    revert(0, 0x24)\n                }\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 3:272:300  \"person[] public listofpeople\" */ 2)\n                /// @src 3:61:626  \"contract Mapping{...\"\n                slot := add(29102676481673041902632991033461445430619272659676223336789171408008386403022, shl(1, index))\n                offset := /** @src -1:-1:-1 */ 0\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220d00574bc23fe611099fb5bd960869bf3196a0e0a6dd7626ada04712e8610608d64736f6c63430008180033\"\n    }\n}\n","hash":"010000a5f8a09ae9f424d314739a9e04ccf1c939b650473283e293978765d579","factoryDependencies":{}}},"contracts/simplestorage.sol":{"SimpleStorage1":{"abi":[],"metadata":{"optimizer_settings":{"is_debug_logging_enabled":false,"is_fallback_to_size_enabled":false,"is_system_request_memoization_disabled":false,"is_verify_each_enabled":false,"jump_table_density_threshold":null,"level_back_end":"Aggressive","level_middle_end":"Aggressive","level_middle_end_size":"Zero"},"solc_metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/simplestorage.sol\":\"SimpleStorage1\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOcmu\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/simplestorage.sol\":{\"keccak256\":\"0x778286143f016fd5fc36df377dc02d2909a5628050972d26cc76fb97008da23f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0417ba045ebb02433e0e8852862c1da7f524ffadd4bd871fb1c2728fb25012d7\",\"dweb:/ipfs/QmZ1tX2MroMsastLjC9UN7obtQ4q6kSmR36vs5NJa6nHuR\"]}},\"version\":1}","solc_version":"0.8.24","solc_zkvm_edition":null,"zk_version":"1.4.1"},"evm":{"legacyAssembly":null,"assembly":"\t.text\n\t.file\t\"simplestorage.sol:SimpleStorage1\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB0_2\n\tadd\t128, r0, r1\n\tst.1\t64, r1\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_0[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end0:\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\n","bytecode":{"object":"00000001012001900000000c0000613d0000008001000039000000400010043f0000000001000416000000000101004b0000000c0000c13d00000020010000390000010000100443000001200000044300000005010000410000000f0001042e000000000100001900000010000104300000000e000004320000000f0001042e000000100001043000000000000000000000000000000000000000000000000000000002000000000000000000000000000000400000010000000000000000006d6bf195481f714b679879bf0ea2daecc5e373e18fe7d6a6097e2e674862de1d"},"methodIdentifiers":{}},"irOptimized":"/// @use-src 4:\"contracts/simplestorage.sol\"\nobject \"SimpleStorage1_191\" {\n    code {\n        {\n            /// @src 4:362:387  \"contract SimpleStorage1{}\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            let _2 := datasize(\"SimpleStorage1_191_deployed\")\n            codecopy(_1, dataoffset(\"SimpleStorage1_191_deployed\"), _2)\n            return(_1, _2)\n        }\n    }\n    /// @use-src 4:\"contracts/simplestorage.sol\"\n    object \"SimpleStorage1_191_deployed\" {\n        code {\n            {\n                /// @src 4:362:387  \"contract SimpleStorage1{}\"\n                revert(0, 0)\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220e7c01f1005280b9abcd1529cf041b88b8004721a57556db9144e3d9a253145a264736f6c63430008180033\"\n    }\n}\n","hash":"0100000758b3b5fbaceab3898f60237df0211049a95afb925458f5ec26f077e1","factoryDependencies":{}},"SimpleStorage2":{"abi":[],"metadata":{"optimizer_settings":{"is_debug_logging_enabled":false,"is_fallback_to_size_enabled":false,"is_system_request_memoization_disabled":false,"is_verify_each_enabled":false,"jump_table_density_threshold":null,"level_back_end":"Aggressive","level_middle_end":"Aggressive","level_middle_end_size":"Zero"},"solc_metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/simplestorage.sol\":\"SimpleStorage2\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOcmu\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/simplestorage.sol\":{\"keccak256\":\"0x778286143f016fd5fc36df377dc02d2909a5628050972d26cc76fb97008da23f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0417ba045ebb02433e0e8852862c1da7f524ffadd4bd871fb1c2728fb25012d7\",\"dweb:/ipfs/QmZ1tX2MroMsastLjC9UN7obtQ4q6kSmR36vs5NJa6nHuR\"]}},\"version\":1}","solc_version":"0.8.24","solc_zkvm_edition":null,"zk_version":"1.4.1"},"evm":{"legacyAssembly":null,"assembly":"\t.text\n\t.file\t\"simplestorage.sol:SimpleStorage2\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB0_2\n\tadd\t128, r0, r1\n\tst.1\t64, r1\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_0[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end0:\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\n","bytecode":{"object":"00000001012001900000000c0000613d0000008001000039000000400010043f0000000001000416000000000101004b0000000c0000c13d00000020010000390000010000100443000001200000044300000005010000410000000f0001042e000000000100001900000010000104300000000e000004320000000f0001042e000000100001043000000000000000000000000000000000000000000000000000000002000000000000000000000000000000400000010000000000000000005a5ea8032e7aa0ffb2e0743ae2d1c55c9e98c4bafd8a0e4adbb7206b0fcc9a21"},"methodIdentifiers":{}},"irOptimized":"/// @use-src 4:\"contracts/simplestorage.sol\"\nobject \"SimpleStorage2_192\" {\n    code {\n        {\n            /// @src 4:389:414  \"contract SimpleStorage2{}\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            let _2 := datasize(\"SimpleStorage2_192_deployed\")\n            codecopy(_1, dataoffset(\"SimpleStorage2_192_deployed\"), _2)\n            return(_1, _2)\n        }\n    }\n    /// @use-src 4:\"contracts/simplestorage.sol\"\n    object \"SimpleStorage2_192_deployed\" {\n        code {\n            {\n                /// @src 4:389:414  \"contract SimpleStorage2{}\"\n                revert(0, 0)\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220a2b3bfebae36baf7751c7a39bafe2eb5133047bb1a530761bde2d42e9b46f94d64736f6c63430008180033\"\n    }\n}\n","hash":"0100000721202e62974fe0560ff4dc9db78401fb8c33a454e404b94da55f9696","factoryDependencies":{}},"SimpleStorage3":{"abi":[],"metadata":{"optimizer_settings":{"is_debug_logging_enabled":false,"is_fallback_to_size_enabled":false,"is_system_request_memoization_disabled":false,"is_verify_each_enabled":false,"jump_table_density_threshold":null,"level_back_end":"Aggressive","level_middle_end":"Aggressive","level_middle_end_size":"Zero"},"solc_metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/simplestorage.sol\":\"SimpleStorage3\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOcmu\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/simplestorage.sol\":{\"keccak256\":\"0x778286143f016fd5fc36df377dc02d2909a5628050972d26cc76fb97008da23f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0417ba045ebb02433e0e8852862c1da7f524ffadd4bd871fb1c2728fb25012d7\",\"dweb:/ipfs/QmZ1tX2MroMsastLjC9UN7obtQ4q6kSmR36vs5NJa6nHuR\"]}},\"version\":1}","solc_version":"0.8.24","solc_zkvm_edition":null,"zk_version":"1.4.1"},"evm":{"legacyAssembly":null,"assembly":"\t.text\n\t.file\t\"simplestorage.sol:SimpleStorage3\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB0_2\n\tadd\t128, r0, r1\n\tst.1\t64, r1\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_0[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end0:\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\n","bytecode":{"object":"00000001012001900000000c0000613d0000008001000039000000400010043f0000000001000416000000000101004b0000000c0000c13d00000020010000390000010000100443000001200000044300000005010000410000000f0001042e000000000100001900000010000104300000000e000004320000000f0001042e0000001000010430000000000000000000000000000000000000000000000000000000020000000000000000000000000000004000000100000000000000000070112639c7e34f1bf3399838ce13c371627da9b05562e332f01cfd4dd9992c36"},"methodIdentifiers":{}},"irOptimized":"/// @use-src 4:\"contracts/simplestorage.sol\"\nobject \"SimpleStorage3_193\" {\n    code {\n        {\n            /// @src 4:416:441  \"contract SimpleStorage3{}\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            let _2 := datasize(\"SimpleStorage3_193_deployed\")\n            codecopy(_1, dataoffset(\"SimpleStorage3_193_deployed\"), _2)\n            return(_1, _2)\n        }\n    }\n    /// @use-src 4:\"contracts/simplestorage.sol\"\n    object \"SimpleStorage3_193_deployed\" {\n        code {\n            {\n                /// @src 4:416:441  \"contract SimpleStorage3{}\"\n                revert(0, 0)\n            }\n        }\n        data \".metadata\" hex\"a264697066735822122096538a9c3477a8fe615908887ffc080d55c492c08756042ada98b8828bf2961a64736f6c63430008180033\"\n    }\n}\n","hash":"01000007aed4cadcda601654571f637ee7617cd52146a192d4c1ed026092ebbf","factoryDependencies":{}},"Simple_Storage":{"abi":[{"inputs":[],"name":"favoriteNumber","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"retrieve","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_favoriteNumber","type":"uint256"}],"name":"store","outputs":[],"stateMutability":"nonpayable","type":"function"}],"metadata":{"optimizer_settings":{"is_debug_logging_enabled":false,"is_fallback_to_size_enabled":false,"is_system_request_memoization_disabled":false,"is_verify_each_enabled":false,"jump_table_density_threshold":null,"level_back_end":"Aggressive","level_middle_end":"Aggressive","level_middle_end_size":"Zero"},"solc_metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"favoriteNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_favoriteNumber\",\"type\":\"uint256\"}],\"name\":\"store\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/simplestorage.sol\":\"Simple_Storage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOcmu\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/simplestorage.sol\":{\"keccak256\":\"0x778286143f016fd5fc36df377dc02d2909a5628050972d26cc76fb97008da23f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0417ba045ebb02433e0e8852862c1da7f524ffadd4bd871fb1c2728fb25012d7\",\"dweb:/ipfs/QmZ1tX2MroMsastLjC9UN7obtQ4q6kSmR36vs5NJa6nHuR\"]}},\"version\":1}","solc_version":"0.8.24","solc_zkvm_edition":null,"zk_version":"1.4.1"},"evm":{"legacyAssembly":null,"assembly":"\t.text\n\t.file\t\"simplestorage.sol:Simple_Storage\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tadd\t128, r0, r3\n\tst.1\t64, r3\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_1\n\tsub.s!\t4, r3, r2\n\tjump.lt\t@.BB0_2\n\tld\tr1, r2\n\tshr.s\t224, r2, r2\n\tsub.s!\t@CPI0_2[0], r2, r4\n\tjump.eq\t@.BB0_8\n\tsub.s!\t@CPI0_3[0], r2, r4\n\tjump.eq\t@.BB0_10\n\tsub.s!\t@CPI0_4[0], r2, r1\n\tjump.ne\t@.BB0_2\n.BB0_8:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tsload\tr0, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_5[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_1:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_1[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_10:\n\tcontext.get_context_u128\tr2\n\tsub.s!\t36, r3, r3\n\tjump.lt\t@.BB0_2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tsstore\tr0, r1\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end0:\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_2:\n\t.cell 778358465\nCPI0_3:\n\t.cell 1616328221\nCPI0_4:\n\t.cell 1193245919\nCPI0_5:\n\t.cell 2535301202817642044428229017600\n","bytecode":{"object":"0000008003000039000000400030043f000000000301001900000060033002700000000c033001970000000102200190000000180000c13d000000040230008c0000002a0000413d000000000201043b000000e0022002700000000e0420009c000000110000613d0000000f0420009c000000200000613d000000100120009c0000002a0000c13d0000000001000416000000000101004b0000002a0000c13d000000000100041a000000800010043f00000011010000410000002d0001042e0000000001000416000000000101004b0000002a0000c13d0000002001000039000001000010044300000120000004430000000d010000410000002d0001042e0000000002000416000000240330008c0000002a0000413d000000000202004b0000002a0000c13d0000000401100370000000000101043b000000000010041b00000000010000190000002d0001042e00000000010000190000002e000104300000002c000004320000002d0001042e0000002e00010430000000000000000000000000000000000000000000000000000000000000000000000000ffffffff0000000200000000000000000000000000000040000001000000000000000000000000000000000000000000000000000000000000000000000000002e64cec1000000000000000000000000000000000000000000000000000000006057361d00000000000000000000000000000000000000000000000000000000471f7cdf00000000000000000000000000000000000000200000008000000000000000008c6e5d44601cd4ee7c4a7345b101e097f757cfc844cd1afe8d96cdcadf69b30c"},"methodIdentifiers":{"favoriteNumber()":"471f7cdf","retrieve()":"2e64cec1","store(uint256)":"6057361d"}},"irOptimized":"/// @use-src 4:\"contracts/simplestorage.sol\"\nobject \"Simple_Storage_190\" {\n    code {\n        {\n            /// @src 4:62:356  \"contract Simple_Storage{...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            let _2 := datasize(\"Simple_Storage_190_deployed\")\n            codecopy(_1, dataoffset(\"Simple_Storage_190_deployed\"), _2)\n            return(_1, _2)\n        }\n    }\n    /// @use-src 4:\"contracts/simplestorage.sol\"\n    object \"Simple_Storage_190_deployed\" {\n        code {\n            {\n                /// @src 4:62:356  \"contract Simple_Storage{...\"\n                let _1 := memoryguard(0x80)\n                mstore(64, _1)\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let _2 := 0\n                    switch shr(224, calldataload(_2))\n                    case 0x2e64cec1 {\n                        if callvalue() { revert(_2, _2) }\n                        if slt(add(calldatasize(), not(3)), _2) { revert(_2, _2) }\n                        mstore(_1, sload(_2))\n                        return(_1, 32)\n                    }\n                    case 0x471f7cdf {\n                        if callvalue() { revert(_2, _2) }\n                        if slt(add(calldatasize(), not(3)), _2) { revert(_2, _2) }\n                        let _3 := sload(_2)\n                        let memPos := mload(64)\n                        mstore(memPos, _3)\n                        return(memPos, 32)\n                    }\n                    case 0x6057361d {\n                        if callvalue() { revert(_2, _2) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_2, _2) }\n                        sstore(_2, calldataload(4))\n                        return(_2, _2)\n                    }\n                }\n                revert(0, 0)\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220d5be0b5b23e0d1871acb283d7d2d0c2b2a7a9a11f03c3f833f6db82bfc071d5c64736f6c63430008180033\"\n    }\n}\n","hash":"010000132184cf52d59dcdc0e42f957c52a8f690c03f31723e4f1cb3366e7d59","factoryDependencies":{}}},"contracts/storagefactory.sol":{"storagefactory":{"abi":[{"inputs":[],"name":"createsimplestoragecontract","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"mysimplestorage","outputs":[{"internalType":"contract Simple_Storage","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"metadata":{"optimizer_settings":{"is_debug_logging_enabled":false,"is_fallback_to_size_enabled":false,"is_system_request_memoization_disabled":false,"is_verify_each_enabled":false,"jump_table_density_threshold":null,"level_back_end":"Aggressive","level_middle_end":"Aggressive","level_middle_end_size":"Zero"},"solc_metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"createsimplestoragecontract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mysimplestorage\",\"outputs\":[{\"internalType\":\"contract Simple_Storage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/storagefactory.sol\":\"storagefactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOcmu\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/simplestorage.sol\":{\"keccak256\":\"0x778286143f016fd5fc36df377dc02d2909a5628050972d26cc76fb97008da23f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0417ba045ebb02433e0e8852862c1da7f524ffadd4bd871fb1c2728fb25012d7\",\"dweb:/ipfs/QmZ1tX2MroMsastLjC9UN7obtQ4q6kSmR36vs5NJa6nHuR\"]},\"contracts/storagefactory.sol\":{\"keccak256\":\"0x8f9f12c4ac855b8d399fba4290b7b01b8622e80f28eac2ba60b456575fee9c5a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3a3be2d50fb1ce36b9a61c6741671bd2b008ae7ab67e3d8f834738e59690a068\",\"dweb:/ipfs/QmfXAWJEGAmagedBjAKFAETkinZhfehAa9pUTtgiE29k3u\"]}},\"version\":1}","solc_version":"0.8.24","solc_zkvm_edition":null,"zk_version":"1.4.1"},"evm":{"legacyAssembly":null,"assembly":"\t.text\n\t.file\t\"storagefactory.sol:storagefactory\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r3, stack[@ptr_return_data]\n\tadd\t128, r0, r4\n\tst.1\t64, r4\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_1\n\tsub.s!\t4, r3, r2\n\tjump.lt\t@.BB0_2\n\tld\tr1, r1\n\tshr.s\t224, r1, r1\n\tsub.s!\t@CPI0_2[0], r1, r2\n\tjump.eq\t@.BB0_9\n\tsub.s!\t@CPI0_3[0], r1, r1\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tsload\tr0, r1\n\tand\t@CPI0_7[0], r1, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_9[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_1:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_1[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_9:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t@CPI0_4[0], r0, r1\n\tst.1\t164, r1\n\tcontext.gas_left\tr1\n\tadd\t@CPI0_5[0], r0, r2\n\tst.1\t128, r2\n\tst.1\t132, r0\n\tadd\t96, r0, r2\n\tst.1\t196, r2\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_6[0], r1, r1\n\tst.1\t228, r0\n\tadd\t32774, r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_10\n\tld\tr1, r1\n\tsub!\tr1, r0, r2\n\tjump.ne\t@.BB0_14\n\tptr.add\tstack[@ptr_return_data], r0, r1\n\tadd\tstack[@returndatasize], r0, r2\n\tjump\t@.BB0_15\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_10:\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tadd\tr1, r0, r2\n\tshr.s\t96, r2, r2\n\tand\t@CPI0_0[0], r2, stack[@returndatasize]\n\tand\t@CPI0_0[0], r2, r2\n.BB0_15:\n\tld.1\t64, r3\n\tand\t31, r2, r4\n\tshr.s!\t5, r2, r5\n\tjump.eq\t@.BB0_20\n\tadd\tr0, r0, r6\n.BB0_17:\n\tshl.s\t5, r6, r7\n\tadd\tr3, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_17\n.BB0_20:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_19\n\tshl.s\t5, r5, r5\n\tptr.add\tr1, r5, r1\n\tadd\tr3, r5, r5\n\tshl.s\t3, r4, r4\n\tld.1\tr5, r6\n\tshl\tr6, r4, r6\n\tshr\tr6, r4, r6\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r6, r1\n\tst.1\tr5, r1\n.BB0_19:\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr1, r0, r3\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr1, r0, r2\n\tshl.s\t96, r2, r1\n\tshl.s\t64, r3, r2\n\tor\tr2, r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_14:\n\tand\t@CPI0_7[0], r1, r1\n\tsload\tr0, r2\n\tand\t@CPI0_8[0], r2, r2\n\tor\tr2, r1, r1\n\tsstore\tr0, r1\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.func_end0:\n\n__farcall:\n.func_begin1:\n.tmp0:\n\tfar_call\tr1, r2, @.BB1_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB1_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end1:\n\n\t.data\n\t.p2align\t5, 0x0\nreturndatasize:\n\t.cell 0\n\n\t.p2align\t5, 0x0\nptr_return_data:\n.cell\t0\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_2:\n\t.cell 3846804723\nCPI0_3:\n\t.cell 1197572655\nCPI0_4:\n\t.cell 452313364352193495824830529263390820532236090554555238459665484723478494553\nCPI0_5:\n\t.cell -45094662312588414058508742492242807367897819822786606328124609013070528553987\nCPI0_6:\n\t.cell 904625697166532776746648320380374280103671765658434360802338178844445376512\nCPI0_7:\n\t.cell 1461501637330902918203684832716283019655932542975\nCPI0_8:\n\t.cell -1461501637330902918203684832716283019655932542976\nCPI0_9:\n\t.cell 2535301202817642044428229017600\n","bytecode":{"object":"0002000000000002000000000301001900000060033002700000001e0330019700010000003103550000008004000039000000400040043f0000000102200190000000190000c13d000000040230008c0000003c0000413d000000000101043b000000e001100270000000200210009c000000210000613d000000210110009c0000003c0000c13d0000000001000416000000000101004b0000003c0000c13d000000000100041a0000002501100197000000800010043f0000002701000041000000750001042e0000000001000416000000000101004b0000003c0000c13d0000002001000039000001000010044300000120000004430000001f01000041000000750001042e0000000001000416000000000101004b0000003c0000c13d0000002201000041000000a40010043f00000000010004140000002302000041000000800020043f000000840000043f0000006002000039000000c40020043f0000001e020000410000001e0310009c0000000001028019000000c00110021000000024011001c7000000e40000043f00008006020000390074006f0000040f00000001022001900000003e0000613d000000000101043b000000000201004b000000680000c13d00000001010003670000000002000031000000430000013d000000000100001900000076000104300001000000010355000000000201001900000060022002700000001e0020019d0000001e02200197000000400300043d0000001f0420018f0000000505200272000000500000613d000000000600001900000005076002100000000008730019000000000771034f000000000707043b00000000007804350000000106600039000000000756004b000000480000413d000000000604004b0000005f0000613d0000000505500210000000000151034f00000000055300190000000304400210000000000605043300000000064601cf000000000646022f000000000101043b0000010004400089000000000141022f00000000014101cf000000000161019f00000000001504350000001e010000410000001e0430009c00000000030180190000001e0420009c000000000201801900000060012002100000004002300210000000000112019f00000076000104300000002501100197000000000200041a0000002602200197000000000112019f000000000010041b0000000001000019000000750001042e00000072002104210000000102000039000000000001042d0000000002000019000000000001042d0000007400000432000000750001042e0000007600010430000000000000000000000000000000000000000000000000000000000000000000000000ffffffff000000020000000000000000000000000000004000000100000000000000000000000000000000000000000000000000000000000000000000000000e54994f3000000000000000000000000000000000000000000000000000000004761822f010000132184cf52d59dcdc0e42f957c52a8f690c03f31723e4f1cb3366e7d599c4d535bdea7cd8a978f128b93471df48c7dbab89d703809115bdc118c235bfd0200000000000000000000000000000000000084000000800000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000020000000800000000000000000af03009325eb9cfa94a54f179c94891391ed89832b4aca5797ab79faf0dacd8a"},"methodIdentifiers":{"createsimplestoragecontract()":"e54994f3","mysimplestorage()":"4761822f"}},"irOptimized":"/// @use-src 5:\"contracts/storagefactory.sol\"\nobject \"storagefactory_213\" {\n    code {\n        {\n            /// @src 5:350:608  \"contract storagefactory{...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            let _2 := datasize(\"storagefactory_213_deployed\")\n            codecopy(_1, dataoffset(\"storagefactory_213_deployed\"), _2)\n            return(_1, _2)\n        }\n    }\n    /// @use-src 5:\"contracts/storagefactory.sol\"\n    object \"storagefactory_213_deployed\" {\n        code {\n            {\n                /// @src 5:350:608  \"contract storagefactory{...\"\n                let _1 := memoryguard(0x80)\n                mstore(64, _1)\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let _2 := 0\n                    switch shr(224, calldataload(_2))\n                    case 0x4761822f {\n                        if callvalue() { revert(_2, _2) }\n                        if slt(add(calldatasize(), not(3)), _2) { revert(_2, _2) }\n                        mstore(_1, and(sload(_2), sub(shl(160, 1), 1)))\n                        return(_1, 32)\n                    }\n                    case 0xe54994f3 {\n                        if callvalue() { revert(_2, _2) }\n                        if slt(add(calldatasize(), not(3)), _2) { revert(_2, _2) }\n                        /// @src 5:569:589  \"new Simple_Storage()\"\n                        let _3 := /** @src 5:350:608  \"contract storagefactory{...\" */ mload(64)\n                        /// @src 5:569:589  \"new Simple_Storage()\"\n                        let _4 := datasize(\"Simple_Storage_190\")\n                        let _5 := add(_3, _4)\n                        if or(gt(_5, 0xffffffffffffffff), lt(_5, _3))\n                        {\n                            /// @src 5:350:608  \"contract storagefactory{...\"\n                            mstore(_2, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(_2, 0x24)\n                        }\n                        /// @src 5:569:589  \"new Simple_Storage()\"\n                        datacopy(_3, dataoffset(\"Simple_Storage_190\"), _4)\n                        let expr_address := create(/** @src 5:350:608  \"contract storagefactory{...\" */ _2, /** @src 5:569:589  \"new Simple_Storage()\" */ _3, sub(_5, _3))\n                        if iszero(expr_address)\n                        {\n                            /// @src 5:350:608  \"contract storagefactory{...\"\n                            let pos := mload(64)\n                            returndatacopy(pos, _2, returndatasize())\n                            revert(pos, returndatasize())\n                        }\n                        sstore(_2, or(and(sload(_2), shl(160, 0xffffffffffffffffffffffff)), and(expr_address, sub(shl(160, 1), 1))))\n                        return(_2, _2)\n                    }\n                }\n                revert(0, 0)\n            }\n        }\n        /// @use-src 4:\"contracts/simplestorage.sol\"\n        object \"Simple_Storage_190\" {\n            code {\n                {\n                    /// @src 4:62:356  \"contract Simple_Storage{...\"\n                    let _1 := memoryguard(0x80)\n                    mstore(64, _1)\n                    if callvalue() { revert(0, 0) }\n                    let _2 := datasize(\"Simple_Storage_190_deployed\")\n                    codecopy(_1, dataoffset(\"Simple_Storage_190_deployed\"), _2)\n                    return(_1, _2)\n                }\n            }\n            /// @use-src 4:\"contracts/simplestorage.sol\"\n            object \"Simple_Storage_190_deployed\" {\n                code {\n                    {\n                        /// @src 4:62:356  \"contract Simple_Storage{...\"\n                        let _1 := memoryguard(0x80)\n                        mstore(64, _1)\n                        if iszero(lt(calldatasize(), 4))\n                        {\n                            let _2 := 0\n                            switch shr(224, calldataload(_2))\n                            case 0x2e64cec1 {\n                                if callvalue() { revert(_2, _2) }\n                                if slt(add(calldatasize(), not(3)), _2) { revert(_2, _2) }\n                                mstore(_1, sload(_2))\n                                return(_1, 32)\n                            }\n                            case 0x471f7cdf {\n                                if callvalue() { revert(_2, _2) }\n                                if slt(add(calldatasize(), not(3)), _2) { revert(_2, _2) }\n                                let _3 := sload(_2)\n                                let memPos := mload(64)\n                                mstore(memPos, _3)\n                                return(memPos, 32)\n                            }\n                            case 0x6057361d {\n                                if callvalue() { revert(_2, _2) }\n                                if slt(add(calldatasize(), not(3)), 32) { revert(_2, _2) }\n                                sstore(_2, calldataload(4))\n                                return(_2, _2)\n                            }\n                        }\n                        revert(0, 0)\n                    }\n                }\n                data \".metadata\" hex\"a2646970667358221220d5be0b5b23e0d1871acb283d7d2d0c2b2a7a9a11f03c3f833f6db82bfc071d5c64736f6c63430008180033\"\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220a669b46c2035b9683448ca7dd0ddd3865069c95a93eafc2169e21dbca485effd64736f6c63430008180033\"\n    }\n}\n","hash":"01000029199fe3a1c6da36485f507cbbcc86e19854b4cc61866287c693888a98","factoryDependencies":{"010000132184cf52d59dcdc0e42f957c52a8f690c03f31723e4f1cb3366e7d59":"contracts/simplestorage.sol:Simple_Storage"}}}}}}