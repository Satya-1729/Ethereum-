{"id":"53e5567749088c67af6d25c0afe60c47","_format":"hh-sol-build-info-1","solcVersion":"0.8.24","solcLongVersion":"0.8.24+commit.e11b9ed9","input":{"language":"Solidity","sources":{"contracts/array.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.24;\r\n\r\ncontract Array{\r\n    uint256 myfavoritenumber;\r\n\r\n    struct person{\r\n        uint256 favoritenumber;\r\n        string name;\r\n    }\r\n    \r\n    /*uint256[] listOfpeople : this is an dynamic array and if we want to convert it into \r\n    static we need to put some number into those square bracket*/\r\n\r\n      \r\n    // person public pat = person(7,\"pat\");\r\n    // person public mathew = person(9,\"mathew\");\r\n    // person public jon = person(11,\"jon\");\r\n\r\n    person[] public listofpeople ; //[]\r\n\r\n    function addperson(string memory _name, uint256 _favoritenumber) public {\r\n        listofpeople.push(person(_favoritenumber,_name));\r\n    }\r\n}"},"contracts/exercise_on_array.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.24;\r\n\r\n/*Create a smart contract that can store and view a list of animals. Add manually\r\nthree (3) animals and give the possibility to the user to manually add an \r\nindefinite number of animals into the smart contract.*/\r\n\r\n\r\ncontract Animal{\r\n    // string[3] public listofmyanimals ;\r\n\r\n    string[] public listofanimals =  [\"cat\",\"cow\",\"zebra\"];\r\n    \r\n    function addAnimal(string memory _Animal) public {\r\n        listofanimals.push(_Animal);\r\n        \r\n     }\r\n\r\n    function retrieve () public view returns(string[] memory) {\r\n        return listofanimals;\r\n    }\r\n}"},"contracts/mapping.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.24;\r\n\r\ncontract Mapping{\r\n    uint256 myfavoritenumber;\r\n\r\n    struct person{\r\n        uint256 favoritenumber;\r\n        string name;\r\n    }\r\n\r\n    mapping(uint256 => string) public favoritenumbertoname;\r\n    \r\n\r\n\r\n    person[] public listofpeople ; //[]\r\n\r\n    function addperson(string memory _name, uint256 _favoritenumber) public {\r\n        listofpeople.push(person(_favoritenumber,_name));\r\n        favoritenumbertoname[_favoritenumber] = _name;\r\n    \r\n    }\r\n\r\n    function getarraylength() public view returns(uint256){\r\n        return listofpeople.length;\r\n    }\r\n}"},"contracts/simplestorage.sol":{"content":"\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.24;\r\n\r\ncontract Simple_Storage{\r\n    uint256 public favoriteNumber;\r\n\r\n    function store(uint256 _favoriteNumber) public {\r\n        favoriteNumber=_favoriteNumber;\r\n    }\r\n\r\n    // view pure\r\n    function retrieve() public view returns (uint256){\r\n        return favoriteNumber;\r\n        \r\n\r\n    }\r\n}\r\n"}},"settings":{"evmVersion":"paris","optimizer":{"enabled":true,"mode":"3"},"outputSelection":{"*":{"*":["abi","evm.methodIdentifiers","metadata"],"":["ast"]}},"libraries":{}}},"output":{"errors":[],"version":"0.8.24","long_version":"0.8.24+commit.e11b9ed9.Linux.g++","zk_version":"1.4.0","sources":{"contracts/array.sol":{"id":0,"ast":{"absolutePath":"contracts/array.sol","exportedSymbols":{"Array":[30]},"id":31,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","0.8",".24"],"nodeType":"PragmaDirective","src":"33:23:0"},{"abstract":false,"baseContracts":[],"canonicalName":"Array","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":30,"linearizedBaseContracts":[30],"name":"Array","nameLocation":"69:5:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":3,"mutability":"mutable","name":"myfavoritenumber","nameLocation":"89:16:0","nodeType":"VariableDeclaration","scope":30,"src":"81:24:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2,"name":"uint256","nodeType":"ElementaryTypeName","src":"81:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"canonicalName":"Array.person","id":8,"members":[{"constant":false,"id":5,"mutability":"mutable","name":"favoritenumber","nameLocation":"146:14:0","nodeType":"VariableDeclaration","scope":8,"src":"138:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4,"name":"uint256","nodeType":"ElementaryTypeName","src":"138:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7,"mutability":"mutable","name":"name","nameLocation":"178:4:0","nodeType":"VariableDeclaration","scope":8,"src":"171:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":6,"name":"string","nodeType":"ElementaryTypeName","src":"171:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"person","nameLocation":"121:6:0","nodeType":"StructDefinition","scope":30,"src":"114:76:0","visibility":"public"},{"constant":false,"functionSelector":"bf119bdb","id":12,"mutability":"mutable","name":"listofpeople","nameLocation":"531:12:0","nodeType":"VariableDeclaration","scope":30,"src":"515:28:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_person_$8_storage_$dyn_storage","typeString":"struct Array.person[]"},"typeName":{"baseType":{"id":10,"nodeType":"UserDefinedTypeName","pathNode":{"id":9,"name":"person","nameLocations":["515:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":8,"src":"515:6:0"},"referencedDeclaration":8,"src":"515:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_person_$8_storage_ptr","typeString":"struct Array.person"}},"id":11,"nodeType":"ArrayTypeName","src":"515:8:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_person_$8_storage_$dyn_storage_ptr","typeString":"struct Array.person[]"}},"visibility":"public"},{"body":{"id":28,"nodeType":"Block","src":"630:67:0","statements":[{"expression":{"arguments":[{"arguments":[{"id":23,"name":"_favoritenumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":16,"src":"666:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":24,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":14,"src":"682:5:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":22,"name":"person","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"659:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_person_$8_storage_ptr_$","typeString":"type(struct Array.person storage pointer)"}},"id":25,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"659:29:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_person_$8_memory_ptr","typeString":"struct Array.person memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_person_$8_memory_ptr","typeString":"struct Array.person memory"}],"expression":{"id":19,"name":"listofpeople","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":12,"src":"641:12:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_person_$8_storage_$dyn_storage","typeString":"struct Array.person storage ref[] storage ref"}},"id":21,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"654:4:0","memberName":"push","nodeType":"MemberAccess","src":"641:17:0","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_struct$_person_$8_storage_$dyn_storage_ptr_$_t_struct$_person_$8_storage_$returns$__$attached_to$_t_array$_t_struct$_person_$8_storage_$dyn_storage_ptr_$","typeString":"function (struct Array.person storage ref[] storage pointer,struct Array.person storage ref)"}},"id":26,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"641:48:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":27,"nodeType":"ExpressionStatement","src":"641:48:0"}]},"functionSelector":"e1b3202a","id":29,"implemented":true,"kind":"function","modifiers":[],"name":"addperson","nameLocation":"567:9:0","nodeType":"FunctionDefinition","parameters":{"id":17,"nodeType":"ParameterList","parameters":[{"constant":false,"id":14,"mutability":"mutable","name":"_name","nameLocation":"591:5:0","nodeType":"VariableDeclaration","scope":29,"src":"577:19:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":13,"name":"string","nodeType":"ElementaryTypeName","src":"577:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":16,"mutability":"mutable","name":"_favoritenumber","nameLocation":"606:15:0","nodeType":"VariableDeclaration","scope":29,"src":"598:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":15,"name":"uint256","nodeType":"ElementaryTypeName","src":"598:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"576:46:0"},"returnParameters":{"id":18,"nodeType":"ParameterList","parameters":[],"src":"630:0:0"},"scope":30,"src":"558:139:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":31,"src":"60:640:0","usedErrors":[],"usedEvents":[]}],"src":"33:667:0"}},"contracts/exercise_on_array.sol":{"id":1,"ast":{"absolutePath":"contracts/exercise_on_array.sol","exportedSymbols":{"Animal":[61]},"id":62,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":32,"literals":["solidity","0.8",".24"],"nodeType":"PragmaDirective","src":"33:23:1"},{"abstract":false,"baseContracts":[],"canonicalName":"Animal","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":61,"linearizedBaseContracts":[61],"name":"Animal","nameLocation":"289:6:1","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"6568cad1","id":39,"mutability":"mutable","name":"listofanimals","nameLocation":"363:13:1","nodeType":"VariableDeclaration","scope":61,"src":"347:54:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage","typeString":"string[]"},"typeName":{"baseType":{"id":33,"name":"string","nodeType":"ElementaryTypeName","src":"347:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":34,"nodeType":"ArrayTypeName","src":"347:8:1","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"value":{"components":[{"hexValue":"636174","id":35,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"381:5:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_52763589e772702fa7977a28b3cfb6ca534f0208a2b2d55f7558af664eac478a","typeString":"literal_string \"cat\""},"value":"cat"},{"hexValue":"636f77","id":36,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"387:5:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_c85ef7d79691fe79573b1a7064c19c1a9819ebdbd1faaab1a8ec92344438aaf4","typeString":"literal_string \"cow\""},"value":"cow"},{"hexValue":"7a65627261","id":37,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"393:7:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_82ea072ac2798ae55f5b753a5ca18301f7783fca8f09479c7ff5ba37e94deaca","typeString":"literal_string \"zebra\""},"value":"zebra"}],"id":38,"isConstant":false,"isInlineArray":true,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"380:21:1","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$3_memory_ptr","typeString":"string memory[3] memory"}},"visibility":"public"},{"body":{"id":50,"nodeType":"Block","src":"463:57:1","statements":[{"expression":{"arguments":[{"id":47,"name":"_Animal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":41,"src":"493:7:1","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":44,"name":"listofanimals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":39,"src":"474:13:1","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage","typeString":"string storage ref[] storage ref"}},"id":46,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"488:4:1","memberName":"push","nodeType":"MemberAccess","src":"474:18:1","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_string_storage_$dyn_storage_ptr_$_t_string_storage_$returns$__$attached_to$_t_array$_t_string_storage_$dyn_storage_ptr_$","typeString":"function (string storage ref[] storage pointer,string storage ref)"}},"id":48,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"474:27:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":49,"nodeType":"ExpressionStatement","src":"474:27:1"}]},"functionSelector":"5139bfff","id":51,"implemented":true,"kind":"function","modifiers":[],"name":"addAnimal","nameLocation":"423:9:1","nodeType":"FunctionDefinition","parameters":{"id":42,"nodeType":"ParameterList","parameters":[{"constant":false,"id":41,"mutability":"mutable","name":"_Animal","nameLocation":"447:7:1","nodeType":"VariableDeclaration","scope":51,"src":"433:21:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":40,"name":"string","nodeType":"ElementaryTypeName","src":"433:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"432:23:1"},"returnParameters":{"id":43,"nodeType":"ParameterList","parameters":[],"src":"463:0:1"},"scope":61,"src":"414:106:1","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":59,"nodeType":"Block","src":"586:39:1","statements":[{"expression":{"id":57,"name":"listofanimals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":39,"src":"604:13:1","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage","typeString":"string storage ref[] storage ref"}},"functionReturnParameters":56,"id":58,"nodeType":"Return","src":"597:20:1"}]},"functionSelector":"2e64cec1","id":60,"implemented":true,"kind":"function","modifiers":[],"name":"retrieve","nameLocation":"537:8:1","nodeType":"FunctionDefinition","parameters":{"id":52,"nodeType":"ParameterList","parameters":[],"src":"546:2:1"},"returnParameters":{"id":56,"nodeType":"ParameterList","parameters":[{"constant":false,"id":55,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":60,"src":"569:15:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":53,"name":"string","nodeType":"ElementaryTypeName","src":"569:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":54,"nodeType":"ArrayTypeName","src":"569:8:1","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"}],"src":"568:17:1"},"scope":61,"src":"528:97:1","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":62,"src":"280:348:1","usedErrors":[],"usedEvents":[]}],"src":"33:595:1"}},"contracts/mapping.sol":{"id":2,"ast":{"absolutePath":"contracts/mapping.sol","exportedSymbols":{"Mapping":[111]},"id":112,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":63,"literals":["solidity","0.8",".24"],"nodeType":"PragmaDirective","src":"33:23:2"},{"abstract":false,"baseContracts":[],"canonicalName":"Mapping","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":111,"linearizedBaseContracts":[111],"name":"Mapping","nameLocation":"69:7:2","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":65,"mutability":"mutable","name":"myfavoritenumber","nameLocation":"91:16:2","nodeType":"VariableDeclaration","scope":111,"src":"83:24:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":64,"name":"uint256","nodeType":"ElementaryTypeName","src":"83:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"canonicalName":"Mapping.person","id":70,"members":[{"constant":false,"id":67,"mutability":"mutable","name":"favoritenumber","nameLocation":"148:14:2","nodeType":"VariableDeclaration","scope":70,"src":"140:22:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":66,"name":"uint256","nodeType":"ElementaryTypeName","src":"140:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":69,"mutability":"mutable","name":"name","nameLocation":"180:4:2","nodeType":"VariableDeclaration","scope":70,"src":"173:11:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":68,"name":"string","nodeType":"ElementaryTypeName","src":"173:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"person","nameLocation":"123:6:2","nodeType":"StructDefinition","scope":111,"src":"116:76:2","visibility":"public"},{"constant":false,"functionSelector":"8c1edb90","id":74,"mutability":"mutable","name":"favoritenumbertoname","nameLocation":"234:20:2","nodeType":"VariableDeclaration","scope":111,"src":"200:54:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string)"},"typeName":{"id":73,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":71,"name":"uint256","nodeType":"ElementaryTypeName","src":"208:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"200:26:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":72,"name":"string","nodeType":"ElementaryTypeName","src":"219:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"visibility":"public"},{"constant":false,"functionSelector":"bf119bdb","id":78,"mutability":"mutable","name":"listofpeople","nameLocation":"287:12:2","nodeType":"VariableDeclaration","scope":111,"src":"271:28:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_person_$70_storage_$dyn_storage","typeString":"struct Mapping.person[]"},"typeName":{"baseType":{"id":76,"nodeType":"UserDefinedTypeName","pathNode":{"id":75,"name":"person","nameLocations":["271:6:2"],"nodeType":"IdentifierPath","referencedDeclaration":70,"src":"271:6:2"},"referencedDeclaration":70,"src":"271:6:2","typeDescriptions":{"typeIdentifier":"t_struct$_person_$70_storage_ptr","typeString":"struct Mapping.person"}},"id":77,"nodeType":"ArrayTypeName","src":"271:8:2","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_person_$70_storage_$dyn_storage_ptr","typeString":"struct Mapping.person[]"}},"visibility":"public"},{"body":{"id":100,"nodeType":"Block","src":"386:129:2","statements":[{"expression":{"arguments":[{"arguments":[{"id":89,"name":"_favoritenumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":82,"src":"422:15:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":90,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"438:5:2","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":88,"name":"person","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":70,"src":"415:6:2","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_person_$70_storage_ptr_$","typeString":"type(struct Mapping.person storage pointer)"}},"id":91,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"415:29:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_person_$70_memory_ptr","typeString":"struct Mapping.person memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_person_$70_memory_ptr","typeString":"struct Mapping.person memory"}],"expression":{"id":85,"name":"listofpeople","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":78,"src":"397:12:2","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_person_$70_storage_$dyn_storage","typeString":"struct Mapping.person storage ref[] storage ref"}},"id":87,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"410:4:2","memberName":"push","nodeType":"MemberAccess","src":"397:17:2","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_struct$_person_$70_storage_$dyn_storage_ptr_$_t_struct$_person_$70_storage_$returns$__$attached_to$_t_array$_t_struct$_person_$70_storage_$dyn_storage_ptr_$","typeString":"function (struct Mapping.person storage ref[] storage pointer,struct Mapping.person storage ref)"}},"id":92,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"397:48:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":93,"nodeType":"ExpressionStatement","src":"397:48:2"},{"expression":{"id":98,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":94,"name":"favoritenumbertoname","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":74,"src":"456:20:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string storage ref)"}},"id":96,"indexExpression":{"id":95,"name":"_favoritenumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":82,"src":"477:15:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"456:37:2","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":97,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"496:5:2","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"456:45:2","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":99,"nodeType":"ExpressionStatement","src":"456:45:2"}]},"functionSelector":"e1b3202a","id":101,"implemented":true,"kind":"function","modifiers":[],"name":"addperson","nameLocation":"323:9:2","nodeType":"FunctionDefinition","parameters":{"id":83,"nodeType":"ParameterList","parameters":[{"constant":false,"id":80,"mutability":"mutable","name":"_name","nameLocation":"347:5:2","nodeType":"VariableDeclaration","scope":101,"src":"333:19:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":79,"name":"string","nodeType":"ElementaryTypeName","src":"333:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":82,"mutability":"mutable","name":"_favoritenumber","nameLocation":"362:15:2","nodeType":"VariableDeclaration","scope":101,"src":"354:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":81,"name":"uint256","nodeType":"ElementaryTypeName","src":"354:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"332:46:2"},"returnParameters":{"id":84,"nodeType":"ParameterList","parameters":[],"src":"386:0:2"},"scope":111,"src":"314:201:2","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":109,"nodeType":"Block","src":"577:45:2","statements":[{"expression":{"expression":{"id":106,"name":"listofpeople","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":78,"src":"595:12:2","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_person_$70_storage_$dyn_storage","typeString":"struct Mapping.person storage ref[] storage ref"}},"id":107,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"608:6:2","memberName":"length","nodeType":"MemberAccess","src":"595:19:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":105,"id":108,"nodeType":"Return","src":"588:26:2"}]},"functionSelector":"5801afa5","id":110,"implemented":true,"kind":"function","modifiers":[],"name":"getarraylength","nameLocation":"532:14:2","nodeType":"FunctionDefinition","parameters":{"id":102,"nodeType":"ParameterList","parameters":[],"src":"546:2:2"},"returnParameters":{"id":105,"nodeType":"ParameterList","parameters":[{"constant":false,"id":104,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":110,"src":"569:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":103,"name":"uint256","nodeType":"ElementaryTypeName","src":"569:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"568:9:2"},"scope":111,"src":"523:99:2","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":112,"src":"60:565:2","usedErrors":[],"usedEvents":[]}],"src":"33:592:2"}},"contracts/simplestorage.sol":{"id":3,"ast":{"absolutePath":"contracts/simplestorage.sol","exportedSymbols":{"Simple_Storage":[134]},"id":135,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":113,"literals":["solidity","0.8",".24"],"nodeType":"PragmaDirective","src":"35:23:3"},{"abstract":false,"baseContracts":[],"canonicalName":"Simple_Storage","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":134,"linearizedBaseContracts":[134],"name":"Simple_Storage","nameLocation":"71:14:3","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"471f7cdf","id":115,"mutability":"mutable","name":"favoriteNumber","nameLocation":"107:14:3","nodeType":"VariableDeclaration","scope":134,"src":"92:29:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":114,"name":"uint256","nodeType":"ElementaryTypeName","src":"92:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"body":{"id":124,"nodeType":"Block","src":"177:49:3","statements":[{"expression":{"id":122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":120,"name":"favoriteNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":115,"src":"188:14:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":121,"name":"_favoriteNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":117,"src":"203:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"188:30:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":123,"nodeType":"ExpressionStatement","src":"188:30:3"}]},"functionSelector":"6057361d","id":125,"implemented":true,"kind":"function","modifiers":[],"name":"store","nameLocation":"139:5:3","nodeType":"FunctionDefinition","parameters":{"id":118,"nodeType":"ParameterList","parameters":[{"constant":false,"id":117,"mutability":"mutable","name":"_favoriteNumber","nameLocation":"153:15:3","nodeType":"VariableDeclaration","scope":125,"src":"145:23:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":116,"name":"uint256","nodeType":"ElementaryTypeName","src":"145:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"144:25:3"},"returnParameters":{"id":119,"nodeType":"ParameterList","parameters":[],"src":"177:0:3"},"scope":134,"src":"130:96:3","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":132,"nodeType":"Block","src":"301:52:3","statements":[{"expression":{"id":130,"name":"favoriteNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":115,"src":"319:14:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":129,"id":131,"nodeType":"Return","src":"312:21:3"}]},"functionSelector":"2e64cec1","id":133,"implemented":true,"kind":"function","modifiers":[],"name":"retrieve","nameLocation":"261:8:3","nodeType":"FunctionDefinition","parameters":{"id":126,"nodeType":"ParameterList","parameters":[],"src":"269:2:3"},"returnParameters":{"id":129,"nodeType":"ParameterList","parameters":[{"constant":false,"id":128,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":133,"src":"293:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":127,"name":"uint256","nodeType":"ElementaryTypeName","src":"293:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"292:9:3"},"scope":134,"src":"252:101:3","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":135,"src":"62:294:3","usedErrors":[],"usedEvents":[]}],"src":"35:323:3"}}},"contracts":{"contracts/array.sol":{"Array":{"abi":[{"inputs":[{"internalType":"string","name":"_name","type":"string"},{"internalType":"uint256","name":"_favoritenumber","type":"uint256"}],"name":"addperson","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"listofpeople","outputs":[{"internalType":"uint256","name":"favoritenumber","type":"uint256"},{"internalType":"string","name":"name","type":"string"}],"stateMutability":"view","type":"function"}],"metadata":{"optimizer_settings":{"is_debug_logging_enabled":false,"is_fallback_to_size_enabled":false,"is_system_request_memoization_disabled":false,"is_verify_each_enabled":false,"level_back_end":"Aggressive","level_middle_end":"Aggressive","level_middle_end_size":"Zero"},"solc_metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_favoritenumber\",\"type\":\"uint256\"}],\"name\":\"addperson\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listofpeople\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"favoritenumber\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/array.sol\":\"Array\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOcmu\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/array.sol\":{\"keccak256\":\"0x5fb4ee3ef06afa51184ac2affc90725922bc98922066bd6359bdcb79fa639a8e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cc72aff6a4fc7630bc707379aa4fb0bfff61f1ca56b236e449ac3588f3742174\",\"dweb:/ipfs/Qma1ip1uh7gjkz6WqhcbzHhKwKdV37LhtXemLJ5S2EtruP\"]}},\"version\":1}","solc_version":"0.8.24","solc_zkvm_edition":null,"zk_version":"1.4.0"},"evm":{"legacyAssembly":null,"assembly":"\t.text\n\t.file\t\"array.sol:Array\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[7]\n\tadd\t128, r0, r3\n\tst.1\t64, r3\n\tadd\tr1, r0, r4\n\tshr.s\t96, r4, r4\n\tand\t@CPI0_0[0], r4, r4\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_1\n\tsub.s!\t4, r4, r2\n\tjump.lt\t@.BB0_2\n\tld\tr1, r2\n\tshr.s\t224, r2, r2\n\tsub.s!\t@CPI0_2[0], r2, r5\n\tjump.eq\t@.BB0_26\n\tsub.s!\t@CPI0_3[0], r2, r2\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r4, r2\n\tsub.s!\t32, r2, r2\n\tjump.lt\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tadd\t1, r0, r2\n\tsload\tr2, r3\n\tsub!\tr1, r3, r3\n\tjump.ge\t@.BB0_2\n\tst.1\t0, r2\n\tshl.s\t1, r1, r4\n\tadd\t@CPI0_8[0], r4, r1\n\tsload\tr1, r2\n\tand!\t1, r2, r3\n\tshr.s\t1, r2, r5\n\tand\t127, r5, r6\n\tadd.ne\tr5, r0, r6\n\tadd\t@CPI0_7[0], r4, r4\n\tsub.s!\t31, r6, r5\n\tadd\t0, r0, r5\n\tadd.gt\t1, r0, r5\n\tand\t1, r5, r5\n\tsub!\tr3, r5, r5\n\tjump.eq\t@.BB0_13\n.BB0_11:\n\tadd\t@CPI0_12[0], r0, r1\n\tst.1\t0, r1\n\tadd\t34, r0, r1\n\tjump\t@.BB0_12\n.BB0_1:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_1[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_26:\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r4, r2\n\tsub.s!\t64, r2, r2\n\tjump.lt\t@.BB0_2\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r5\n\tsub.s!\t@CPI0_4[0], r5, r2\n\tjump.gt\t@.BB0_2\n\tadd\t35, r5, r2\n\tadd\t@CPI0_5[0], r0, r6\n\tsub!\tr2, r4, r7\n\tadd\tr0, r0, r7\n\tadd.ge\tr6, r0, r7\n\tand\t@CPI0_5[0], r2, r2\n\tsub!\tr2, r0, r8\n\tadd.ge\tr0, r0, r6\n\tsub.s!\t@CPI0_5[0], r2, r2\n\tadd.ne\tr7, r0, r6\n\tsub!\tr6, r0, r2\n\tjump.ne\t@.BB0_2\n\tadd\t4, r5, r6\n\tptr.add\tr1, r6, r2\n\tld\tr2, r2\n\tsub.s!\t@CPI0_4[0], r2, r7\n\tjump.gt\t@.BB0_15\n\tadd\t191, r2, r7\n\tsub.s\t32, r0, r10\n\tand\tr7, r10, r7\n\tsub.s!\t@CPI0_4[0], r7, r8\n\tjump.gt\t@.BB0_15\n\tst.1\t64, r7\n\tst.1\t128, r2\n\tadd\tr5, r2, r5\n\tadd\t36, r5, r5\n\tsub!\tr5, r4, r4\n\tjump.gt\t@.BB0_2\n\tadd\t32, r6, r4\n\tptr.add\tr1, r4, r4\n\tand\t31, r2, r5\n\tshr.s!\t5, r2, r6\n\tjump.eq\t@.BB0_58\n\tadd\tr0, r0, r7\n.BB0_35:\n\tshl.s\t5, r7, r8\n\tptr.add\tr4, r8, r9\n\tld\tr9, r9\n\tadd\t160, r8, r8\n\tst.1\tr8, r9\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_35\n.BB0_58:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_37\n\tshl.s\t5, r6, r6\n\tptr.add\tr4, r6, r4\n\tshl.s\t3, r5, r5\n\tadd\t160, r6, r6\n\tld.1\tr6, r7\n\tshl\tr7, r5, r7\n\tshr\tr7, r5, r7\n\tld\tr4, r4\n\tsub\t256, r5, r5\n\tshr\tr4, r5, r4\n\tshl\tr4, r5, r4\n\tor\tr4, r7, r4\n\tst.1\tr6, r4\n.BB0_37:\n\tadd\t160, r2, r2\n\tst.1\tr2, r0\n\tld.1\t64, r2\n\tsub.s!\t@CPI0_6[0], r2, r4\n\tjump.gt\t@.BB0_15\n\tadd\t64, r2, r4\n\tst.1\t64, r4\n\tptr.add.s\t36, r1, r1\n\tld\tr1, r1\n\tst.1.inc\tr2, r1, r1\n\tst.1\tr1, r3\n\tadd\t1, r0, r5\n\tsload\tr5, r3\n\tsub.s!\t@CPI0_4[0], r3, r4\n\tjump.gt\t@.BB0_15\n\tadd\t1, r3, r4\n\tsstore\tr5, r4\n\tst.1\t0, r5\n\tld.1\tr2, r2\n\tshl.s\t1, r3, r3\n\tadd\t@CPI0_7[0], r3, r4\n\tsstore\tr4, r2\n\tadd\t@CPI0_8[0], r3, r4\n\tld.1\tr1, r3\n\tld.1.inc\tr3, r6, r7\n\tsub.s!\t@CPI0_4[0], r6, r1\n\tjump.gt\t@.BB0_15\n\tsload\tr4, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r2\n\tand\t127, r2, r8\n\tadd.ne\tr2, r0, r8\n\tsub.s!\t31, r8, r2\n\tadd\t0, r0, r2\n\tadd.gt\t1, r0, r2\n\txor\tr1, r2, r1\n\tand!\t1, r1, r1\n\tjump.ne\t@.BB0_11\n\tadd\tr7, r0, stack-[1]\n\tadd\tr3, r0, stack-[4]\n\tadd\tr5, r0, stack-[2]\n\tadd\tr8, r0, stack-[3]\n\tsub.s!\t32, r8, r1\n\tadd\tr10, r0, stack-[6]\n\tadd\tr4, r0, stack-[5]\n\tadd\tr6, r0, stack-[7]\n\tjump.lt\t@.BB0_45\n\tst.1\t0, r4\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_9[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[7], r0, r6\n\tadd\t31, r6, r2\n\tshr.s\t5, r2, r2\n\tsub.s!\t32, r6, r3\n\tadd.lt\tr0, r0, r2\n\tld\tr1, r3\n\tadd\tstack-[3], r0, r1\n\tadd\t31, r1, r1\n\tshr.s\t5, r1, r1\n\tadd\tr3, r1, r1\n\tadd\tr3, r2, r2\n\tsub!\tr2, r1, r3\n\tadd\tstack-[5], r0, r4\n\tjump.ge\t@.BB0_45\n.BB0_46:\n\tsstore\tr2, r0\n\tadd\t1, r2, r2\n\tsub!\tr2, r1, r3\n\tjump.lt\t@.BB0_46\n.BB0_45:\n\tsub.s!\t31, r6, r1\n\tjump.le\t@.BB0_55\n\tst.1\t0, r4\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_9[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tadd\tstack-[6], r0, r2\n\tjump.eq\t@.BB0_2\n\tand!\tstack-[7], r2, r3\n\tadd\t32, r0, r2\n\tld\tr1, r1\n\tadd\tstack-[4], r0, r6\n\tjump.eq\t@.BB0_52\n\tadd\t32, r0, r2\n\tadd\tr0, r0, r4\n.BB0_51:\n\tadd\tr2, r6, r5\n\tld.1\tr5, r5\n\tsstore\tr1, r5\n\tadd\t32, r2, r2\n\tadd\t1, r1, r1\n\tadd\t32, r4, r4\n\tsub!\tr4, r3, r5\n\tjump.lt\t@.BB0_51\n.BB0_52:\n\tsub.s!\tstack-[7], r3, r3\n\tjump.ge\t@.BB0_54\n\tadd\tstack-[7], r0, r3\n\tshl.s\t3, r3, r3\n\tand\t248, r3, r3\n\tsub.s\t1, r0, r4\n\tshr\tr4, r3, r3\n\txor\tr3, r4, r3\n\tadd\tstack-[4], r2, r2\n\tld.1\tr2, r2\n\tand\tr2, r3, r2\n\tsstore\tr1, r2\n.BB0_54:\n\tadd\tstack-[7], r0, r1\n\tshl.s\t1, r1, r1\n\tadd\tstack-[2], r0, r2\n\tjump\t@.BB0_47\n.BB0_13:\n\tsload\tr4, r5\n\tst.1\t128, r6\n\tsub!\tr3, r0, r3\n\tjump.eq\t@.BB0_18\n\tadd\tr6, r0, stack-[6]\n\tadd\tr5, r0, stack-[7]\n\tst.1\t0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_9[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\t160, r0, r2\n\tadd\tstack-[6], r0, r6\n\tsub!\tr6, r0, r3\n\tadd\tstack-[7], r0, r5\n\tjump.eq\t@.BB0_16\n\tld\tr1, r1\n\tadd\tr0, r0, r3\n.BB0_22:\n\tadd\tr3, r0, r2\n\tsload\tr1, r3\n\tadd\t160, r2, r4\n\tst.1\tr4, r3\n\tadd\t1, r1, r1\n\tadd\t32, r2, r3\n\tsub!\tr3, r6, r4\n\tjump.lt\t@.BB0_22\n\tadd\t192, r2, r1\n\tjump\t@.BB0_14\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_18:\n\tsub.s\t256, r0, r1\n\tand\tr2, r1, r1\n\tst.1\t160, r1\n\tsub!\tr6, r0, r1\n\tadd\t192, r0, r1\n\tadd.eq\t160, r0, r1\n.BB0_14:\n\tadd\t31, r1, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r2\n\tadd\t@CPI0_10[0], r2, r1\n\tsub.s!\t@CPI0_11[0], r1, r1\n\tjump.gt\t@.BB0_16\n.BB0_15:\n\tadd\t@CPI0_12[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n.BB0_12:\n\tst.1\t4, r1\n\tadd\t@CPI0_13[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_16:\n\tst.1\t64, r2\n\tadd\t32, r2, r1\n\tadd\t64, r0, r3\n\tst.1\tr1, r3\n\tst.1\tr2, r5\n\tadd\t64, r2, r3\n\tld.1\t128, r1\n\tst.1\tr3, r1\n\tadd\t96, r2, r3\n\tsub!\tr1, r0, r4\n\tjump.eq\t@.BB0_25\n\tadd\tr0, r0, r4\n.BB0_24:\n\tadd\tr4, r3, r5\n\tadd\t160, r4, r6\n\tld.1\tr6, r6\n\tst.1\tr5, r6\n\tadd\t32, r4, r4\n\tsub!\tr4, r1, r5\n\tjump.lt\t@.BB0_24\n.BB0_25:\n\tadd\tr1, r3, r3\n\tst.1\tr3, r0\n\tadd\t127, r1, r1\n\tsub.s\t32, r0, r3\n\tand\tr1, r3, r1\n\tadd\t@CPI0_0[0], r0, r3\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t64, r2, r2\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_55:\n\tsub!\tstack-[7], r0, r1\n\tadd\tr0, r0, r1\n\tjump.eq\t@.BB0_57\n\tadd\tstack-[1], r0, r1\n\tld.1\tr1, r1\n.BB0_57:\n\tadd\tstack-[7], r0, r4\n\tshl.s\t3, r4, r2\n\tsub.s\t1, r0, r3\n\tshr\tr3, r2, r2\n\txor\tr2, r3, r2\n\tand\tr1, r2, r1\n\tshl.s\t1, r4, r2\n.BB0_47:\n\tor\tr1, r2, r1\n\tadd\tstack-[5], r0, r2\n\tsstore\tr2, r1\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.func_end0:\n\n__staticcall:\n.func_begin1:\n.tmp0:\n\tfar_call.static\tr1, r2, @.BB1_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB1_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end1:\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_2:\n\t.cell 3786612778\nCPI0_3:\n\t.cell 3205602267\nCPI0_4:\n\t.cell 18446744073709551615\nCPI0_5:\n\t.cell -57896044618658097711785492504343953926634992332820282019728792003956564819968\nCPI0_6:\n\t.cell 18446744073709551551\nCPI0_7:\n\t.cell -35707666377435648211887908874984608119992236509074197713628505308453184860938\nCPI0_8:\n\t.cell -35707666377435648211887908874984608119992236509074197713628505308453184860937\nCPI0_9:\n\t.cell 904625697166532776746648320380374280103671757735618107014721178055227736064\nCPI0_10:\n\t.cell -18446744073709551616\nCPI0_11:\n\t.cell -18446744073709551489\nCPI0_12:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_13:\n\t.cell 2852213850513516153367582212096\n","bytecode":{"object":"00070000000000020000008003000039000000400030043f00000000040100190000006004400270000000590440019700000001022001900000002f0000c13d000000040240008c000001150000413d000000000201043b000000e0022002700000005b0520009c000000370000613d0000005c0220009c000001150000c13d0000000002000416000000000202004b000001150000c13d000000040240008a000000200220008c000001150000413d0000000401100370000000000101043b0000000102000039000000000302041a000000000331004b000001150000813d000000000020043500000001041002100000006101400041000000000201041a000000010320019000000001052002700000007f0650018f000000000605c01900000060044000410000001f0560008c00000000050000190000000105002039000000010550018f000000000553004b000000f30000613d000000650100004100000000001004350000002201000039000001260000013d0000000001000416000000000101004b000001150000c13d0000002001000039000001000010044300000120000004430000005a01000041000001610001042e0000000002000416000000000202004b000001150000c13d000000040240008a000000400220008c000001150000413d0000000402100370000000000502043b0000005d0250009c000001150000213d00000023025000390000005e06000041000000000742004b000000000700001900000000070680190000005e02200197000000000802004b00000000060080190000005e0220009c000000000607c019000000000206004b000001150000c13d0000000406500039000000000261034f000000000202043b0000005d0720009c000001230000213d000000bf07200039000000200a00008a0000000007a7016f0000005d0870009c000001230000213d000000400070043f000000800020043f00000000052500190000002405500039000000000445004b000001150000213d0000002004600039000000000441034f0000001f0520018f00000005062002720000006b0000613d00000000070000190000000508700210000000000984034f000000000909043b000000a00880003900000000009804350000000107700039000000000867004b000000630000413d000000000705004b0000007a0000613d0000000506600210000000000464034f0000000305500210000000a006600039000000000706043300000000075701cf000000000757022f000000000404043b0000010005500089000000000454022f00000000045401cf000000000474019f0000000000460435000000a0022000390000000000020435000000400200043d0000005f0420009c000001230000213d0000004004200039000000400040043f0000002401100370000000000101043b000000000112043600000000003104350000000105000039000000000305041a0000005d0430009c000001230000213d0000000104300039000000000045041b0000000000500435000000000202043300000001033002100000006004300041000000000024041b0000006104300041000000000301043300000000760304340000005d0160009c000001230000213d000000000104041a000000010210019000000001021002700000007f0820018f000000000802c0190000001f0280008c00000000020000190000000102002039000000000121013f00000001011001900000002b0000c13d000100000007001d000400000003001d000200000005001d000300000008001d000000200180008c00060000000a001d000500000004001d000700000006001d000000c60000413d000000000040043500000059010000410000000002000414000000590320009c0000000002018019000000c00120021000000062011001c700008010020000390160015b0000040f0000000102200190000001150000613d00000007060000290000001f026000390000000502200270000000200360008c0000000002004019000000000301043b00000003010000290000001f01100039000000050110027000000000011300190000000002230019000000000312004b0000000504000029000000c60000813d000000000002041b0000000102200039000000000312004b000000c20000413d0000001f0160008c0000014a0000a13d000000000040043500000059010000410000000002000414000000590320009c0000000002018019000000c00120021000000062011001c700008010020000390160015b0000040f00000001022001900000000602000029000001150000613d00000007032001800000002002000039000000000101043b0000000406000029000000e30000613d0000002002000039000000000400001900000000056200190000000005050433000000000051041b000000200220003900000001011000390000002004400039000000000534004b000000db0000413d000000070330006c000000ef0000813d00000007030000290000000303300210000000f80330018f000000010400008a000000000334022f000000000343013f00000004022000290000000002020433000000000232016f000000000021041b000000070100002900000001011002100000000202000029000001560000013d000000000504041a000000800060043f000000000303004b000001170000613d000600000006001d000700000005001d000000000010043500000059010000410000000002000414000000590320009c0000000002018019000000c00120021000000062011001c700008010020000390160015b0000040f0000000102200190000001150000613d000000a0020000390000000606000029000000000306004b0000000705000029000001290000613d000000000101043b00000000030000190000000002030019000000000301041a000000a004200039000000000034043500000001011000390000002003200039000000000463004b0000010b0000413d000000c0012000390000011d0000013d00000000010000190000016200010430000001000100008a000000000112016f000000a00010043f000000000106004b000000c001000039000000a0010060390000001f01100039000000200200008a000000000221016f0000006301200041000000640110009c000001290000213d000000650100004100000000001004350000004101000039000000040010043f00000066010000410000016200010430000000400020043f00000020012000390000004003000039000000000031043500000000005204350000004003200039000000800100043d00000000001304350000006003200039000000000401004b0000013c0000613d00000000040000190000000005340019000000a006400039000000000606043300000000006504350000002004400039000000000514004b000001350000413d000000000331001900000000000304350000007f01100039000000200300008a000000000131016f0000005903000041000000590410009c0000000001038019000000590420009c000000000203801900000040022002100000006001100210000000000121019f000001610001042e000000070100006b00000000010000190000014f0000613d0000000101000029000000000101043300000007040000290000000302400210000000010300008a000000000223022f000000000232013f000000000121016f0000000102400210000000000121019f0000000502000029000000000012041b0000000001000019000001610001042e0000015e002104230000000102000039000000000001042d0000000002000019000000000001042d0000016000000432000001610001042e0000016200010430000000000000000000000000000000000000000000000000000000000000000000000000ffffffff000000020000000000000000000000000000004000000100000000000000000000000000000000000000000000000000000000000000000000000000e1b3202a00000000000000000000000000000000000000000000000000000000bf119bdb000000000000000000000000000000000000000000000000ffffffffffffffff8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffbfb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6b10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf70200000000000000000000000000000000000020000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffffffffff000000000000007f4e487b7100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002400000000000000000000000000000000000000000000000000000000000000000000000000000000000000006c88549f7760ecf40ec1fa4a1625167441ff0c5c24ff3834551f1b5f2b1dfe7f"},"methodIdentifiers":{"addperson(string,uint256)":"e1b3202a","listofpeople(uint256)":"bf119bdb"}},"irOptimized":"/// @use-src 0:\"contracts/array.sol\"\nobject \"Array_30\" {\n    code {\n        {\n            /// @src 0:60:700  \"contract Array{...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            let _2 := datasize(\"Array_30_deployed\")\n            codecopy(_1, dataoffset(\"Array_30_deployed\"), _2)\n            return(_1, _2)\n        }\n    }\n    /// @use-src 0:\"contracts/array.sol\"\n    object \"Array_30_deployed\" {\n        code {\n            {\n                /// @src 0:60:700  \"contract Array{...\"\n                let _1 := 64\n                mstore(_1, memoryguard(0x80))\n                let _2 := 4\n                if iszero(lt(calldatasize(), _2))\n                {\n                    let _3 := 0\n                    switch shr(224, calldataload(_3))\n                    case 0xbf119bdb {\n                        if callvalue() { revert(_3, _3) }\n                        let _4 := 32\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_3, _3) }\n                        let value := calldataload(_2)\n                        let _5 := 1\n                        /// @src 0:515:543  \"person[] public listofpeople\"\n                        if iszero(lt(value, /** @src 0:60:700  \"contract Array{...\" */ sload(1)))\n                        /// @src 0:515:543  \"person[] public listofpeople\"\n                        {\n                            revert(/** @src 0:60:700  \"contract Array{...\" */ _3, _3)\n                        }\n                        /// @src 0:515:543  \"person[] public listofpeople\"\n                        let slot, offset := storage_array_index_access_struct_person__dyn(value)\n                        /// @src 0:60:700  \"contract Array{...\"\n                        let _6 := sload(/** @src 0:515:543  \"person[] public listofpeople\" */ slot)\n                        let _7 := add(slot, /** @src 0:60:700  \"contract Array{...\" */ 1)\n                        let memPtr := mload(_1)\n                        let ret := _3\n                        let slotValue := sload(_7)\n                        let length := extract_byte_array_length(slotValue)\n                        mstore(memPtr, length)\n                        switch and(slotValue, 1)\n                        case 0 {\n                            mstore(add(memPtr, _4), and(slotValue, not(255)))\n                            ret := add(add(memPtr, shl(5, iszero(iszero(length)))), _4)\n                        }\n                        case 1 {\n                            mstore(_3, _7)\n                            let dataPos := keccak256(_3, _4)\n                            let i := _3\n                            for { } lt(i, length) { i := add(i, _4) }\n                            {\n                                mstore(add(add(memPtr, i), _4), sload(dataPos))\n                                dataPos := add(dataPos, _5)\n                            }\n                            ret := add(add(memPtr, i), _4)\n                        }\n                        finalize_allocation(memPtr, sub(ret, memPtr))\n                        let memPos := mload(_1)\n                        mstore(memPos, _6)\n                        mstore(add(memPos, _4), _1)\n                        let length_1 := mload(memPtr)\n                        mstore(add(memPos, _1), length_1)\n                        let i_1 := _3\n                        for { } lt(i_1, length_1) { i_1 := add(i_1, _4) }\n                        {\n                            mstore(add(add(memPos, i_1), 96), mload(add(add(memPtr, i_1), _4)))\n                        }\n                        mstore(add(add(memPos, length_1), 96), _3)\n                        return(memPos, add(sub(add(memPos, and(add(length_1, 31), not(31))), memPos), 96))\n                    }\n                    case 0xe1b3202a {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), _1) { revert(_3, _3) }\n                        let offset_1 := calldataload(_2)\n                        let _8 := 0xffffffffffffffff\n                        if gt(offset_1, _8) { revert(_3, _3) }\n                        if iszero(slt(add(offset_1, 35), calldatasize())) { revert(_3, _3) }\n                        let _9 := calldataload(add(_2, offset_1))\n                        let _10 := 36\n                        if gt(_9, _8)\n                        {\n                            mstore(_3, shl(224, 0x4e487b71))\n                            mstore(_2, 0x41)\n                            revert(_3, _10)\n                        }\n                        let _11 := 0x20\n                        let _12 := not(31)\n                        let memPtr_1 := mload(_1)\n                        finalize_allocation(memPtr_1, add(and(add(_9, 0x1f), _12), _11))\n                        mstore(memPtr_1, _9)\n                        if gt(add(add(offset_1, _9), _10), calldatasize()) { revert(_3, _3) }\n                        calldatacopy(add(memPtr_1, _11), add(offset_1, _10), _9)\n                        mstore(add(add(memPtr_1, _9), _11), _3)\n                        let memPtr_2 := mload(_1)\n                        let newFreePtr := add(memPtr_2, _1)\n                        if or(gt(newFreePtr, _8), lt(newFreePtr, memPtr_2))\n                        {\n                            mstore(_3, shl(224, 0x4e487b71))\n                            mstore(_2, 0x41)\n                            revert(_3, _10)\n                        }\n                        mstore(_1, newFreePtr)\n                        mstore(memPtr_2, calldataload(_10))\n                        /// @src 0:659:688  \"person(_favoritenumber,_name)\"\n                        let _13 := add(memPtr_2, /** @src 0:60:700  \"contract Array{...\" */ _11)\n                        mstore(_13, memPtr_1)\n                        let _14 := 1\n                        let oldLen := sload(_14)\n                        if iszero(lt(oldLen, 18446744073709551616))\n                        {\n                            mstore(_3, shl(224, 0x4e487b71))\n                            mstore(_2, 0x41)\n                            revert(_3, _10)\n                        }\n                        sstore(_14, add(oldLen, _14))\n                        let slot_1, offset_2 := storage_array_index_access_struct_person__dyn(oldLen)\n                        if offset_2\n                        {\n                            mstore(_3, shl(224, 0x4e487b71))\n                            mstore(_2, _3)\n                            revert(_3, _10)\n                        }\n                        sstore(slot_1, mload(memPtr_2))\n                        let memberSlot := add(slot_1, _14)\n                        let _15 := mload(_13)\n                        let newLen := mload(_15)\n                        if gt(newLen, _8)\n                        {\n                            mstore(_3, shl(224, 0x4e487b71))\n                            mstore(_2, 0x41)\n                            revert(_3, _10)\n                        }\n                        let _16 := extract_byte_array_length(sload(memberSlot))\n                        if gt(_16, 0x1f)\n                        {\n                            mstore(_3, memberSlot)\n                            let data := keccak256(_3, _11)\n                            let deleteStart := add(data, shr(5, add(newLen, 0x1f)))\n                            if lt(newLen, _11) { deleteStart := data }\n                            let _17 := add(data, shr(5, add(_16, 0x1f)))\n                            let start := deleteStart\n                            for { } lt(start, _17) { start := add(start, _14) }\n                            { sstore(start, _3) }\n                        }\n                        let srcOffset := _3\n                        srcOffset := _11\n                        switch gt(newLen, 0x1f)\n                        case 1 {\n                            let loopEnd := and(newLen, _12)\n                            mstore(_3, memberSlot)\n                            let dstPtr := keccak256(_3, _11)\n                            let i_2 := _3\n                            for { } lt(i_2, loopEnd) { i_2 := add(i_2, _11) }\n                            {\n                                sstore(dstPtr, mload(add(_15, srcOffset)))\n                                dstPtr := add(dstPtr, _14)\n                                srcOffset := add(srcOffset, _11)\n                            }\n                            if lt(loopEnd, newLen)\n                            {\n                                let lastValue := mload(add(_15, srcOffset))\n                                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n                            }\n                            sstore(memberSlot, add(shl(_14, newLen), _14))\n                        }\n                        default {\n                            let value_1 := _3\n                            if newLen\n                            {\n                                value_1 := mload(add(_15, srcOffset))\n                            }\n                            sstore(memberSlot, or(and(value_1, not(shr(shl(3, newLen), not(0)))), shl(_14, newLen)))\n                        }\n                        return(_3, _3)\n                    }\n                }\n                revert(0, 0)\n            }\n            function storage_array_index_access_struct_person__dyn(index) -> slot, offset\n            {\n                if iszero(lt(index, sload(/** @src 0:515:543  \"person[] public listofpeople\" */ 1)))\n                /// @src 0:60:700  \"contract Array{...\"\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x32)\n                    revert(0, 0x24)\n                }\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:515:543  \"person[] public listofpeople\" */ 1)\n                /// @src 0:60:700  \"contract Array{...\"\n                slot := add(80084422859880547211683076133703299733277748156566366325829078699459944778998, shl(/** @src 0:515:543  \"person[] public listofpeople\" */ 1, /** @src 0:60:700  \"contract Array{...\" */ index))\n                offset := /** @src -1:-1:-1 */ 0\n            }\n            /// @src 0:60:700  \"contract Array{...\"\n            function extract_byte_array_length(data) -> length\n            {\n                length := shr(1, data)\n                let outOfPlaceEncoding := and(data, 1)\n                if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                if eq(outOfPlaceEncoding, lt(length, 32))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x22)\n                    revert(0, 0x24)\n                }\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220c365c3d8cfef6bece8164fbfb05ece4082fae19d67d0217489ad61e7952c0b2864736f6c63430008180033\"\n    }\n}\n","hash":"01000069fe906c7fe956e2d0ad7bd50a6c507b41cd47fafffcf7d2e97ff06e34","factoryDependencies":{}}},"contracts/exercise_on_array.sol":{"Animal":{"abi":[{"inputs":[{"internalType":"string","name":"_Animal","type":"string"}],"name":"addAnimal","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"listofanimals","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"retrieve","outputs":[{"internalType":"string[]","name":"","type":"string[]"}],"stateMutability":"view","type":"function"}],"metadata":{"optimizer_settings":{"is_debug_logging_enabled":false,"is_fallback_to_size_enabled":false,"is_system_request_memoization_disabled":false,"is_verify_each_enabled":false,"level_back_end":"Aggressive","level_middle_end":"Aggressive","level_middle_end_size":"Zero"},"solc_metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_Animal\",\"type\":\"string\"}],\"name\":\"addAnimal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listofanimals\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieve\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/exercise_on_array.sol\":\"Animal\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOcmu\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/exercise_on_array.sol\":{\"keccak256\":\"0x0db644a54c09d70a5401e2b9c95e01d8b268cc53955bd3a3a47e1e513a73cbac\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://98894cd3be97d4de3d8c7137aa31cd6d5a8d1be1d2156411132bcdda2e68a088\",\"dweb:/ipfs/QmVh1Q2cGYEDwBqAzw28juNx2LJBYWiFi4RTcWyJ1LirJ6\"]}},\"version\":1}","solc_version":"0.8.24","solc_zkvm_edition":null,"zk_version":"1.4.0"},"evm":{"legacyAssembly":null,"assembly":"\t.text\n\t.file\t\"exercise_on_array.sol:Animal\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[8]\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_1\n\tadd\t128, r0, r2\n\tst.1\t64, r2\n\tsub.s!\t4, r3, r2\n\tjump.lt\t@.BB0_2\n\tld\tr1, r2\n\tshr.s\t224, r2, r2\n\tsub.s!\t@CPI0_7[0], r2, r4\n\tjump.eq\t@.BB0_101\n\tsub.s!\t@CPI0_8[0], r2, r4\n\tjump.eq\t@.BB0_69\n\tsub.s!\t@CPI0_9[0], r2, r1\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tsload\tr0, r5\n\tsub.s!\t@CPI0_5[0], r5, r1\n\tjump.gt\t@.BB0_23\n\tshl.s\t5, r5, r1\n\tadd\t191, r1, r1\n\tsub.s\t32, r0, r12\n\tand\tr1, r12, r1\n\tsub.s!\t@CPI0_5[0], r1, r2\n\tjump.gt\t@.BB0_23\n\tst.1\t64, r1\n\tst.1\t128, r5\n\tst.1\t0, r0\n\tsub!\tr5, r0, r2\n\tjump.eq\t@.BB0_62\n\tadd\t160, r0, r6\n\tadd\t@CPI0_10[0], r0, r7\n\tadd\tr0, r0, r8\n\tadd\tr12, r0, stack-[2]\n\tadd\tr5, r0, stack-[1]\n.BB0_51:\n\tsload\tr7, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r3\n\tand\t127, r3, r4\n\tadd.ne\tr3, r0, r4\n\tsub.s!\t31, r4, r3\n\tadd\t0, r0, r3\n\tadd.gt\t1, r0, r3\n\txor\tr1, r3, r3\n\tand!\t1, r3, r3\n\tjump.ne\t@.BB0_10\n\tld.1\t64, r9\n\tst.1.inc\tr9, r4, r3\n\tsub!\tr2, r0, r2\n\tjump.eq\t@.BB0_55\n\tadd\tr3, r0, stack-[3]\n\tadd\tr4, r0, stack-[4]\n\tadd\tr9, r0, stack-[5]\n\tadd\tr8, r0, stack-[6]\n\tadd\tr6, r0, stack-[8]\n\tadd\tr7, r0, stack-[7]\n\tst.1\t0, r7\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_4[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[4], r0, r10\n\tsub!\tr10, r0, r2\n\tadd\tr0, r0, r2\n\tadd\tstack-[2], r0, r12\n\tadd\tstack-[1], r0, r5\n\tadd\tstack-[8], r0, r6\n\tadd\tstack-[7], r0, r7\n\tadd\tstack-[6], r0, r8\n\tadd\tstack-[5], r0, r9\n\tadd\tstack-[3], r0, r11\n\tjump.eq\t@.BB0_53\n\tld\tr1, r1\n\tadd\tr0, r0, r2\n.BB0_59:\n\tadd\tr11, r2, r3\n\tsload\tr1, r4\n\tst.1\tr3, r4\n\tadd\t1, r1, r1\n\tadd\t32, r2, r2\n\tsub!\tr2, r10, r3\n\tjump.lt\t@.BB0_59\n\tjump\t@.BB0_53\n.BB0_55:\n\tsub.s\t256, r0, r2\n\tand\tr1, r2, r1\n\tst.1\tr3, r1\n\tsub!\tr4, r0, r1\n\tadd\t32, r0, r2\n\tadd.eq\t0, r0, r2\n.BB0_53:\n\tadd\t63, r2, r1\n\tand\tr1, r12, r2\n\tadd\tr2, r9, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_5[0], r1, r3\n\tjump.gt\t@.BB0_23\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_23\n\tst.1\t64, r1\n\tst.1.inc\tr6, r9, r6\n\tadd\t1, r7, r7\n\tadd\t1, r8, r8\n\tsub!\tr8, r5, r1\n\tjump.lt\t@.BB0_51\n\tld.1\t64, r1\n.BB0_62:\n\tadd\t32, r0, r2\n\tst.1.inc\tr1, r2, r3\n\tld.1\t128, r2\n\tst.1\tr3, r2\n\tadd\t64, r1, r3\n\tshl.s\t5, r2, r4\n\tadd\tr4, r3, r6\n\tsub!\tr2, r0, r4\n\tjump.ne\t@.BB0_63\n.BB0_68:\n\tsub\tr6, r1, r2\n\tadd\t@CPI0_0[0], r0, r3\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t96, r2, r2\n\tor\tr2, r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_1:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t3, r0, r1\n\tst.1\t224, r1\n\tadd\t@CPI0_1[0], r0, r2\n\tst.1\t256, r2\n\tadd\t224, r0, r2\n\tst.1\t128, r2\n\tst.1\t288, r1\n\tadd\t@CPI0_2[0], r0, r2\n\tst.1\t320, r2\n\tadd\t288, r0, r2\n\tst.1\t160, r2\n\tadd\t416, r0, r2\n\tst.1\t64, r2\n\tadd\t5, r0, r2\n\tst.1\t352, r2\n\tadd\t@CPI0_3[0], r0, r2\n\tst.1\t384, r2\n\tadd\t352, r0, r2\n\tst.1\t192, r2\n\tsload\tr0, r2\n\tsstore\tr0, r1\n\tsub.s!\t4, r2, r1\n\tjump.lt\t@.BB0_7\n\tadd\tr2, r0, stack-[8]\n\tst.1\t0, r0\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_4[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tadd\tstack-[8], r1, r3\n\tadd\t3, r1, r4\n\tsub!\tr4, r3, r1\n\tjump.ge\t@.BB0_7\n\tadd\tr3, r0, stack-[6]\n\tjump\t@.BB0_9\n.BB0_20:\n\tadd\tstack-[8], r0, r4\n\tsstore\tr4, r0\n\tadd\tstack-[6], r0, r3\n.BB0_14:\n\tsstore\tr1, r0\n.BB0_15:\n\tadd\t1, r4, r4\n\tsub!\tr4, r3, r1\n\tjump.ge\t@.BB0_7\n.BB0_9:\n\tsload\tr4, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r1\n\tand\t127, r1, r5\n\tadd.ne\tr1, r0, r5\n\tsub.s!\t31, r5, r1\n\tadd\t0, r0, r1\n\tadd.gt\t1, r0, r1\n\tand\t1, r1, r1\n\tsub!\tr2, r1, r1\n\tjump.ne\t@.BB0_10\n\tsub!\tr5, r0, r1\n\tjump.eq\t@.BB0_15\n\tsub.s!\t31, r5, r1\n\tadd\tr4, r0, r1\n\tjump.le\t@.BB0_14\n\tadd\tr5, r0, stack-[7]\n\tadd\tr4, r0, stack-[8]\n\tst.1\t0, r4\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_4[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tadd\tstack-[7], r0, r2\n\tadd\t31, r2, r2\n\tshr.s\t5, r2, r2\n\tadd\tr1, r2, r2\n\tadd\t1, r1, r3\n\tsub!\tr3, r2, r4\n\tjump.ge\t@.BB0_20\n.BB0_19:\n\tsstore\tr3, r0\n\tadd\t1, r3, r3\n\tsub!\tr3, r2, r4\n\tjump.lt\t@.BB0_19\n\tjump\t@.BB0_20\n.BB0_7:\n\tst.1\t0, r0\n\tadd\t@CPI0_0[0], r0, r3\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_4[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\t128, r0, r4\n\tld\tr1, r5\n\tadd\tr0, r0, r6\n\tjump\t@.BB0_21\n.BB0_38:\n\tshl.s\t1, r7, r1\n\tor\t1, r1, r1\n\tadd\tstack-[8], r0, r4\n\tadd\tstack-[7], r0, r5\n.BB0_31:\n\tsstore\tr5, r1\n\tsub.s!\t2, r6, r1\n\tadd\t1, r6, r6\n\tadd\t1, r5, r5\n\tjump.ge\t@.BB0_22\n.BB0_21:\n\tld.1.inc\tr4, r8, r4\n\tld.1.inc\tr8, r7, r9\n\tsub.s!\t@CPI0_5[0], r7, r1\n\tjump.gt\t@.BB0_23\n\tsload\tr5, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r2\n\tand\t127, r2, r3\n\tadd.ne\tr2, r0, r3\n\tsub.s!\t31, r3, r2\n\tadd\t0, r0, r2\n\tadd.gt\t1, r0, r2\n\txor\tr1, r2, r1\n\tand!\t1, r1, r1\n\tjump.ne\t@.BB0_10\n\tsub.s!\t32, r3, r1\n\tadd\tr4, r0, stack-[8]\n\tadd\tr5, r0, stack-[7]\n\tadd\tr6, r0, stack-[6]\n\tadd\tr7, r0, stack-[5]\n\tadd\tr8, r0, stack-[4]\n\tjump.lt\t@.BB0_29\n\tadd\tr3, r0, stack-[2]\n\tadd\tr9, r0, stack-[3]\n\tst.1\t0, r5\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_4[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[5], r0, r7\n\tadd\t31, r7, r2\n\tshr.s\t5, r2, r2\n\tsub.s!\t32, r7, r3\n\tadd.lt\tr0, r0, r2\n\tld\tr1, r3\n\tadd\tstack-[2], r0, r1\n\tadd\t31, r1, r1\n\tshr.s\t5, r1, r1\n\tadd\tr3, r1, r1\n\tadd\tr3, r2, r2\n\tsub!\tr2, r1, r3\n\tadd\tstack-[8], r0, r4\n\tadd\tstack-[7], r0, r5\n\tadd\tstack-[6], r0, r6\n\tadd\tstack-[3], r0, r9\n\tjump.ge\t@.BB0_29\n.BB0_30:\n\tsstore\tr2, r0\n\tadd\t1, r2, r2\n\tsub!\tr2, r1, r3\n\tjump.lt\t@.BB0_30\n.BB0_29:\n\tsub.s!\t31, r7, r1\n\tjump.le\t@.BB0_39\n\tst.1\t0, r5\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_4[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tsub.s\t32, r0, r2\n\tadd\tstack-[5], r0, r7\n\tand!\tr7, r2, r3\n\tadd\t32, r0, r2\n\tld\tr1, r1\n\tadd\tstack-[6], r0, r6\n\tadd\tstack-[4], r0, r8\n\tjump.eq\t@.BB0_36\n\tadd\t32, r0, r2\n\tadd\tr0, r0, r4\n.BB0_35:\n\tadd\tr2, r8, r5\n\tld.1\tr5, r5\n\tsstore\tr1, r5\n\tadd\t32, r2, r2\n\tadd\t1, r1, r1\n\tadd\t32, r4, r4\n\tsub!\tr4, r3, r5\n\tjump.lt\t@.BB0_35\n.BB0_36:\n\tsub!\tr3, r7, r3\n\tjump.ge\t@.BB0_38\n\tshl.s\t3, r7, r3\n\tand\t248, r3, r3\n\tsub.s\t1, r0, r4\n\tshr\tr4, r3, r3\n\txor\tr3, r4, r3\n\tadd\tr2, r8, r2\n\tld.1\tr2, r2\n\tand\tr2, r3, r2\n\tsstore\tr1, r2\n\tjump\t@.BB0_38\n.BB0_39:\n\tsub!\tr7, r0, r1\n\tadd\tr0, r0, r1\n\tjump.eq\t@.BB0_41\n\tld.1\tr9, r1\n.BB0_41:\n\tshl.s\t3, r7, r2\n\tsub.s\t1, r0, r3\n\tshr\tr3, r2, r2\n\txor\tr2, r3, r2\n\tand\tr1, r2, r1\n\tshl.s\t1, r7, r2\n\tor\tr1, r2, r1\n\tjump\t@.BB0_31\n.BB0_101:\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r3, r2\n\tsub.s!\t32, r2, r2\n\tjump.lt\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tsload\tr0, r2\n\tsub!\tr1, r2, r2\n\tjump.ge\t@.BB0_2\n\tst.1\t0, r0\n\tadd\t@CPI0_10[0], r1, r1\n\tnear_call\tr0, @copy_array_from_storage_to_memory_string, @DEFAULT_UNWIND\n\tadd\t32, r0, r2\n\tld.1\t64, r3\n\tadd\tr3, r0, stack-[8]\n\tst.1.inc\tr3, r2, r2\n\tnear_call\tr0, @abi_encode_string, @DEFAULT_UNWIND\n\tadd\tstack-[8], r0, r4\n\tsub\tr1, r4, r1\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd.ge\tr2, r0, r4\n\tshl.s\t64, r4, r2\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_69:\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r3, r2\n\tsub.s!\t32, r2, r2\n\tjump.lt\t@.BB0_2\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r4\n\tsub.s!\t@CPI0_5[0], r4, r2\n\tjump.gt\t@.BB0_2\n\tadd\t35, r4, r2\n\tadd\t@CPI0_11[0], r0, r5\n\tsub!\tr2, r3, r6\n\tadd\tr0, r0, r6\n\tadd.ge\tr5, r0, r6\n\tand\t@CPI0_11[0], r2, r2\n\tsub!\tr2, r0, r7\n\tadd.ge\tr0, r0, r5\n\tsub.s!\t@CPI0_11[0], r2, r2\n\tadd.ne\tr6, r0, r5\n\tsub!\tr5, r0, r2\n\tjump.ne\t@.BB0_2\n\tadd\t4, r4, r5\n\tptr.add\tr1, r5, r2\n\tld\tr2, r2\n\tsub.s!\t@CPI0_5[0], r2, r6\n\tjump.gt\t@.BB0_23\n\tadd\t191, r2, r6\n\tsub.s\t32, r0, r8\n\tand\tr6, r8, r6\n\tsub.s!\t@CPI0_5[0], r6, r7\n\tjump.le\t@.BB0_75\n.BB0_23:\n\tadd\t@CPI0_12[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tjump\t@.BB0_11\n.BB0_22:\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_6[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_75:\n\tst.1\t64, r6\n\tst.1\t128, r2\n\tadd\tr4, r2, r4\n\tadd\t36, r4, r4\n\tsub!\tr4, r3, r3\n\tjump.le\t@.BB0_76\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_63:\n\tadd\t160, r0, r4\n\tadd\tr0, r0, r5\n\tjump\t@.BB0_64\n.BB0_67:\n\tadd\t31, r7, r8\n\tand\tr8, r12, r8\n\tadd\tr7, r6, r7\n\tst.1\tr7, r0\n\tadd\tr8, r6, r6\n\tadd\t1, r5, r5\n\tsub!\tr5, r2, r7\n\tjump.ge\t@.BB0_68\n.BB0_64:\n\tsub\tr6, r1, r7\n\tsub.s\t64, r7, r7\n\tst.1.inc\tr3, r7, r3\n\tld.1.inc\tr4, r8, r4\n\tld.1\tr8, r7\n\tst.1.inc\tr6, r7, r6\n\tsub!\tr7, r0, r9\n\tjump.eq\t@.BB0_67\n\tadd\tr0, r0, r9\n.BB0_66:\n\tadd\tr9, r6, r10\n\tadd\t32, r9, r9\n\tadd\tr9, r8, r11\n\tld.1\tr11, r11\n\tst.1\tr10, r11\n\tsub!\tr9, r7, r10\n\tjump.lt\t@.BB0_66\n\tjump\t@.BB0_67\n.BB0_76:\n\tadd\t32, r5, r3\n\tptr.add\tr1, r3, r1\n\tand\t31, r2, r3\n\tshr.s!\t5, r2, r4\n\tjump.eq\t@.BB0_105\n\tadd\tr0, r0, r5\n.BB0_78:\n\tshl.s\t5, r5, r6\n\tptr.add\tr1, r6, r7\n\tld\tr7, r7\n\tadd\t160, r6, r6\n\tst.1\tr6, r7\n\tadd\t1, r5, r5\n\tsub!\tr5, r4, r6\n\tjump.lt\t@.BB0_78\n.BB0_105:\n\tsub!\tr3, r0, r5\n\tjump.eq\t@.BB0_80\n\tshl.s\t5, r4, r4\n\tptr.add\tr1, r4, r1\n\tshl.s\t3, r3, r3\n\tadd\t160, r4, r4\n\tld.1\tr4, r5\n\tshl\tr5, r3, r5\n\tshr\tr5, r3, r5\n\tld\tr1, r1\n\tsub\t256, r3, r3\n\tshr\tr1, r3, r1\n\tshl\tr1, r3, r1\n\tor\tr1, r5, r1\n\tst.1\tr4, r1\n.BB0_80:\n\tadd\t160, r2, r1\n\tst.1\tr1, r0\n\tsload\tr0, r1\n\tsub.s!\t@CPI0_5[0], r1, r2\n\tjump.gt\t@.BB0_23\n\tadd\t1, r1, r2\n\tsstore\tr0, r2\n\tadd\t@CPI0_10[0], r1, r4\n\tst.1\t0, r0\n\tld.1\t128, r5\n\tsub.s!\t@CPI0_5[0], r5, r1\n\tjump.gt\t@.BB0_23\n\tsload\tr4, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r2\n\tand\t127, r2, r3\n\tadd.ne\tr2, r0, r3\n\tsub.s!\t31, r3, r2\n\tadd\t0, r0, r2\n\tadd.gt\t1, r0, r2\n\txor\tr1, r2, r1\n\tand!\t1, r1, r1\n\tjump.eq\t@.BB0_83\n.BB0_10:\n\tadd\t@CPI0_12[0], r0, r1\n\tst.1\t0, r1\n\tadd\t34, r0, r1\n.BB0_11:\n\tst.1\t4, r1\n\tadd\t@CPI0_13[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_83:\n\tsub.s!\t32, r3, r1\n\tadd\tr8, r0, stack-[8]\n\tjump.lt\t@.BB0_87\n\tadd\tr3, r0, stack-[5]\n\tadd\tr5, r0, stack-[7]\n\tadd\tr4, r0, stack-[6]\n\tst.1\t0, r4\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_4[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[7], r0, r5\n\tadd\t31, r5, r2\n\tshr.s\t5, r2, r2\n\tsub.s!\t32, r5, r3\n\tadd.lt\tr0, r0, r2\n\tld\tr1, r3\n\tadd\tstack-[5], r0, r1\n\tadd\t31, r1, r1\n\tshr.s\t5, r1, r1\n\tadd\tr3, r1, r1\n\tadd\tr3, r2, r2\n\tsub!\tr2, r1, r3\n\tadd\tstack-[6], r0, r4\n\tjump.ge\t@.BB0_87\n.BB0_88:\n\tsstore\tr2, r0\n\tadd\t1, r2, r2\n\tsub!\tr2, r1, r3\n\tjump.lt\t@.BB0_88\n.BB0_87:\n\tsub.s!\t31, r5, r1\n\tjump.le\t@.BB0_98\n\tadd\tr5, r0, stack-[7]\n\tadd\tr4, r0, stack-[6]\n\tst.1\t0, r4\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_4[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tadd\tstack-[8], r0, r3\n\tjump.eq\t@.BB0_2\n\tand!\tstack-[7], r3, r2\n\tadd\t160, r0, r3\n\tld\tr1, r1\n\tjump.eq\t@.BB0_95\n\tadd\t32, r0, r4\n\tadd\tr0, r0, r3\n.BB0_93:\n\tadd\tr4, r0, r5\n\tadd\t128, r5, r4\n\tld.1\tr4, r4\n\tsstore\tr1, r4\n\tadd\t32, r5, r4\n\tadd\t1, r1, r1\n\tadd\t32, r3, r3\n\tsub!\tr3, r2, r6\n\tjump.lt\t@.BB0_93\n\tadd\t160, r5, r3\n.BB0_95:\n\tadd\tstack-[7], r0, r5\n\tsub!\tr2, r5, r2\n\tjump.ge\t@.BB0_97\n\tshl.s\t3, r5, r2\n\tand\t248, r2, r2\n\tsub.s\t1, r0, r4\n\tshr\tr4, r2, r2\n\txor\tr2, r4, r2\n\tld.1\tr3, r3\n\tand\tr3, r2, r2\n\tsstore\tr1, r2\n.BB0_97:\n\tadd\t1, r0, r1\n\tshl.s\t1, r5, r2\n\tadd\tstack-[6], r0, r4\n\tjump\t@.BB0_89\n.BB0_98:\n\tsub!\tr5, r0, r1\n\tadd\tr0, r0, r1\n\tjump.eq\t@.BB0_100\n\tld.1\t160, r1\n.BB0_100:\n\tshl.s\t3, r5, r2\n\tsub.s\t1, r0, r3\n\tshr\tr3, r2, r2\n\txor\tr2, r3, r2\n\tand\tr1, r2, r2\n\tshl.s\t1, r5, r1\n.BB0_89:\n\tor\tr2, r1, r1\n\tsstore\tr4, r1\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.func_end0:\n\nabi_encode_string:\n.func_begin1:\n\tld.1\tr1, r3\n\tst.1.inc\tr2, r3, r2\n\tsub!\tr3, r0, r4\n\tjump.eq\t@.BB1_3\n\tadd\tr0, r0, r4\n.BB1_2:\n\tadd\tr2, r4, r5\n\tadd\t32, r4, r4\n\tadd\tr4, r1, r6\n\tld.1\tr6, r6\n\tst.1\tr5, r6\n\tsub!\tr4, r3, r5\n\tjump.lt\t@.BB1_2\n.BB1_3:\n\tadd\tr2, r3, r1\n\tst.1\tr1, r0\n\tadd\t31, r3, r1\n\tsub.s\t32, r0, r3\n\tand\tr1, r3, r1\n\tadd\tr2, r1, r1\n\tret\n.func_end1:\n\ncopy_array_from_storage_to_memory_string:\n.func_begin2:\n\tnop\tstack+=[3]\n\tsload\tr1, r2\n\tand!\t1, r2, r3\n\tshr.s\t1, r2, r4\n\tand\t127, r4, r6\n\tadd.ne\tr4, r0, r6\n\tsub.s!\t31, r6, r4\n\tadd\t0, r0, r4\n\tadd.gt\t1, r0, r4\n\tand\t1, r4, r4\n\tsub!\tr3, r4, r4\n\tjump.ne\t@.BB2_1\n\tld.1\t64, r5\n\tst.1.inc\tr5, r6, r4\n\tsub!\tr3, r0, r3\n\tjump.eq\t@.BB2_8\n\tadd\tr4, r0, stack-[1]\n\tadd\tr6, r0, stack-[2]\n\tadd\tr5, r0, stack-[3]\n\tst.1\t0, r1\n\tadd\t@CPI2_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI2_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI2_1[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB2_10\n\tadd\tstack-[2], r0, r6\n\tsub!\tr6, r0, r2\n\tadd\tr0, r0, r2\n\tadd\tstack-[3], r0, r5\n\tadd\tstack-[1], r0, r7\n\tjump.eq\t@.BB2_4\n\tld\tr1, r1\n\tadd\tr0, r0, r2\n.BB2_13:\n\tadd\tr7, r2, r3\n\tsload\tr1, r4\n\tst.1\tr3, r4\n\tadd\t1, r1, r1\n\tadd\t32, r2, r2\n\tsub!\tr2, r6, r3\n\tjump.lt\t@.BB2_13\n\tjump\t@.BB2_4\n.BB2_8:\n\tsub.s\t256, r0, r1\n\tand\tr2, r1, r1\n\tst.1\tr4, r1\n\tsub!\tr6, r0, r1\n\tadd\t32, r0, r2\n\tadd.eq\t0, r0, r2\n.BB2_4:\n\tadd\t63, r2, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r2\n\tadd\tr2, r5, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI2_2[0], r1, r3\n\tjump.gt\t@.BB2_6\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB2_6\n\tst.1\t64, r1\n\tadd\tr5, r0, r1\n\tret\n.BB2_1:\n\tadd\t@CPI2_3[0], r0, r1\n\tst.1\t0, r1\n\tadd\t34, r0, r1\n\tjump\t@.BB2_2\n.BB2_6:\n\tadd\t@CPI2_3[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n.BB2_2:\n\tst.1\t4, r1\n\tadd\t@CPI2_4[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB2_10:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end2:\n\n__staticcall:\n.func_begin3:\n.tmp0:\n\tfar_call.static\tr1, r2, @.BB3_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB3_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end3:\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\nCPI2_0:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 44951156777603103434328014148080614096119502149053393678412182219895500439552\nCPI0_2:\n\t.cell 44975913341749041186633542617358601786417444276936568854985550194286268514304\nCPI0_3:\n\t.cell 55361298535492314021107612898590137610470821879050329936185219669955321004032\nCPI0_4:\nCPI2_1:\n\t.cell 904625697166532776746648320380374280103671757735618107014721178055227736064\nCPI0_5:\nCPI2_2:\n\t.cell 18446744073709551615\nCPI0_6:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_7:\n\t.cell 1701366481\nCPI0_8:\n\t.cell 1362739199\nCPI0_9:\n\t.cell 778358465\nCPI0_10:\n\t.cell 18569430475105882587588266137607568536673111973893317399460219858819262702947\nCPI0_11:\n\t.cell -57896044618658097711785492504343953926634992332820282019728792003956564819968\nCPI0_12:\nCPI2_3:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_13:\nCPI2_4:\n\t.cell 2852213850513516153367582212096\n","bytecode":{"object":""},"methodIdentifiers":{"addAnimal(string)":"5139bfff","listofanimals(uint256)":"6568cad1","retrieve()":"2e64cec1"}},"irOptimized":"/// @use-src 1:\"contracts/exercise_on_array.sol\"\nobject \"Animal_61\" {\n    code {\n        {\n            /// @src 1:280:628  \"contract Animal{...\"\n            let _1 := memoryguard(0x80)\n            if callvalue() { revert(0, 0) }\n            let newFreePtr := add(_1, 96)\n            let _2 := sub(shl(64, 1), 1)\n            if or(gt(newFreePtr, _2), lt(newFreePtr, _1))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 1:280:628  \"contract Animal{...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 1:280:628  \"contract Animal{...\" */ 0x24)\n            }\n            mstore(64, newFreePtr)\n            let memPtr := allocate_memory()\n            /// @src 1:380:401  \"[\\\"cat\\\",\\\"cow\\\",\\\"zebra\\\"]\"\n            let _3 := 3\n            /// @src 1:280:628  \"contract Animal{...\"\n            mstore(memPtr, /** @src 1:380:401  \"[\\\"cat\\\",\\\"cow\\\",\\\"zebra\\\"]\" */ _3)\n            /// @src 1:280:628  \"contract Animal{...\"\n            let _4 := 32\n            mstore(add(memPtr, _4), \"cat\")\n            mstore(_1, memPtr)\n            let memPtr_1 := allocate_memory()\n            mstore(memPtr_1, /** @src 1:380:401  \"[\\\"cat\\\",\\\"cow\\\",\\\"zebra\\\"]\" */ _3)\n            /// @src 1:280:628  \"contract Animal{...\"\n            mstore(add(memPtr_1, _4), \"cow\")\n            mstore(/** @src 1:380:401  \"[\\\"cat\\\",\\\"cow\\\",\\\"zebra\\\"]\" */ add(_1, /** @src 1:280:628  \"contract Animal{...\" */ _4), memPtr_1)\n            let memPtr_2 := allocate_memory()\n            let _5 := 5\n            mstore(memPtr_2, 5)\n            mstore(add(memPtr_2, _4), \"zebra\")\n            mstore(/** @src 1:380:401  \"[\\\"cat\\\",\\\"cow\\\",\\\"zebra\\\"]\" */ add(_1, /** @src 1:280:628  \"contract Animal{...\" */ 64), memPtr_2)\n            /// @src -1:-1:-1\n            let _6 := 0\n            /// @src 1:280:628  \"contract Animal{...\"\n            let oldLen := sload(/** @src -1:-1:-1 */ _6)\n            /// @src 1:280:628  \"contract Animal{...\"\n            sstore(/** @src -1:-1:-1 */ _6, /** @src 1:380:401  \"[\\\"cat\\\",\\\"cow\\\",\\\"zebra\\\"]\" */ _3)\n            /// @src 1:280:628  \"contract Animal{...\"\n            if lt(/** @src 1:380:401  \"[\\\"cat\\\",\\\"cow\\\",\\\"zebra\\\"]\" */ _3, /** @src 1:280:628  \"contract Animal{...\" */ oldLen)\n            {\n                mstore(/** @src -1:-1:-1 */ _6, _6)\n                /// @src 1:280:628  \"contract Animal{...\"\n                let data := keccak256(/** @src -1:-1:-1 */ _6, /** @src 1:280:628  \"contract Animal{...\" */ _4)\n                let _7 := add(data, oldLen)\n                let start := add(data, /** @src 1:380:401  \"[\\\"cat\\\",\\\"cow\\\",\\\"zebra\\\"]\" */ _3)\n                /// @src 1:280:628  \"contract Animal{...\"\n                for { } lt(start, _7) { start := add(start, 1) }\n                {\n                    let oldLen_1 := extract_byte_array_length(sload(start))\n                    if iszero(iszero(oldLen_1))\n                    {\n                        let _8 := 31\n                        switch gt(oldLen_1, _8)\n                        case 1 {\n                            mstore(/** @src -1:-1:-1 */ _6, /** @src 1:280:628  \"contract Animal{...\" */ start)\n                            let data_1 := keccak256(/** @src -1:-1:-1 */ _6, /** @src 1:280:628  \"contract Animal{...\" */ _4)\n                            clear_storage_range_bytes1(add(data_1, 1), add(data_1, shr(_5, add(oldLen_1, _8))))\n                            sstore(start, /** @src -1:-1:-1 */ _6)\n                            /// @src 1:280:628  \"contract Animal{...\"\n                            sstore(data_1, /** @src -1:-1:-1 */ _6)\n                        }\n                        default /// @src 1:280:628  \"contract Animal{...\"\n                        {\n                            sstore(start, /** @src -1:-1:-1 */ _6)\n                        }\n                    }\n                }\n            }\n            /// @src 1:280:628  \"contract Animal{...\"\n            let srcPtr := _1\n            mstore(/** @src -1:-1:-1 */ _6, _6)\n            /// @src 1:280:628  \"contract Animal{...\"\n            let elementSlot := keccak256(/** @src -1:-1:-1 */ _6, /** @src 1:280:628  \"contract Animal{...\" */ _4)\n            let i := /** @src -1:-1:-1 */ _6\n            /// @src 1:280:628  \"contract Animal{...\"\n            for { }\n            lt(i, /** @src 1:380:401  \"[\\\"cat\\\",\\\"cow\\\",\\\"zebra\\\"]\" */ _3)\n            /// @src 1:280:628  \"contract Animal{...\"\n            { i := add(i, 1) }\n            {\n                let _9 := mload(srcPtr)\n                let newLen := mload(_9)\n                if gt(newLen, _2)\n                {\n                    mstore(/** @src -1:-1:-1 */ _6, /** @src 1:280:628  \"contract Animal{...\" */ shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(/** @src -1:-1:-1 */ _6, /** @src 1:280:628  \"contract Animal{...\" */ 0x24)\n                }\n                let _10 := extract_byte_array_length(sload(elementSlot))\n                let _11 := 31\n                if gt(_10, _11)\n                {\n                    mstore(/** @src -1:-1:-1 */ _6, /** @src 1:280:628  \"contract Animal{...\" */ elementSlot)\n                    let data_2 := keccak256(/** @src -1:-1:-1 */ _6, /** @src 1:280:628  \"contract Animal{...\" */ _4)\n                    let deleteStart := add(data_2, shr(_5, add(newLen, _11)))\n                    if lt(newLen, _4) { deleteStart := data_2 }\n                    clear_storage_range_bytes1(deleteStart, add(data_2, shr(_5, add(_10, _11))))\n                }\n                let srcOffset := /** @src -1:-1:-1 */ _6\n                /// @src 1:280:628  \"contract Animal{...\"\n                srcOffset := _4\n                switch gt(newLen, _11)\n                case 1 {\n                    let loopEnd := and(newLen, not(31))\n                    mstore(/** @src -1:-1:-1 */ _6, /** @src 1:280:628  \"contract Animal{...\" */ elementSlot)\n                    let dstPtr := keccak256(/** @src -1:-1:-1 */ _6, /** @src 1:280:628  \"contract Animal{...\" */ _4)\n                    let i_1 := /** @src -1:-1:-1 */ _6\n                    /// @src 1:280:628  \"contract Animal{...\"\n                    for { } lt(i_1, loopEnd) { i_1 := add(i_1, _4) }\n                    {\n                        sstore(dstPtr, mload(add(_9, srcOffset)))\n                        dstPtr := add(dstPtr, 1)\n                        srcOffset := add(srcOffset, _4)\n                    }\n                    if lt(loopEnd, newLen)\n                    {\n                        let lastValue := mload(add(_9, srcOffset))\n                        sstore(dstPtr, and(lastValue, not(shr(and(shl(/** @src 1:380:401  \"[\\\"cat\\\",\\\"cow\\\",\\\"zebra\\\"]\" */ _3, /** @src 1:280:628  \"contract Animal{...\" */ newLen), 248), not(0)))))\n                    }\n                    let _12 := 1\n                    sstore(elementSlot, add(shl(_12, newLen), _12))\n                }\n                default {\n                    let value := /** @src -1:-1:-1 */ _6\n                    /// @src 1:280:628  \"contract Animal{...\"\n                    if newLen\n                    {\n                        value := mload(add(_9, srcOffset))\n                    }\n                    sstore(elementSlot, or(and(value, not(shr(shl(/** @src 1:380:401  \"[\\\"cat\\\",\\\"cow\\\",\\\"zebra\\\"]\" */ _3, /** @src 1:280:628  \"contract Animal{...\" */ newLen), not(0)))), shl(1, newLen)))\n                }\n                srcPtr := add(srcPtr, _4)\n                elementSlot := add(elementSlot, 1)\n            }\n            let _13 := mload(64)\n            let _14 := datasize(\"Animal_61_deployed\")\n            codecopy(_13, dataoffset(\"Animal_61_deployed\"), _14)\n            return(_13, _14)\n        }\n        function allocate_memory() -> memPtr\n        {\n            memPtr := mload(64)\n            let newFreePtr := add(memPtr, 64)\n            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr))\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(0, 0x24)\n            }\n            mstore(64, newFreePtr)\n        }\n        function extract_byte_array_length(data) -> length\n        {\n            length := shr(1, data)\n            let outOfPlaceEncoding := and(data, 1)\n            if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n            if eq(outOfPlaceEncoding, lt(length, 32))\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x22)\n                revert(0, 0x24)\n            }\n        }\n        function clear_storage_range_bytes1(start, end)\n        {\n            for { } lt(start, end) { start := add(start, 1) }\n            { sstore(start, 0) }\n        }\n    }\n    /// @use-src 1:\"contracts/exercise_on_array.sol\"\n    object \"Animal_61_deployed\" {\n        code {\n            {\n                /// @src 1:280:628  \"contract Animal{...\"\n                let _1 := memoryguard(0x80)\n                let _2 := 64\n                mstore(_2, _1)\n                let _3 := 4\n                if iszero(lt(calldatasize(), _3))\n                {\n                    let _4 := 0\n                    switch shr(224, calldataload(_4))\n                    case 0x2e64cec1 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let length := sload(_4)\n                        if gt(length, 0xffffffffffffffff)\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, 0x41)\n                            revert(_4, 0x24)\n                        }\n                        let _5 := 0x20\n                        finalize_allocation(_1, add(shl(5, length), _5))\n                        mstore(_1, length)\n                        let mpos := _1\n                        mpos := add(_1, _5)\n                        let mpos_1 := mpos\n                        mstore(_4, _4)\n                        let spos := 18569430475105882587588266137607568536673111973893317399460219858819262702947\n                        let i := _4\n                        for { } lt(i, length) { i := add(i, 1) }\n                        {\n                            mstore(mpos, copy_array_from_storage_to_memory_string(spos))\n                            mpos := add(mpos, _5)\n                            spos := add(spos, 1)\n                        }\n                        let memPos := mload(_2)\n                        let tail := add(memPos, _5)\n                        mstore(memPos, _5)\n                        let pos := tail\n                        let length_1 := mload(_1)\n                        mstore(tail, length_1)\n                        pos := add(memPos, _2)\n                        let tail_1 := add(add(memPos, shl(5, length_1)), _2)\n                        let srcPtr := mpos_1\n                        let i_1 := _4\n                        for { } lt(i_1, length_1) { i_1 := add(i_1, 1) }\n                        {\n                            mstore(pos, add(sub(tail_1, memPos), not(63)))\n                            tail_1 := abi_encode_string(mload(srcPtr), tail_1)\n                            srcPtr := add(srcPtr, _5)\n                            pos := add(pos, _5)\n                        }\n                        return(memPos, sub(tail_1, memPos))\n                    }\n                    case 0x5139bfff {\n                        if callvalue() { revert(_4, _4) }\n                        let _6 := 32\n                        if slt(add(calldatasize(), not(3)), _6) { revert(_4, _4) }\n                        let offset := calldataload(_3)\n                        let _7 := 0xffffffffffffffff\n                        if gt(offset, _7) { revert(_4, _4) }\n                        if iszero(slt(add(offset, 35), calldatasize())) { revert(_4, _4) }\n                        let _8 := calldataload(add(_3, offset))\n                        let _9 := 36\n                        if gt(_8, _7)\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, 0x41)\n                            revert(_4, _9)\n                        }\n                        let _10 := not(31)\n                        let memPtr := mload(_2)\n                        finalize_allocation(memPtr, add(and(add(_8, 0x1f), _10), _6))\n                        mstore(memPtr, _8)\n                        if gt(add(add(offset, _8), _9), calldatasize()) { revert(_4, _4) }\n                        calldatacopy(add(memPtr, _6), add(offset, _9), _8)\n                        mstore(add(add(memPtr, _8), _6), _4)\n                        let oldLen := sload(_4)\n                        if iszero(lt(oldLen, 18446744073709551616))\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, 0x41)\n                            revert(_4, _9)\n                        }\n                        let _11 := 1\n                        sstore(_4, add(oldLen, _11))\n                        let slot, offset_1 := storage_array_index_access_string__dyn(oldLen)\n                        if offset_1\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, _4)\n                            revert(_4, _9)\n                        }\n                        let newLen := mload(memPtr)\n                        if gt(newLen, _7)\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, 0x41)\n                            revert(_4, _9)\n                        }\n                        let _12 := extract_byte_array_length(sload(slot))\n                        if gt(_12, 0x1f)\n                        {\n                            mstore(_4, slot)\n                            let data := keccak256(_4, _6)\n                            let deleteStart := add(data, shr(5, add(newLen, 0x1f)))\n                            if lt(newLen, _6) { deleteStart := data }\n                            let _13 := add(data, shr(5, add(_12, 0x1f)))\n                            let start := deleteStart\n                            for { } lt(start, _13) { start := add(start, _11) }\n                            { sstore(start, _4) }\n                        }\n                        let srcOffset := _4\n                        srcOffset := _6\n                        switch gt(newLen, 0x1f)\n                        case 1 {\n                            let loopEnd := and(newLen, _10)\n                            mstore(_4, slot)\n                            let dstPtr := keccak256(_4, _6)\n                            let i_2 := _4\n                            for { } lt(i_2, loopEnd) { i_2 := add(i_2, _6) }\n                            {\n                                sstore(dstPtr, mload(add(memPtr, srcOffset)))\n                                dstPtr := add(dstPtr, _11)\n                                srcOffset := add(srcOffset, _6)\n                            }\n                            if lt(loopEnd, newLen)\n                            {\n                                let lastValue := mload(add(memPtr, srcOffset))\n                                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n                            }\n                            sstore(slot, add(shl(_11, newLen), _11))\n                        }\n                        default {\n                            let value := _4\n                            if newLen\n                            {\n                                value := mload(add(memPtr, srcOffset))\n                            }\n                            sstore(slot, or(and(value, not(shr(shl(3, newLen), not(0)))), shl(_11, newLen)))\n                        }\n                        return(_4, _4)\n                    }\n                    case 0x6568cad1 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                        let value_1 := calldataload(_3)\n                        /// @src 1:347:401  \"string[] public listofanimals =  [\\\"cat\\\",\\\"cow\\\",\\\"zebra\\\"]\"\n                        if iszero(lt(value_1, /** @src 1:280:628  \"contract Animal{...\" */ sload(_4)))\n                        /// @src 1:347:401  \"string[] public listofanimals =  [\\\"cat\\\",\\\"cow\\\",\\\"zebra\\\"]\"\n                        {\n                            revert(/** @src 1:280:628  \"contract Animal{...\" */ _4, _4)\n                        }\n                        /// @src 1:347:401  \"string[] public listofanimals =  [\\\"cat\\\",\\\"cow\\\",\\\"zebra\\\"]\"\n                        let slot_1, offset_2 := storage_array_index_access_string__dyn(value_1)\n                        /// @src 1:280:628  \"contract Animal{...\"\n                        if iszero(iszero(offset_2))\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, _4)\n                            revert(_4, 0x24)\n                        }\n                        let value_2 := copy_array_from_storage_to_memory_string(slot_1)\n                        let memPos_1 := mload(_2)\n                        mstore(memPos_1, 32)\n                        return(memPos_1, sub(abi_encode_string(value_2, add(memPos_1, 32)), memPos_1))\n                    }\n                }\n                revert(0, 0)\n            }\n            function abi_encode_string(value, pos) -> end\n            {\n                let length := mload(value)\n                mstore(pos, length)\n                let i := 0\n                for { } lt(i, length) { i := add(i, 0x20) }\n                {\n                    let _1 := 0x20\n                    mstore(add(add(pos, i), _1), mload(add(add(value, i), _1)))\n                }\n                mstore(add(add(pos, length), 0x20), 0)\n                end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            function storage_array_index_access_string__dyn(index) -> slot, offset\n            {\n                let _1 := 0\n                if iszero(lt(index, sload(_1)))\n                {\n                    mstore(_1, shl(224, 0x4e487b71))\n                    mstore(4, 0x32)\n                    revert(_1, 0x24)\n                }\n                mstore(_1, _1)\n                slot := add(18569430475105882587588266137607568536673111973893317399460219858819262702947, index)\n                offset := _1\n            }\n            function extract_byte_array_length(data) -> length\n            {\n                length := shr(1, data)\n                let outOfPlaceEncoding := and(data, 1)\n                if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                if eq(outOfPlaceEncoding, lt(length, 32))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x22)\n                    revert(0, 0x24)\n                }\n            }\n            function copy_array_from_storage_to_memory_string(slot) -> memPtr\n            {\n                memPtr := mload(64)\n                let ret := /** @src -1:-1:-1 */ 0\n                /// @src 1:280:628  \"contract Animal{...\"\n                let slotValue := sload(slot)\n                let length := extract_byte_array_length(slotValue)\n                mstore(memPtr, length)\n                let _1 := 0x20\n                let _2 := 1\n                switch and(slotValue, 1)\n                case 0 {\n                    mstore(add(memPtr, _1), and(slotValue, not(255)))\n                    ret := add(add(memPtr, shl(5, iszero(iszero(length)))), _1)\n                }\n                case 1 {\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 1:280:628  \"contract Animal{...\" */ slot)\n                    let dataPos := keccak256(/** @src -1:-1:-1 */ 0, /** @src 1:280:628  \"contract Animal{...\" */ _1)\n                    let i := /** @src -1:-1:-1 */ 0\n                    /// @src 1:280:628  \"contract Animal{...\"\n                    for { } lt(i, length) { i := add(i, _1) }\n                    {\n                        mstore(add(add(memPtr, i), _1), sload(dataPos))\n                        dataPos := add(dataPos, _2)\n                    }\n                    ret := add(add(memPtr, i), _1)\n                }\n                finalize_allocation(memPtr, sub(ret, memPtr))\n            }\n        }\n        data \".metadata\" hex\"a26469706673582212208dba715a6299f9927e1027059f57c35dae77480256da875d6e995de9a9e3a91a64736f6c63430008180033\"\n    }\n}\n","hash":"010000c52c2f85547996640c7c8ee3e31e59435f008712ee516b162adf177199","factoryDependencies":{}}},"contracts/mapping.sol":{"Mapping":{"abi":[{"inputs":[{"internalType":"string","name":"_name","type":"string"},{"internalType":"uint256","name":"_favoritenumber","type":"uint256"}],"name":"addperson","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"favoritenumbertoname","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getarraylength","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"listofpeople","outputs":[{"internalType":"uint256","name":"favoritenumber","type":"uint256"},{"internalType":"string","name":"name","type":"string"}],"stateMutability":"view","type":"function"}],"metadata":{"optimizer_settings":{"is_debug_logging_enabled":false,"is_fallback_to_size_enabled":false,"is_system_request_memoization_disabled":false,"is_verify_each_enabled":false,"level_back_end":"Aggressive","level_middle_end":"Aggressive","level_middle_end_size":"Zero"},"solc_metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_favoritenumber\",\"type\":\"uint256\"}],\"name\":\"addperson\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"favoritenumbertoname\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getarraylength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listofpeople\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"favoritenumber\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mapping.sol\":\"Mapping\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOcmu\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/mapping.sol\":{\"keccak256\":\"0xdfe64690455c88fab74e45f9687af9a145587e44358cb1d49e848a0428a7df31\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6f7de63c3cd04efc6eeef34a5af6c95bfd8dd7abaa4924438f645e8d40c6afa6\",\"dweb:/ipfs/QmX4aFxALhHFfYpGuxg7Mbs1NWtsRrmeoL2rvwgRKnArfW\"]}},\"version\":1}","solc_version":"0.8.24","solc_zkvm_edition":null,"zk_version":"1.4.0"},"evm":{"legacyAssembly":null,"assembly":"\t.text\n\t.file\t\"mapping.sol:Mapping\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[6]\n\tptr.add\tr1, r0, stack[@ptr_calldata]\n\tadd\t128, r0, r3\n\tst.1\t64, r3\n\tadd\tr1, r0, r4\n\tshr.s\t96, r4, r4\n\tand\t@CPI0_0[0], r4, r4\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_1\n\tsub.s!\t4, r4, r2\n\tjump.lt\t@.BB0_2\n\tld\tr1, r2\n\tshr.s\t224, r2, r2\n\tsub.s!\t@CPI0_2[0], r2, r5\n\tjump.gt\t@.BB0_8\n\tsub.s!\t@CPI0_5[0], r2, r3\n\tjump.eq\t@.BB0_10\n\tsub.s!\t@CPI0_6[0], r2, r2\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r4, r2\n\tsub.s!\t32, r2, r2\n\tjump.lt\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tst.1\t0, r1\n\tadd\t1, r0, r1\n\tst.1\t32, r1\n\tadd\t64, r0, r1\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tnear_call\tr0, @copy_array_from_storage_to_memory_string, @DEFAULT_UNWIND\n\tadd\t32, r0, r2\n\tld.1\t64, r3\n\tadd\tr3, r0, stack-[6]\n\tst.1.inc\tr3, r2, r2\n\tnear_call\tr0, @abi_encode_string, @DEFAULT_UNWIND\n\tadd\tstack-[6], r0, r4\n\tjump\t@.BB0_15\n.BB0_1:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_1[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_8:\n\tsub.s!\t@CPI0_3[0], r2, r5\n\tjump.eq\t@.BB0_16\n\tsub.s!\t@CPI0_4[0], r2, r2\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r4, r2\n\tsub.s!\t64, r2, r2\n\tjump.lt\t@.BB0_2\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r5\n\tsub.s!\t@CPI0_7[0], r5, r2\n\tjump.gt\t@.BB0_2\n\tadd\t35, r5, r2\n\tadd\t@CPI0_8[0], r0, r6\n\tsub!\tr2, r4, r7\n\tadd\tr0, r0, r7\n\tadd.ge\tr6, r0, r7\n\tand\t@CPI0_8[0], r2, r2\n\tsub!\tr2, r0, r8\n\tadd.ge\tr0, r0, r6\n\tsub.s!\t@CPI0_8[0], r2, r2\n\tadd.ne\tr7, r0, r6\n\tsub!\tr6, r0, r2\n\tjump.ne\t@.BB0_2\n\tadd\t4, r5, r6\n\tptr.add\tr1, r6, r2\n\tld\tr2, r2\n\tsub.s!\t@CPI0_9[0], r2, r7\n\tjump.ge\t@.BB0_25\n\tadd\t191, r2, r7\n\tsub.s\t32, r0, r10\n\tand\tr7, r10, r7\n\tsub.s!\t@CPI0_7[0], r7, r8\n\tjump.gt\t@.BB0_25\n\tst.1\t64, r7\n\tst.1\t128, r2\n\tadd\tr5, r2, r5\n\tadd\t36, r5, r5\n\tsub!\tr5, r4, r4\n\tjump.gt\t@.BB0_2\n\tadd\t32, r6, r4\n\tptr.add\tr1, r4, r4\n\tand\t31, r2, r5\n\tshr.s!\t5, r2, r6\n\tjump.eq\t@.BB0_75\n\tadd\tr0, r0, r7\n.BB0_31:\n\tshl.s\t5, r7, r8\n\tptr.add\tr4, r8, r9\n\tld\tr9, r9\n\tadd\t160, r8, r8\n\tst.1\tr8, r9\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_31\n.BB0_75:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_33\n\tshl.s\t5, r6, r6\n\tptr.add\tr4, r6, r4\n\tshl.s\t3, r5, r5\n\tadd\t160, r6, r6\n\tld.1\tr6, r7\n\tshl\tr7, r5, r7\n\tshr\tr7, r5, r7\n\tld\tr4, r4\n\tsub\t256, r5, r5\n\tshr\tr4, r5, r4\n\tshl\tr4, r5, r4\n\tor\tr4, r7, r4\n\tst.1\tr6, r4\n.BB0_33:\n\tadd\t160, r2, r2\n\tst.1\tr2, r0\n\tld.1\t64, r2\n\tsub.s!\t@CPI0_10[0], r2, r4\n\tjump.gt\t@.BB0_25\n\tadd\t64, r2, r4\n\tst.1\t64, r4\n\tptr.add.s\t36, r1, r1\n\tld\tr1, r1\n\tst.1.inc\tr2, r1, r1\n\tst.1\tr1, r3\n\tadd\t2, r0, r4\n\tsload\tr4, r3\n\tsub.s!\t@CPI0_7[0], r3, r5\n\tjump.gt\t@.BB0_25\n\tadd\t1, r3, r5\n\tsstore\tr4, r5\n\tst.1\t0, r4\n\tld.1\tr2, r4\n\tshl.s\t1, r3, r2\n\tadd\t@CPI0_11[0], r2, r3\n\tsstore\tr3, r4\n\tld.1\tr1, r3\n\tld.1.inc\tr3, r5, r6\n\tsub.s!\t@CPI0_7[0], r5, r1\n\tjump.le\t@.BB0_36\n.BB0_25:\n\tadd\t@CPI0_15[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n.BB0_26:\n\tst.1\t4, r1\n\tadd\t@CPI0_16[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_10:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t2, r0, r1\n\tsload\tr1, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_17[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_16:\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r4, r2\n\tsub.s!\t32, r2, r2\n\tjump.lt\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tadd\t2, r0, r2\n\tsload\tr2, r2\n\tsub!\tr1, r2, r2\n\tjump.ge\t@.BB0_2\n\tnear_call\tr0, @storage_array_index_access_struct_person__dyn, @DEFAULT_UNWIND\n\tsload\tr1, r2\n\tadd\tr2, r0, stack-[6]\n\tadd\t1, r1, r1\n\tnear_call\tr0, @copy_array_from_storage_to_memory_string, @DEFAULT_UNWIND\n\tadd\t64, r0, r2\n\tld.1\t64, r4\n\tadd\tr4, r0, stack-[5]\n\tadd\t32, r4, r3\n\tst.1\tr3, r2\n\tadd\tstack-[6], r0, r2\n\tst.1\tr4, r2\n\tadd\t64, r4, r2\n\tnear_call\tr0, @abi_encode_string, @DEFAULT_UNWIND\n\tadd\tstack-[5], r0, r4\n.BB0_15:\n\tsub\tr1, r4, r1\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd.ge\tr2, r0, r4\n\tshl.s\t64, r4, r2\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_36:\n\tadd\t@CPI0_12[0], r2, r4\n\tsload\tr4, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r1\n\tand\t127, r1, r7\n\tadd.ne\tr1, r0, r7\n\tsub.s!\t31, r7, r1\n\tadd\t0, r0, r1\n\tadd.gt\t1, r0, r1\n\tand\t1, r1, r1\n\tsub!\tr2, r1, r1\n\tjump.eq\t@.BB0_38\n.BB0_37:\n\tadd\t@CPI0_15[0], r0, r1\n\tst.1\t0, r1\n\tadd\t34, r0, r1\n\tjump\t@.BB0_26\n.BB0_38:\n\tadd\tr6, r0, stack-[1]\n\tadd\tr3, r0, stack-[3]\n\tadd\tr10, r0, stack-[4]\n\tadd\tr7, r0, stack-[2]\n\tsub.s!\t32, r7, r1\n\tadd\tr4, r0, stack-[5]\n\tadd\tr5, r0, stack-[6]\n\tjump.lt\t@.BB0_42\n\tst.1\t0, r4\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_13[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[6], r0, r5\n\tadd\t31, r5, r2\n\tshr.s\t5, r2, r2\n\tsub.s!\t32, r5, r3\n\tadd.lt\tr0, r0, r2\n\tld\tr1, r3\n\tadd\tstack-[2], r0, r1\n\tadd\t31, r1, r1\n\tshr.s\t5, r1, r1\n\tadd\tr3, r1, r1\n\tadd\tr3, r2, r2\n\tsub!\tr2, r1, r3\n\tjump.ge\t@.BB0_42\n.BB0_43:\n\tsstore\tr2, r0\n\tadd\t1, r2, r2\n\tsub!\tr2, r1, r3\n\tjump.lt\t@.BB0_43\n.BB0_42:\n\tsub.s!\t31, r5, r1\n\tjump.le\t@.BB0_53\n\tadd\tstack-[5], r0, r1\n\tst.1\t0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_13[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tadd\tstack-[4], r0, r2\n\tjump.eq\t@.BB0_2\n\tand!\tstack-[6], r2, r3\n\tadd\t32, r0, r2\n\tld\tr1, r1\n\tadd\tstack-[3], r0, r6\n\tjump.eq\t@.BB0_50\n\tadd\t32, r0, r2\n\tadd\tr0, r0, r4\n.BB0_49:\n\tadd\tr2, r6, r5\n\tld.1\tr5, r5\n\tsstore\tr1, r5\n\tadd\t32, r2, r2\n\tadd\t1, r1, r1\n\tadd\t32, r4, r4\n\tsub!\tr4, r3, r5\n\tjump.lt\t@.BB0_49\n.BB0_50:\n\tsub.s!\tstack-[6], r3, r3\n\tjump.ge\t@.BB0_52\n\tadd\tstack-[6], r0, r3\n\tshl.s\t3, r3, r3\n\tand\t248, r3, r3\n\tsub.s\t1, r0, r4\n\tshr\tr4, r3, r3\n\txor\tr3, r4, r3\n\tadd\tstack-[3], r2, r2\n\tld.1\tr2, r2\n\tand\tr2, r3, r2\n\tsstore\tr1, r2\n.BB0_52:\n\tadd\tstack-[6], r0, r1\n\tshl.s\t1, r1, r1\n\tor\t1, r1, r1\n\tjump\t@.BB0_44\n.BB0_53:\n\tsub!\tstack-[6], r0, r1\n\tadd\tr0, r0, r1\n\tjump.eq\t@.BB0_55\n\tadd\tstack-[1], r0, r1\n\tld.1\tr1, r1\n.BB0_55:\n\tadd\tstack-[6], r0, r4\n\tshl.s\t3, r4, r2\n\tsub.s\t1, r0, r3\n\tshr\tr3, r2, r2\n\txor\tr2, r3, r2\n\tand\tr1, r2, r1\n\tshl.s\t1, r4, r2\n\tor\tr1, r2, r1\n.BB0_44:\n\tadd\tstack-[5], r0, r2\n\tsstore\tr2, r1\n\tadd\t36, r0, r1\n\tptr.add\tstack[@ptr_calldata], r1, r1\n\tld\tr1, r1\n\tst.1\t0, r1\n\tadd\t1, r0, r1\n\tadd\tr1, r0, stack-[6]\n\tst.1\t32, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_14[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tadd\tr1, r0, stack-[5]\n\tld.1\t128, r1\n\tadd\tr1, r0, stack-[3]\n\tsub.s!\t@CPI0_7[0], r1, r1\n\tjump.gt\t@.BB0_25\n\tadd\tstack-[5], r0, r1\n\tsload\tr1, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r2\n\tand\t127, r2, r3\n\tadd.ne\tr2, r0, r3\n\tadd\tr3, r0, stack-[2]\n\tsub.s!\t31, r3, r2\n\tadd\t0, r0, r2\n\tadd.gt\t1, r0, r2\n\txor\tr1, r2, r1\n\tand!\t1, r1, r1\n\tjump.ne\t@.BB0_37\n\tadd\tstack-[2], r0, r1\n\tsub.s!\t32, r1, r1\n\tjump.lt\t@.BB0_61\n\tadd\tstack-[5], r0, r1\n\tst.1\t0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_13[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[3], r0, r3\n\tadd\t31, r3, r2\n\tshr.s\t5, r2, r2\n\tsub.s!\t32, r3, r3\n\tadd.lt\tr0, r0, r2\n\tld\tr1, r3\n\tadd\tstack-[2], r0, r1\n\tadd\t31, r1, r1\n\tshr.s\t5, r1, r1\n\tadd\tr3, r1, r1\n\tadd\tr3, r2, r2\n\tsub!\tr2, r1, r3\n\tjump.ge\t@.BB0_61\n.BB0_62:\n\tsstore\tr2, r0\n\tadd\t1, r2, r2\n\tsub!\tr2, r1, r3\n\tjump.lt\t@.BB0_62\n.BB0_61:\n\tadd\tstack-[3], r0, r1\n\tsub.s!\t31, r1, r1\n\tjump.le\t@.BB0_72\n\tadd\tstack-[5], r0, r1\n\tst.1\t0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_13[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tadd\tstack-[4], r0, r2\n\tjump.eq\t@.BB0_2\n\tand!\tstack-[3], r2, r2\n\tadd\t160, r0, r3\n\tld\tr1, r1\n\tjump.eq\t@.BB0_69\n\tadd\t32, r0, r4\n\tadd\tr0, r0, r3\n.BB0_67:\n\tadd\tr4, r0, r5\n\tadd\t128, r5, r4\n\tld.1\tr4, r4\n\tsstore\tr1, r4\n\tadd\t32, r5, r4\n\tadd\t1, r1, r1\n\tadd\t32, r3, r3\n\tsub!\tr3, r2, r6\n\tjump.lt\t@.BB0_67\n\tadd\t160, r5, r3\n.BB0_69:\n\tsub.s!\tstack-[3], r2, r2\n\tjump.ge\t@.BB0_71\n\tadd\tstack-[3], r0, r2\n\tshl.s\t3, r2, r2\n\tand\t248, r2, r2\n\tsub.s\t1, r0, r4\n\tshr\tr4, r2, r2\n\txor\tr2, r4, r2\n\tld.1\tr3, r3\n\tand\tr3, r2, r2\n\tsstore\tr1, r2\n.BB0_71:\n\tadd\tstack-[3], r0, r1\n\tshl.s\t1, r1, r1\n\tjump\t@.BB0_63\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_72:\n\tsub!\tstack-[3], r0, r1\n\tadd\tr0, r0, r1\n\tjump.eq\t@.BB0_74\n\tld.1\t160, r1\n.BB0_74:\n\tadd\tstack-[3], r0, r4\n\tshl.s\t3, r4, r2\n\tsub.s\t1, r0, r3\n\tshr\tr3, r2, r2\n\txor\tr2, r3, r2\n\tand\tr1, r2, r1\n\tshl.s\t1, r4, stack-[6]\n.BB0_63:\n\tor\tstack-[6], r1, r1\n\tadd\tstack-[5], r0, r2\n\tsstore\tr2, r1\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.func_end0:\n\ncopy_array_from_storage_to_memory_string:\n.func_begin1:\n\tnop\tstack+=[3]\n\tsload\tr1, r2\n\tand!\t1, r2, r3\n\tshr.s\t1, r2, r4\n\tand\t127, r4, r6\n\tadd.ne\tr4, r0, r6\n\tsub.s!\t31, r6, r4\n\tadd\t0, r0, r4\n\tadd.gt\t1, r0, r4\n\tand\t1, r4, r4\n\tsub!\tr3, r4, r4\n\tjump.ne\t@.BB1_1\n\tld.1\t64, r5\n\tst.1.inc\tr5, r6, r4\n\tsub!\tr3, r0, r3\n\tjump.eq\t@.BB1_8\n\tadd\tr4, r0, stack-[1]\n\tadd\tr6, r0, stack-[2]\n\tadd\tr5, r0, stack-[3]\n\tst.1\t0, r1\n\tadd\t@CPI1_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI1_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI1_1[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB1_10\n\tadd\tstack-[2], r0, r6\n\tsub!\tr6, r0, r2\n\tadd\tr0, r0, r2\n\tadd\tstack-[3], r0, r5\n\tadd\tstack-[1], r0, r7\n\tjump.eq\t@.BB1_4\n\tld\tr1, r1\n\tadd\tr0, r0, r2\n.BB1_13:\n\tadd\tr7, r2, r3\n\tsload\tr1, r4\n\tst.1\tr3, r4\n\tadd\t1, r1, r1\n\tadd\t32, r2, r2\n\tsub!\tr2, r6, r3\n\tjump.lt\t@.BB1_13\n\tjump\t@.BB1_4\n.BB1_8:\n\tsub.s\t256, r0, r1\n\tand\tr2, r1, r1\n\tst.1\tr4, r1\n\tsub!\tr6, r0, r1\n\tadd\t32, r0, r2\n\tadd.eq\t0, r0, r2\n.BB1_4:\n\tadd\t63, r2, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r2\n\tadd\tr2, r5, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI1_2[0], r1, r3\n\tjump.gt\t@.BB1_6\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB1_6\n\tst.1\t64, r1\n\tadd\tr5, r0, r1\n\tret\n.BB1_1:\n\tadd\t@CPI1_3[0], r0, r1\n\tst.1\t0, r1\n\tadd\t34, r0, r1\n\tjump\t@.BB1_2\n.BB1_6:\n\tadd\t@CPI1_3[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n.BB1_2:\n\tst.1\t4, r1\n\tadd\t@CPI1_4[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB1_10:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end1:\n\nabi_encode_string:\n.func_begin2:\n\tld.1\tr1, r3\n\tst.1.inc\tr2, r3, r2\n\tsub!\tr3, r0, r4\n\tjump.eq\t@.BB2_3\n\tadd\tr0, r0, r4\n.BB2_2:\n\tadd\tr2, r4, r5\n\tadd\t32, r4, r4\n\tadd\tr4, r1, r6\n\tld.1\tr6, r6\n\tst.1\tr5, r6\n\tsub!\tr4, r3, r5\n\tjump.lt\t@.BB2_2\n.BB2_3:\n\tadd\tr2, r3, r1\n\tst.1\tr1, r0\n\tadd\t31, r3, r1\n\tsub.s\t32, r0, r3\n\tand\tr1, r3, r1\n\tadd\tr2, r1, r1\n\tret\n.func_end2:\n\nstorage_array_index_access_struct_person__dyn:\n.func_begin3:\n\tadd\t2, r0, r2\n\tsload\tr2, r3\n\tsub!\tr3, r1, r3\n\tjump.le\t@.BB3_1\n\tst.1\t0, r2\n\tshl.s\t1, r1, r1\n\tadd\t@CPI3_2[0], r1, r1\n\tret\n.BB3_1:\n\tadd\t@CPI3_0[0], r0, r1\n\tst.1\t0, r1\n\tadd\t50, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI3_1[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end3:\n\n__sha3:\n.func_begin4:\n\tadd\t@CPI4_0[0], r0, r2\n\tcontext.gas_left\tr3\n\tsub.s!\t@CPI4_0[0], r3, r4\n\tadd.ge\tr2, r0, r3\n\tsub.s!\t@CPI4_0[0], r1, r4\n\tadd.ge\tr2, r0, r1\n\tshl.s\t96, r1, r1\n\tshl.s\t192, r3, r2\n\tor\tr2, r1, r1\n\tor\t@CPI4_1[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB4_2\n\tld\tr1, r1\n\tret\n.BB4_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end4:\n\n__staticcall:\n.func_begin5:\n.tmp0:\n\tfar_call.static\tr1, r2, @.BB5_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB5_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end5:\n\n\t.data\n\t.p2align\t5\nptr_calldata:\n.cell\t0\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\nCPI1_0:\nCPI4_0:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_2:\n\t.cell 3205602266\nCPI0_3:\n\t.cell 3205602267\nCPI0_4:\n\t.cell 3786612778\nCPI0_5:\n\t.cell 1476505509\nCPI0_6:\n\t.cell 2350832528\nCPI0_7:\nCPI1_2:\n\t.cell 18446744073709551615\nCPI0_8:\n\t.cell -57896044618658097711785492504343953926634992332820282019728792003956564819968\nCPI0_9:\n\t.cell 18446744073709551616\nCPI0_10:\n\t.cell 18446744073709551551\nCPI0_11:\nCPI3_2:\n\t.cell 29102676481673041902632991033461445430619272659676223336789171408008386403022\nCPI0_12:\n\t.cell 29102676481673041902632991033461445430619272659676223336789171408008386403023\nCPI0_13:\nCPI1_1:\n\t.cell 904625697166532776746648320380374280103671757735618107014721178055227736064\nCPI0_14:\n\t.cell 904625697166532776746648320380374280103671760270919307471179981048634146816\nCPI0_15:\nCPI1_3:\nCPI3_0:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_16:\nCPI1_4:\nCPI3_1:\n\t.cell 2852213850513516153367582212096\nCPI0_17:\n\t.cell 2535301202817642044428229017600\nCPI4_1:\n\t.cell 904625697166532776746648320380374280103671755200316906558262375061821325312\n","bytecode":{"object":""},"methodIdentifiers":{"addperson(string,uint256)":"e1b3202a","favoritenumbertoname(uint256)":"8c1edb90","getarraylength()":"5801afa5","listofpeople(uint256)":"bf119bdb"}},"irOptimized":"/// @use-src 2:\"contracts/mapping.sol\"\nobject \"Mapping_111\" {\n    code {\n        {\n            /// @src 2:60:625  \"contract Mapping{...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            let _2 := datasize(\"Mapping_111_deployed\")\n            codecopy(_1, dataoffset(\"Mapping_111_deployed\"), _2)\n            return(_1, _2)\n        }\n    }\n    /// @use-src 2:\"contracts/mapping.sol\"\n    object \"Mapping_111_deployed\" {\n        code {\n            {\n                /// @src 2:60:625  \"contract Mapping{...\"\n                let _1 := memoryguard(0x80)\n                mstore(64, _1)\n                if iszero(lt(calldatasize(), 4))\n                {\n                    switch shr(224, calldataload(0))\n                    case 0x5801afa5 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        mstore(_1, sload(/** @src 2:595:607  \"listofpeople\" */ 0x02))\n                        /// @src 2:60:625  \"contract Mapping{...\"\n                        return(_1, 32)\n                    }\n                    case 0x8c1edb90 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        mstore(0, calldataload(4))\n                        mstore(32, 1)\n                        let value := copy_array_from_storage_to_memory_string(keccak256(0, 64))\n                        let memPos := mload(64)\n                        mstore(memPos, 32)\n                        return(memPos, sub(abi_encode_string(value, add(memPos, 32)), memPos))\n                    }\n                    case 0xbf119bdb {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value_1 := calldataload(4)\n                        /// @src 2:271:299  \"person[] public listofpeople\"\n                        if iszero(lt(value_1, /** @src 2:60:625  \"contract Mapping{...\" */ sload(/** @src 2:271:299  \"person[] public listofpeople\" */ 2)))\n                        {\n                            revert(/** @src 2:60:625  \"contract Mapping{...\" */ 0, 0)\n                        }\n                        /// @src 2:271:299  \"person[] public listofpeople\"\n                        let slot, offset := storage_array_index_access_struct_person__dyn(value_1)\n                        /// @src 2:60:625  \"contract Mapping{...\"\n                        let _2 := sload(/** @src 2:271:299  \"person[] public listofpeople\" */ slot)\n                        let ret_mpos := copy_array_from_storage_to_memory_string(add(slot, /** @src 2:60:625  \"contract Mapping{...\" */ 1))\n                        let memPos_1 := mload(64)\n                        mstore(memPos_1, _2)\n                        mstore(add(memPos_1, 32), 64)\n                        return(memPos_1, sub(abi_encode_string(ret_mpos, add(memPos_1, 64)), memPos_1))\n                    }\n                    case 0xe1b3202a {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                        let offset_1 := calldataload(4)\n                        if gt(offset_1, 0xffffffffffffffff) { revert(0, 0) }\n                        if iszero(slt(add(offset_1, 35), calldatasize())) { revert(0, 0) }\n                        let _3 := calldataload(add(4, offset_1))\n                        let _4 := 36\n                        if gt(_3, 0xffffffffffffffff)\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, _4)\n                        }\n                        let _5 := 0x1f\n                        let memPtr := mload(64)\n                        finalize_allocation(memPtr, add(and(add(_3, _5), not(31)), 0x20))\n                        mstore(memPtr, _3)\n                        if gt(add(add(offset_1, _3), _4), calldatasize()) { revert(0, 0) }\n                        calldatacopy(add(memPtr, 0x20), add(offset_1, _4), _3)\n                        mstore(add(add(memPtr, _3), 0x20), 0)\n                        let memPtr_1 := mload(64)\n                        let newFreePtr := add(memPtr_1, 64)\n                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr_1))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, _4)\n                        }\n                        mstore(64, newFreePtr)\n                        mstore(memPtr_1, calldataload(_4))\n                        /// @src 2:415:444  \"person(_favoritenumber,_name)\"\n                        let _6 := add(memPtr_1, /** @src 2:60:625  \"contract Mapping{...\" */ 0x20)\n                        mstore(_6, memPtr)\n                        let oldLen := sload(/** @src 2:397:409  \"listofpeople\" */ 0x02)\n                        /// @src 2:60:625  \"contract Mapping{...\"\n                        if iszero(lt(oldLen, 18446744073709551616))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, _4)\n                        }\n                        sstore(/** @src 2:397:409  \"listofpeople\" */ 0x02, /** @src 2:60:625  \"contract Mapping{...\" */ add(oldLen, 1))\n                        let slot_1, offset_2 := storage_array_index_access_struct_person__dyn(oldLen)\n                        if offset_2\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0)\n                            revert(0, _4)\n                        }\n                        sstore(slot_1, mload(memPtr_1))\n                        let _7 := mload(_6)\n                        let newLen := mload(_7)\n                        if gt(newLen, 0xffffffffffffffff)\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, _4)\n                        }\n                        let _8 := extract_byte_array_length(sload(add(slot_1, 1)))\n                        if gt(_8, _5)\n                        {\n                            mstore(0, add(slot_1, 1))\n                            let data := keccak256(0, 0x20)\n                            let deleteStart := add(data, shr(5, add(newLen, _5)))\n                            if lt(newLen, 0x20) { deleteStart := data }\n                            let _9 := add(data, shr(5, add(_8, _5)))\n                            let start := deleteStart\n                            for { } lt(start, _9) { start := add(start, 1) }\n                            { sstore(start, 0) }\n                        }\n                        let srcOffset := 0\n                        srcOffset := 0x20\n                        switch gt(newLen, _5)\n                        case 1 {\n                            let loopEnd := and(newLen, not(31))\n                            mstore(0, add(slot_1, 1))\n                            let dstPtr := keccak256(0, 0x20)\n                            let i := 0\n                            for { } lt(i, loopEnd) { i := add(i, 0x20) }\n                            {\n                                sstore(dstPtr, mload(add(_7, srcOffset)))\n                                dstPtr := add(dstPtr, 1)\n                                srcOffset := add(srcOffset, 0x20)\n                            }\n                            if lt(loopEnd, newLen)\n                            {\n                                let lastValue := mload(add(_7, srcOffset))\n                                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n                            }\n                            sstore(add(slot_1, 1), add(shl(1, newLen), 1))\n                        }\n                        default {\n                            let value_2 := 0\n                            if newLen\n                            {\n                                value_2 := mload(add(_7, srcOffset))\n                            }\n                            sstore(add(slot_1, 1), or(and(value_2, not(shr(shl(3, newLen), not(0)))), shl(1, newLen)))\n                        }\n                        mstore(0, calldataload(_4))\n                        mstore(0x20, 1)\n                        let dataSlot := keccak256(0, 64)\n                        let newLen_1 := mload(memPtr)\n                        if gt(newLen_1, 0xffffffffffffffff)\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, _4)\n                        }\n                        let _10 := extract_byte_array_length(sload(dataSlot))\n                        if gt(_10, _5)\n                        {\n                            mstore(0, dataSlot)\n                            let data_1 := keccak256(0, 0x20)\n                            let deleteStart_1 := add(data_1, shr(5, add(newLen_1, _5)))\n                            if lt(newLen_1, 0x20) { deleteStart_1 := data_1 }\n                            let _11 := add(data_1, shr(5, add(_10, _5)))\n                            let start_1 := deleteStart_1\n                            for { } lt(start_1, _11) { start_1 := add(start_1, 1) }\n                            { sstore(start_1, 0) }\n                        }\n                        let srcOffset_1 := 0\n                        srcOffset_1 := 0x20\n                        switch gt(newLen_1, _5)\n                        case 1 {\n                            let loopEnd_1 := and(newLen_1, not(31))\n                            mstore(0, dataSlot)\n                            let dstPtr_1 := keccak256(0, 0x20)\n                            let i_1 := 0\n                            for { } lt(i_1, loopEnd_1) { i_1 := add(i_1, 0x20) }\n                            {\n                                sstore(dstPtr_1, mload(add(memPtr, srcOffset_1)))\n                                dstPtr_1 := add(dstPtr_1, 1)\n                                srcOffset_1 := add(srcOffset_1, 0x20)\n                            }\n                            if lt(loopEnd_1, newLen_1)\n                            {\n                                let lastValue_1 := mload(add(memPtr, srcOffset_1))\n                                sstore(dstPtr_1, and(lastValue_1, not(shr(and(shl(3, newLen_1), 248), not(0)))))\n                            }\n                            sstore(dataSlot, add(shl(1, newLen_1), 1))\n                        }\n                        default {\n                            let value_3 := 0\n                            if newLen_1\n                            {\n                                value_3 := mload(add(memPtr, srcOffset_1))\n                            }\n                            sstore(dataSlot, or(and(value_3, not(shr(shl(3, newLen_1), not(0)))), shl(1, newLen_1)))\n                        }\n                        return(0, 0)\n                    }\n                }\n                revert(0, 0)\n            }\n            function extract_byte_array_length(data) -> length\n            {\n                length := shr(1, data)\n                let outOfPlaceEncoding := and(data, 1)\n                if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                if eq(outOfPlaceEncoding, lt(length, 32))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x22)\n                    revert(0, 0x24)\n                }\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            function copy_array_from_storage_to_memory_string(slot) -> memPtr\n            {\n                memPtr := mload(64)\n                let ret := /** @src -1:-1:-1 */ 0\n                /// @src 2:60:625  \"contract Mapping{...\"\n                let slotValue := sload(slot)\n                let length := extract_byte_array_length(slotValue)\n                mstore(memPtr, length)\n                let _1 := 0x20\n                let _2 := 1\n                switch and(slotValue, 1)\n                case 0 {\n                    mstore(add(memPtr, _1), and(slotValue, not(255)))\n                    ret := add(add(memPtr, shl(5, iszero(iszero(length)))), _1)\n                }\n                case 1 {\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 2:60:625  \"contract Mapping{...\" */ slot)\n                    let dataPos := keccak256(/** @src -1:-1:-1 */ 0, /** @src 2:60:625  \"contract Mapping{...\" */ _1)\n                    let i := /** @src -1:-1:-1 */ 0\n                    /// @src 2:60:625  \"contract Mapping{...\"\n                    for { } lt(i, length) { i := add(i, _1) }\n                    {\n                        mstore(add(add(memPtr, i), _1), sload(dataPos))\n                        dataPos := add(dataPos, _2)\n                    }\n                    ret := add(add(memPtr, i), _1)\n                }\n                finalize_allocation(memPtr, sub(ret, memPtr))\n            }\n            function abi_encode_string(value, pos) -> end\n            {\n                let length := mload(value)\n                mstore(pos, length)\n                let i := /** @src -1:-1:-1 */ 0\n                /// @src 2:60:625  \"contract Mapping{...\"\n                for { } lt(i, length) { i := add(i, 0x20) }\n                {\n                    let _1 := 0x20\n                    mstore(add(add(pos, i), _1), mload(add(add(value, i), _1)))\n                }\n                mstore(add(add(pos, length), 0x20), /** @src -1:-1:-1 */ 0)\n                /// @src 2:60:625  \"contract Mapping{...\"\n                end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n            }\n            function storage_array_index_access_struct_person__dyn(index) -> slot, offset\n            {\n                if iszero(lt(index, sload(/** @src 2:271:299  \"person[] public listofpeople\" */ 2)))\n                /// @src 2:60:625  \"contract Mapping{...\"\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x32)\n                    revert(0, 0x24)\n                }\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 2:271:299  \"person[] public listofpeople\" */ 2)\n                /// @src 2:60:625  \"contract Mapping{...\"\n                slot := add(29102676481673041902632991033461445430619272659676223336789171408008386403022, shl(1, index))\n                offset := /** @src -1:-1:-1 */ 0\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220d4fb8fd4671c73baa6ae8cb3daeecf28167d5617ea123518968aa27d52fca61764736f6c63430008180033\"\n    }\n}\n","hash":"010000a553ada79e94d35f291b7206638f11e7bda656b5be49b4cbd8bb376cf8","factoryDependencies":{}}},"contracts/simplestorage.sol":{"Simple_Storage":{"abi":[{"inputs":[],"name":"favoriteNumber","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"retrieve","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_favoriteNumber","type":"uint256"}],"name":"store","outputs":[],"stateMutability":"nonpayable","type":"function"}],"metadata":{"optimizer_settings":{"is_debug_logging_enabled":false,"is_fallback_to_size_enabled":false,"is_system_request_memoization_disabled":false,"is_verify_each_enabled":false,"level_back_end":"Aggressive","level_middle_end":"Aggressive","level_middle_end_size":"Zero"},"solc_metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"favoriteNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_favoriteNumber\",\"type\":\"uint256\"}],\"name\":\"store\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/simplestorage.sol\":\"Simple_Storage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOcmu\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/simplestorage.sol\":{\"keccak256\":\"0x1c5c11785373863b3cd3acb9d5843085b9192501a910dee1ece7c0a31156a888\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c988178a06b393b962619f74775c36c3e2c84a2d13b7a35fd8552c06c38d1187\",\"dweb:/ipfs/QmcsUNGTVZZ398ve4LnRbsBfAQuvSSRMZcf8jWYEgMom6Z\"]}},\"version\":1}","solc_version":"0.8.24","solc_zkvm_edition":null,"zk_version":"1.4.0"},"evm":{"legacyAssembly":null,"assembly":"\t.text\n\t.file\t\"simplestorage.sol:Simple_Storage\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tadd\t128, r0, r3\n\tst.1\t64, r3\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_1\n\tsub.s!\t4, r3, r2\n\tjump.lt\t@.BB0_2\n\tld\tr1, r2\n\tshr.s\t224, r2, r2\n\tsub.s!\t@CPI0_2[0], r2, r4\n\tjump.eq\t@.BB0_8\n\tsub.s!\t@CPI0_3[0], r2, r4\n\tjump.eq\t@.BB0_10\n\tsub.s!\t@CPI0_4[0], r2, r1\n\tjump.ne\t@.BB0_2\n.BB0_8:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tsload\tr0, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_5[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_1:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_1[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_10:\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r3, r2\n\tsub.s!\t32, r2, r2\n\tjump.lt\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tsstore\tr0, r1\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end0:\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_2:\n\t.cell 778358465\nCPI0_3:\n\t.cell 1616328221\nCPI0_4:\n\t.cell 1193245919\nCPI0_5:\n\t.cell 2535301202817642044428229017600\n","bytecode":{"object":"0000008003000039000000400030043f000000000301001900000060033002700000000d033001970000000102200190000000180000c13d000000040230008c0000002b0000413d000000000201043b000000e0022002700000000f0420009c000000110000613d000000100420009c000000200000613d000000110120009c0000002b0000c13d0000000001000416000000000101004b0000002b0000c13d000000000100041a000000800010043f00000012010000410000002e0001042e0000000001000416000000000101004b0000002b0000c13d0000002001000039000001000010044300000120000004430000000e010000410000002e0001042e0000000002000416000000000202004b0000002b0000c13d000000040230008a000000200220008c0000002b0000413d0000000401100370000000000101043b000000000010041b00000000010000190000002e0001042e00000000010000190000002f000104300000002d000004320000002e0001042e0000002f00010430000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffff0000000200000000000000000000000000000040000001000000000000000000000000000000000000000000000000000000000000000000000000002e64cec1000000000000000000000000000000000000000000000000000000006057361d00000000000000000000000000000000000000000000000000000000471f7cdf000000000000000000000000000000000000002000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000bfef1f59a4c09f8beeac7d5e926edf1076f42547687219532a3b8c3ca6c551d"},"methodIdentifiers":{"favoriteNumber()":"471f7cdf","retrieve()":"2e64cec1","store(uint256)":"6057361d"}},"irOptimized":"/// @use-src 3:\"contracts/simplestorage.sol\"\nobject \"Simple_Storage_134\" {\n    code {\n        {\n            /// @src 3:62:356  \"contract Simple_Storage{...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            let _2 := datasize(\"Simple_Storage_134_deployed\")\n            codecopy(_1, dataoffset(\"Simple_Storage_134_deployed\"), _2)\n            return(_1, _2)\n        }\n    }\n    /// @use-src 3:\"contracts/simplestorage.sol\"\n    object \"Simple_Storage_134_deployed\" {\n        code {\n            {\n                /// @src 3:62:356  \"contract Simple_Storage{...\"\n                let _1 := memoryguard(0x80)\n                mstore(64, _1)\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let _2 := 0\n                    switch shr(224, calldataload(_2))\n                    case 0x2e64cec1 {\n                        if callvalue() { revert(_2, _2) }\n                        if slt(add(calldatasize(), not(3)), _2) { revert(_2, _2) }\n                        mstore(_1, sload(_2))\n                        return(_1, 32)\n                    }\n                    case 0x471f7cdf {\n                        if callvalue() { revert(_2, _2) }\n                        if slt(add(calldatasize(), not(3)), _2) { revert(_2, _2) }\n                        let _3 := sload(_2)\n                        let memPos := mload(64)\n                        mstore(memPos, _3)\n                        return(memPos, 32)\n                    }\n                    case 0x6057361d {\n                        if callvalue() { revert(_2, _2) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_2, _2) }\n                        sstore(_2, calldataload(4))\n                        return(_2, _2)\n                    }\n                }\n                revert(0, 0)\n            }\n        }\n        data \".metadata\" hex\"a26469706673582212204d79aa527d748f11744db85559a56c8193bfcf2453321d9fa9f844e21a6eea7464736f6c63430008180033\"\n    }\n}\n","hash":"010000151b73b3597b7be10c7cb7518956ae6d11856a669d294c11e939939e85","factoryDependencies":{}}}}}}